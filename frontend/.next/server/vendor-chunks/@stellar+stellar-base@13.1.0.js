"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stellar+stellar-base@13.1.0";
exports.ids = ["vendor-chunks/@stellar+stellar-base@13.1.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/account.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/account.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Account = void 0;\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./util/bignumber */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Create a new Account object.\n *\n * `Account` represents a single account in the Stellar network and its sequence\n * number. Account tracks the sequence number as it is used by {@link\n * TransactionBuilder}. See\n * [Accounts](https://developers.stellar.org/docs/glossary/accounts/) for\n * more information about how accounts work in Stellar.\n *\n * @constructor\n *\n * @param {string} accountId - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n * @param {string} sequence  - current sequence number of the account\n */\nvar Account = exports.Account = /*#__PURE__*/function () {\n  function Account(accountId, sequence) {\n    _classCallCheck(this, Account);\n    if (_strkey.StrKey.isValidMed25519PublicKey(accountId)) {\n      throw new Error('accountId is an M-address; use MuxedAccount instead');\n    }\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    if (!(typeof sequence === 'string')) {\n      throw new Error('sequence must be of type string');\n    }\n    this._accountId = accountId;\n    this.sequence = new _bignumber[\"default\"](sequence);\n  }\n\n  /**\n   * Returns Stellar account ID, ex.\n   * `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`.\n   * @returns {string}\n   */\n  return _createClass(Account, [{\n    key: \"accountId\",\n    value: function accountId() {\n      return this._accountId;\n    }\n\n    /**\n     * @returns {string}  sequence number for the account as a string\n     */\n  }, {\n    key: \"sequenceNumber\",\n    value: function sequenceNumber() {\n      return this.sequence.toString();\n    }\n\n    /**\n     * Increments sequence number in this object by one.\n     * @returns {void}\n     */\n  }, {\n    key: \"incrementSequenceNumber\",\n    value: function incrementSequenceNumber() {\n      this.sequence = this.sequence.plus(1);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9hY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7QUFDZix3Q0FBd0MsbUJBQU8sQ0FBQywwSUFBa0I7QUFDbEUsY0FBYyxtQkFBTyxDQUFDLDBIQUFVO0FBQ2hDLHFDQUFxQyxpQ0FBaUM7QUFDdEUsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EseURBQXlELEtBQUs7QUFDOUQscUJBQXFCO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGNBQWMsZUFBZTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9hY2NvdW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BY2NvdW50ID0gdm9pZCAwO1xudmFyIF9iaWdudW1iZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYmlnbnVtYmVyXCIpKTtcbnZhciBfc3Rya2V5ID0gcmVxdWlyZShcIi4vc3Rya2V5XCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IEFjY291bnQgb2JqZWN0LlxuICpcbiAqIGBBY2NvdW50YCByZXByZXNlbnRzIGEgc2luZ2xlIGFjY291bnQgaW4gdGhlIFN0ZWxsYXIgbmV0d29yayBhbmQgaXRzIHNlcXVlbmNlXG4gKiBudW1iZXIuIEFjY291bnQgdHJhY2tzIHRoZSBzZXF1ZW5jZSBudW1iZXIgYXMgaXQgaXMgdXNlZCBieSB7QGxpbmtcbiAqIFRyYW5zYWN0aW9uQnVpbGRlcn0uIFNlZVxuICogW0FjY291bnRzXShodHRwczovL2RldmVsb3BlcnMuc3RlbGxhci5vcmcvZG9jcy9nbG9zc2FyeS9hY2NvdW50cy8pIGZvclxuICogbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBob3cgYWNjb3VudHMgd29yayBpbiBTdGVsbGFyLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhY2NvdW50SWQgLSBJRCBvZiB0aGUgYWNjb3VudCAoZXguXG4gKiAgICAgYEdCM0tKUExGVVlONVZMNlIzR1UzRUdDR1ZDS0ZEU0Q3QkVEWDQySFdHNUJXRktCM0tRR0pKUk1BYCkuIElmIHlvdVxuICogICAgIHByb3ZpZGUgYSBtdXhlZCBhY2NvdW50IGFkZHJlc3MsIHRoaXMgd2lsbCB0aHJvdzsgdXNlIHtAbGlua1xuICogICAgIE11eGVkQWNjb3VudH0gaW5zdGVhZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZXF1ZW5jZSAgLSBjdXJyZW50IHNlcXVlbmNlIG51bWJlciBvZiB0aGUgYWNjb3VudFxuICovXG52YXIgQWNjb3VudCA9IGV4cG9ydHMuQWNjb3VudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFjY291bnQoYWNjb3VudElkLCBzZXF1ZW5jZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY2NvdW50KTtcbiAgICBpZiAoX3N0cmtleS5TdHJLZXkuaXNWYWxpZE1lZDI1NTE5UHVibGljS2V5KGFjY291bnRJZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWNjb3VudElkIGlzIGFuIE0tYWRkcmVzczsgdXNlIE11eGVkQWNjb3VudCBpbnN0ZWFkJyk7XG4gICAgfVxuICAgIGlmICghX3N0cmtleS5TdHJLZXkuaXNWYWxpZEVkMjU1MTlQdWJsaWNLZXkoYWNjb3VudElkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhY2NvdW50SWQgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICBpZiAoISh0eXBlb2Ygc2VxdWVuY2UgPT09ICdzdHJpbmcnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXF1ZW5jZSBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nJyk7XG4gICAgfVxuICAgIHRoaXMuX2FjY291bnRJZCA9IGFjY291bnRJZDtcbiAgICB0aGlzLnNlcXVlbmNlID0gbmV3IF9iaWdudW1iZXJbXCJkZWZhdWx0XCJdKHNlcXVlbmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIFN0ZWxsYXIgYWNjb3VudCBJRCwgZXguXG4gICAqIGBHQjNLSlBMRlVZTjVWTDZSM0dVM0VHQ0dWQ0tGRFNEN0JFRFg0MkhXRzVCV0ZLQjNLUUdKSlJNQWAuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKEFjY291bnQsIFt7XG4gICAga2V5OiBcImFjY291bnRJZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhY2NvdW50SWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYWNjb3VudElkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICBzZXF1ZW5jZSBudW1iZXIgZm9yIHRoZSBhY2NvdW50IGFzIGEgc3RyaW5nXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwic2VxdWVuY2VOdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VxdWVuY2VOdW1iZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXF1ZW5jZS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluY3JlbWVudHMgc2VxdWVuY2UgbnVtYmVyIGluIHRoaXMgb2JqZWN0IGJ5IG9uZS5cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJpbmNyZW1lbnRTZXF1ZW5jZU51bWJlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmNyZW1lbnRTZXF1ZW5jZU51bWJlcigpIHtcbiAgICAgIHRoaXMuc2VxdWVuY2UgPSB0aGlzLnNlcXVlbmNlLnBsdXMoMSk7XG4gICAgfVxuICB9XSk7XG59KCk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/address.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/address.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Address = void 0;\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Create a new Address object.\n *\n * `Address` represents a single address in the Stellar network. An address can\n * represent an account or a contract.\n *\n * @constructor\n *\n * @param {string} address - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n */\nvar Address = exports.Address = /*#__PURE__*/function () {\n  function Address(address) {\n    _classCallCheck(this, Address);\n    if (_strkey.StrKey.isValidEd25519PublicKey(address)) {\n      this._type = 'account';\n      this._key = _strkey.StrKey.decodeEd25519PublicKey(address);\n    } else if (_strkey.StrKey.isValidContract(address)) {\n      this._type = 'contract';\n      this._key = _strkey.StrKey.decodeContract(address);\n    } else {\n      throw new Error(\"Unsupported address type: \".concat(address));\n    }\n  }\n\n  /**\n   * Parses a string and returns an Address object.\n   *\n   * @param {string} address - The address to parse. ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`\n   * @returns {Address}\n   */\n  return _createClass(Address, [{\n    key: \"toString\",\n    value:\n    /**\n     * Serialize an address to string.\n     *\n     * @returns {string}\n     */\n    function toString() {\n      switch (this._type) {\n        case 'account':\n          return _strkey.StrKey.encodeEd25519PublicKey(this._key);\n        case 'contract':\n          return _strkey.StrKey.encodeContract(this._key);\n        default:\n          throw new Error('Unsupported address type');\n      }\n    }\n\n    /**\n     * Convert this Address to an xdr.ScVal type.\n     *\n     * @returns {xdr.ScVal}\n     */\n  }, {\n    key: \"toScVal\",\n    value: function toScVal() {\n      return _xdr[\"default\"].ScVal.scvAddress(this.toScAddress());\n    }\n\n    /**\n     * Convert this Address to an xdr.ScAddress type.\n     *\n     * @returns {xdr.ScAddress}\n     */\n  }, {\n    key: \"toScAddress\",\n    value: function toScAddress() {\n      switch (this._type) {\n        case 'account':\n          return _xdr[\"default\"].ScAddress.scAddressTypeAccount(_xdr[\"default\"].PublicKey.publicKeyTypeEd25519(this._key));\n        case 'contract':\n          return _xdr[\"default\"].ScAddress.scAddressTypeContract(this._key);\n        default:\n          throw new Error('Unsupported address type');\n      }\n    }\n\n    /**\n     * Return the raw public key bytes for this address.\n     *\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      return this._key;\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(address) {\n      return new Address(address);\n    }\n\n    /**\n     * Creates a new account Address object from a buffer of raw bytes.\n     *\n     * @param {Buffer} buffer - The bytes of an address to parse.\n     * @returns {Address}\n     */\n  }, {\n    key: \"account\",\n    value: function account(buffer) {\n      return new Address(_strkey.StrKey.encodeEd25519PublicKey(buffer));\n    }\n\n    /**\n     * Creates a new contract Address object from a buffer of raw bytes.\n     *\n     * @param {Buffer} buffer - The bytes of an address to parse.\n     * @returns {Address}\n     */\n  }, {\n    key: \"contract\",\n    value: function contract(buffer) {\n      return new Address(_strkey.StrKey.encodeContract(buffer));\n    }\n\n    /**\n     * Convert this from an xdr.ScVal type\n     *\n     * @param {xdr.ScVal} scVal - The xdr.ScVal type to parse\n     * @returns {Address}\n     */\n  }, {\n    key: \"fromScVal\",\n    value: function fromScVal(scVal) {\n      return Address.fromScAddress(scVal.address());\n    }\n\n    /**\n     * Convert this from an xdr.ScAddress type\n     *\n     * @param {xdr.ScAddress} scAddress - The xdr.ScAddress type to parse\n     * @returns {Address}\n     */\n  }, {\n    key: \"fromScAddress\",\n    value: function fromScAddress(scAddress) {\n      switch (scAddress[\"switch\"]().value) {\n        case _xdr[\"default\"].ScAddressType.scAddressTypeAccount().value:\n          return Address.account(scAddress.accountId().ed25519());\n        case _xdr[\"default\"].ScAddressType.scAddressTypeContract().value:\n          return Address.contract(scAddress.contractId());\n        default:\n          throw new Error('Unsupported address type');\n      }\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7QUFDZixjQUFjLG1CQUFPLENBQUMsMEhBQVU7QUFDaEMsa0NBQWtDLG1CQUFPLENBQUMsb0hBQU87QUFDakQscUNBQXFDLGlDQUFpQztBQUN0RSxzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLHlEQUF5RCxLQUFLO0FBQzlELHFCQUFxQjtBQUNyQjtBQUNBLGNBQWMsZUFBZTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUI7QUFDakI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFdBQVc7QUFDMUIsaUJBQWlCO0FBQ2pCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZUFBZTtBQUM5QixpQkFBaUI7QUFDakI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL2FkZHJlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFkZHJlc3MgPSB2b2lkIDA7XG52YXIgX3N0cmtleSA9IHJlcXVpcmUoXCIuL3N0cmtleVwiKTtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IEFkZHJlc3Mgb2JqZWN0LlxuICpcbiAqIGBBZGRyZXNzYCByZXByZXNlbnRzIGEgc2luZ2xlIGFkZHJlc3MgaW4gdGhlIFN0ZWxsYXIgbmV0d29yay4gQW4gYWRkcmVzcyBjYW5cbiAqIHJlcHJlc2VudCBhbiBhY2NvdW50IG9yIGEgY29udHJhY3QuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3MgLSBJRCBvZiB0aGUgYWNjb3VudCAoZXguXG4gKiAgICAgYEdCM0tKUExGVVlONVZMNlIzR1UzRUdDR1ZDS0ZEU0Q3QkVEWDQySFdHNUJXRktCM0tRR0pKUk1BYCkuIElmIHlvdVxuICogICAgIHByb3ZpZGUgYSBtdXhlZCBhY2NvdW50IGFkZHJlc3MsIHRoaXMgd2lsbCB0aHJvdzsgdXNlIHtAbGlua1xuICogICAgIE11eGVkQWNjb3VudH0gaW5zdGVhZC5cbiAqL1xudmFyIEFkZHJlc3MgPSBleHBvcnRzLkFkZHJlc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWRkcmVzcyk7XG4gICAgaWYgKF9zdHJrZXkuU3RyS2V5LmlzVmFsaWRFZDI1NTE5UHVibGljS2V5KGFkZHJlc3MpKSB7XG4gICAgICB0aGlzLl90eXBlID0gJ2FjY291bnQnO1xuICAgICAgdGhpcy5fa2V5ID0gX3N0cmtleS5TdHJLZXkuZGVjb2RlRWQyNTUxOVB1YmxpY0tleShhZGRyZXNzKTtcbiAgICB9IGVsc2UgaWYgKF9zdHJrZXkuU3RyS2V5LmlzVmFsaWRDb250cmFjdChhZGRyZXNzKSkge1xuICAgICAgdGhpcy5fdHlwZSA9ICdjb250cmFjdCc7XG4gICAgICB0aGlzLl9rZXkgPSBfc3Rya2V5LlN0cktleS5kZWNvZGVDb250cmFjdChhZGRyZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgYWRkcmVzcyB0eXBlOiBcIi5jb25jYXQoYWRkcmVzcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgYSBzdHJpbmcgYW5kIHJldHVybnMgYW4gQWRkcmVzcyBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gVGhlIGFkZHJlc3MgdG8gcGFyc2UuIGV4LiBgR0IzS0pQTEZVWU41Vkw2UjNHVTNFR0NHVkNLRkRTRDdCRURYNDJIV0c1QldGS0IzS1FHSkpSTUFgXG4gICAqIEByZXR1cm5zIHtBZGRyZXNzfVxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhBZGRyZXNzLCBbe1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSBhbiBhZGRyZXNzIHRvIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3R5cGUpIHtcbiAgICAgICAgY2FzZSAnYWNjb3VudCc6XG4gICAgICAgICAgcmV0dXJuIF9zdHJrZXkuU3RyS2V5LmVuY29kZUVkMjU1MTlQdWJsaWNLZXkodGhpcy5fa2V5KTtcbiAgICAgICAgY2FzZSAnY29udHJhY3QnOlxuICAgICAgICAgIHJldHVybiBfc3Rya2V5LlN0cktleS5lbmNvZGVDb250cmFjdCh0aGlzLl9rZXkpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgYWRkcmVzcyB0eXBlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCB0aGlzIEFkZHJlc3MgdG8gYW4geGRyLlNjVmFsIHR5cGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7eGRyLlNjVmFsfVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInRvU2NWYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TY1ZhbCgpIHtcbiAgICAgIHJldHVybiBfeGRyW1wiZGVmYXVsdFwiXS5TY1ZhbC5zY3ZBZGRyZXNzKHRoaXMudG9TY0FkZHJlc3MoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCB0aGlzIEFkZHJlc3MgdG8gYW4geGRyLlNjQWRkcmVzcyB0eXBlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3hkci5TY0FkZHJlc3N9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidG9TY0FkZHJlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TY0FkZHJlc3MoKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3R5cGUpIHtcbiAgICAgICAgY2FzZSAnYWNjb3VudCc6XG4gICAgICAgICAgcmV0dXJuIF94ZHJbXCJkZWZhdWx0XCJdLlNjQWRkcmVzcy5zY0FkZHJlc3NUeXBlQWNjb3VudChfeGRyW1wiZGVmYXVsdFwiXS5QdWJsaWNLZXkucHVibGljS2V5VHlwZUVkMjU1MTkodGhpcy5fa2V5KSk7XG4gICAgICAgIGNhc2UgJ2NvbnRyYWN0JzpcbiAgICAgICAgICByZXR1cm4gX3hkcltcImRlZmF1bHRcIl0uU2NBZGRyZXNzLnNjQWRkcmVzc1R5cGVDb250cmFjdCh0aGlzLl9rZXkpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgYWRkcmVzcyB0eXBlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSByYXcgcHVibGljIGtleSBieXRlcyBmb3IgdGhpcyBhZGRyZXNzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0J1ZmZlcn1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ0b0J1ZmZlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0J1ZmZlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9rZXk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZnJvbVN0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tU3RyaW5nKGFkZHJlc3MpIHtcbiAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhhZGRyZXNzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFjY291bnQgQWRkcmVzcyBvYmplY3QgZnJvbSBhIGJ1ZmZlciBvZiByYXcgYnl0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIC0gVGhlIGJ5dGVzIG9mIGFuIGFkZHJlc3MgdG8gcGFyc2UuXG4gICAgICogQHJldHVybnMge0FkZHJlc3N9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiYWNjb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhY2NvdW50KGJ1ZmZlcikge1xuICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKF9zdHJrZXkuU3RyS2V5LmVuY29kZUVkMjU1MTlQdWJsaWNLZXkoYnVmZmVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb250cmFjdCBBZGRyZXNzIG9iamVjdCBmcm9tIGEgYnVmZmVyIG9mIHJhdyBieXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgLSBUaGUgYnl0ZXMgb2YgYW4gYWRkcmVzcyB0byBwYXJzZS5cbiAgICAgKiBAcmV0dXJucyB7QWRkcmVzc31cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJjb250cmFjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb250cmFjdChidWZmZXIpIHtcbiAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhfc3Rya2V5LlN0cktleS5lbmNvZGVDb250cmFjdChidWZmZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHRoaXMgZnJvbSBhbiB4ZHIuU2NWYWwgdHlwZVxuICAgICAqXG4gICAgICogQHBhcmFtIHt4ZHIuU2NWYWx9IHNjVmFsIC0gVGhlIHhkci5TY1ZhbCB0eXBlIHRvIHBhcnNlXG4gICAgICogQHJldHVybnMge0FkZHJlc3N9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbVNjVmFsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21TY1ZhbChzY1ZhbCkge1xuICAgICAgcmV0dXJuIEFkZHJlc3MuZnJvbVNjQWRkcmVzcyhzY1ZhbC5hZGRyZXNzKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgdGhpcyBmcm9tIGFuIHhkci5TY0FkZHJlc3MgdHlwZVxuICAgICAqXG4gICAgICogQHBhcmFtIHt4ZHIuU2NBZGRyZXNzfSBzY0FkZHJlc3MgLSBUaGUgeGRyLlNjQWRkcmVzcyB0eXBlIHRvIHBhcnNlXG4gICAgICogQHJldHVybnMge0FkZHJlc3N9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbVNjQWRkcmVzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tU2NBZGRyZXNzKHNjQWRkcmVzcykge1xuICAgICAgc3dpdGNoIChzY0FkZHJlc3NbXCJzd2l0Y2hcIl0oKS52YWx1ZSkge1xuICAgICAgICBjYXNlIF94ZHJbXCJkZWZhdWx0XCJdLlNjQWRkcmVzc1R5cGUuc2NBZGRyZXNzVHlwZUFjY291bnQoKS52YWx1ZTpcbiAgICAgICAgICByZXR1cm4gQWRkcmVzcy5hY2NvdW50KHNjQWRkcmVzcy5hY2NvdW50SWQoKS5lZDI1NTE5KCkpO1xuICAgICAgICBjYXNlIF94ZHJbXCJkZWZhdWx0XCJdLlNjQWRkcmVzc1R5cGUuc2NBZGRyZXNzVHlwZUNvbnRyYWN0KCkudmFsdWU6XG4gICAgICAgICAgcmV0dXJuIEFkZHJlc3MuY29udHJhY3Qoc2NBZGRyZXNzLmNvbnRyYWN0SWQoKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBhZGRyZXNzIHR5cGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbn0oKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Asset = void 0;\nvar _util = __webpack_require__(/*! ./util/util */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/util.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Asset class represents an asset, either the native asset (`XLM`)\n * or an asset code / issuer account ID pair.\n *\n * An asset code describes an asset code and issuer pair. In the case of the native\n * asset XLM, the issuer will be null.\n *\n * @constructor\n * @param {string} code - The asset code.\n * @param {string} issuer - The account ID of the issuer.\n */\nvar Asset = exports.Asset = /*#__PURE__*/function () {\n  function Asset(code, issuer) {\n    _classCallCheck(this, Asset);\n    if (!/^[a-zA-Z0-9]{1,12}$/.test(code)) {\n      throw new Error('Asset code is invalid (maximum alphanumeric, 12 characters at max)');\n    }\n    if (String(code).toLowerCase() !== 'xlm' && !issuer) {\n      throw new Error('Issuer cannot be null');\n    }\n    if (issuer && !_strkey.StrKey.isValidEd25519PublicKey(issuer)) {\n      throw new Error('Issuer is invalid');\n    }\n    if (String(code).toLowerCase() === 'xlm') {\n      // transform all xLM, Xlm, etc. variants -> XLM\n      this.code = 'XLM';\n    } else {\n      this.code = code;\n    }\n    this.issuer = issuer;\n  }\n\n  /**\n   * Returns an asset object for the native asset.\n   * @Return {Asset}\n   */\n  return _createClass(Asset, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the xdr.Asset object for this asset.\n     * @returns {xdr.Asset} XDR asset object\n     */\n    function toXDRObject() {\n      return this._toXDRObject(_xdr[\"default\"].Asset);\n    }\n\n    /**\n     * Returns the xdr.ChangeTrustAsset object for this asset.\n     * @returns {xdr.ChangeTrustAsset} XDR asset object\n     */\n  }, {\n    key: \"toChangeTrustXDRObject\",\n    value: function toChangeTrustXDRObject() {\n      return this._toXDRObject(_xdr[\"default\"].ChangeTrustAsset);\n    }\n\n    /**\n     * Returns the xdr.TrustLineAsset object for this asset.\n     * @returns {xdr.TrustLineAsset} XDR asset object\n     */\n  }, {\n    key: \"toTrustLineXDRObject\",\n    value: function toTrustLineXDRObject() {\n      return this._toXDRObject(_xdr[\"default\"].TrustLineAsset);\n    }\n\n    /**\n     * Returns the would-be contract ID (`C...` format) for this asset on a given\n     * network.\n     *\n     * @param {string}    networkPassphrase   indicates which network the contract\n     *    ID should refer to, since every network will have a unique ID for the\n     *    same contract (see {@link Networks} for options)\n     *\n     * @returns {string}  the strkey-encoded (`C...`) contract ID for this asset\n     *\n     * @warning This makes no guarantee that this contract actually *exists*.\n     */\n  }, {\n    key: \"contractId\",\n    value: function contractId(networkPassphrase) {\n      var networkId = (0, _hashing.hash)(Buffer.from(networkPassphrase));\n      var preimage = _xdr[\"default\"].HashIdPreimage.envelopeTypeContractId(new _xdr[\"default\"].HashIdPreimageContractId({\n        networkId: networkId,\n        contractIdPreimage: _xdr[\"default\"].ContractIdPreimage.contractIdPreimageFromAsset(this.toXDRObject())\n      }));\n      return _strkey.StrKey.encodeContract((0, _hashing.hash)(preimage.toXDR()));\n    }\n\n    /**\n     * Returns the xdr object for this asset.\n     * @param {xdr.Asset | xdr.ChangeTrustAsset} xdrAsset - The asset xdr object.\n     * @returns {xdr.Asset | xdr.ChangeTrustAsset | xdr.TrustLineAsset} XDR Asset object\n     */\n  }, {\n    key: \"_toXDRObject\",\n    value: function _toXDRObject() {\n      var xdrAsset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _xdr[\"default\"].Asset;\n      if (this.isNative()) {\n        return xdrAsset.assetTypeNative();\n      }\n      var xdrType;\n      var xdrTypeString;\n      if (this.code.length <= 4) {\n        xdrType = _xdr[\"default\"].AlphaNum4;\n        xdrTypeString = 'assetTypeCreditAlphanum4';\n      } else {\n        xdrType = _xdr[\"default\"].AlphaNum12;\n        xdrTypeString = 'assetTypeCreditAlphanum12';\n      }\n\n      // pad code with null bytes if necessary\n      var padLength = this.code.length <= 4 ? 4 : 12;\n      var paddedCode = this.code.padEnd(padLength, '\\0');\n\n      // eslint-disable-next-line new-cap\n      var assetType = new xdrType({\n        assetCode: paddedCode,\n        issuer: _keypair.Keypair.fromPublicKey(this.issuer).xdrAccountId()\n      });\n      return new xdrAsset(xdrTypeString, assetType);\n    }\n\n    /**\n     * @returns {string} Asset code\n     */\n  }, {\n    key: \"getCode\",\n    value: function getCode() {\n      if (this.code === undefined) {\n        return undefined;\n      }\n      return String(this.code);\n    }\n\n    /**\n     * @returns {string} Asset issuer\n     */\n  }, {\n    key: \"getIssuer\",\n    value: function getIssuer() {\n      if (this.issuer === undefined) {\n        return undefined;\n      }\n      return String(this.issuer);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {string} Asset type. Can be one of following types:\n     *\n     *  - `native`,\n     *  - `credit_alphanum4`,\n     *  - `credit_alphanum12`, or\n     *  - `unknown` as the error case (which should never occur)\n     */\n  }, {\n    key: \"getAssetType\",\n    value: function getAssetType() {\n      switch (this.getRawAssetType().value) {\n        case _xdr[\"default\"].AssetType.assetTypeNative().value:\n          return 'native';\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum4().value:\n          return 'credit_alphanum4';\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum12().value:\n          return 'credit_alphanum12';\n        default:\n          return 'unknown';\n      }\n    }\n\n    /**\n     * @returns {xdr.AssetType}  the raw XDR representation of the asset type\n     */\n  }, {\n    key: \"getRawAssetType\",\n    value: function getRawAssetType() {\n      if (this.isNative()) {\n        return _xdr[\"default\"].AssetType.assetTypeNative();\n      }\n      if (this.code.length <= 4) {\n        return _xdr[\"default\"].AssetType.assetTypeCreditAlphanum4();\n      }\n      return _xdr[\"default\"].AssetType.assetTypeCreditAlphanum12();\n    }\n\n    /**\n     * @returns {boolean}  true if this asset object is the native asset.\n     */\n  }, {\n    key: \"isNative\",\n    value: function isNative() {\n      return !this.issuer;\n    }\n\n    /**\n     * @param {Asset} asset Asset to compare\n     * @returns {boolean} true if this asset equals the given asset.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(asset) {\n      return this.code === asset.getCode() && this.issuer === asset.getIssuer();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.isNative()) {\n        return 'native';\n      }\n      return \"\".concat(this.getCode(), \":\").concat(this.getIssuer());\n    }\n\n    /**\n     * Compares two assets according to the criteria:\n     *\n     *  1. First compare the type (native < alphanum4 < alphanum12).\n     *  2. If the types are equal, compare the assets codes.\n     *  3. If the asset codes are equal, compare the issuers.\n     *\n     * @param   {Asset} assetA - the first asset\n     * @param   {Asset} assetB - the second asset\n     * @returns {number} `-1` if assetA < assetB, `0` if assetA == assetB, `1` if assetA > assetB.\n     *\n     * @static\n     * @memberof Asset\n     */\n  }], [{\n    key: \"native\",\n    value: function _native() {\n      return new Asset('XLM');\n    }\n\n    /**\n     * Returns an asset object from its XDR object representation.\n     * @param {xdr.Asset} assetXdr - The asset xdr object.\n     * @returns {Asset}\n     */\n  }, {\n    key: \"fromOperation\",\n    value: function fromOperation(assetXdr) {\n      var anum;\n      var code;\n      var issuer;\n      switch (assetXdr[\"switch\"]()) {\n        case _xdr[\"default\"].AssetType.assetTypeNative():\n          return this[\"native\"]();\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum4():\n          anum = assetXdr.alphaNum4();\n        /* falls through */\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum12():\n          anum = anum || assetXdr.alphaNum12();\n          issuer = _strkey.StrKey.encodeEd25519PublicKey(anum.issuer().ed25519());\n          code = (0, _util.trimEnd)(anum.assetCode(), '\\0');\n          return new this(code, issuer);\n        default:\n          throw new Error(\"Invalid asset type: \".concat(assetXdr[\"switch\"]().name));\n      }\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(assetA, assetB) {\n      if (!assetA || !(assetA instanceof Asset)) {\n        throw new Error('assetA is invalid');\n      }\n      if (!assetB || !(assetB instanceof Asset)) {\n        throw new Error('assetB is invalid');\n      }\n      if (assetA.equals(assetB)) {\n        return 0;\n      }\n\n      // Compare asset types.\n      var xdrAtype = assetA.getRawAssetType().value;\n      var xdrBtype = assetB.getRawAssetType().value;\n      if (xdrAtype !== xdrBtype) {\n        return xdrAtype < xdrBtype ? -1 : 1;\n      }\n\n      // Compare asset codes.\n      var result = asciiCompare(assetA.getCode(), assetB.getCode());\n      if (result !== 0) {\n        return result;\n      }\n\n      // Compare asset issuers.\n      return asciiCompare(assetA.getIssuer(), assetB.getIssuer());\n    }\n  }]);\n}();\n/**\n * Compares two ASCII strings in lexographic order with uppercase precedence.\n *\n * @param   {string} a - the first string to compare\n * @param   {string} b - the second\n * @returns {number} like all `compare()`s:\n *     -1 if `a < b`, 0 if `a == b`, and 1 if `a > b`\n *\n * @warning No type-checks are done on the parameters\n */\nfunction asciiCompare(a, b) {\n  return Buffer.compare(Buffer.from(a, 'ascii'), Buffer.from(b, 'ascii'));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9hc3NldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixhQUFhO0FBQ2IsWUFBWSxtQkFBTyxDQUFDLGdJQUFhO0FBQ2pDLGtDQUFrQyxtQkFBTyxDQUFDLG9IQUFPO0FBQ2pELGVBQWUsbUJBQU8sQ0FBQyw0SEFBVztBQUNsQyxjQUFjLG1CQUFPLENBQUMsMEhBQVU7QUFDaEMsZUFBZSxtQkFBTyxDQUFDLDRIQUFXO0FBQ2xDLHFDQUFxQyxpQ0FBaUM7QUFDdEUsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQSx1QkFBdUIsS0FBSztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFdBQVc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixvQkFBb0I7QUFDckM7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFdBQVc7QUFDMUI7QUFDQSw4QkFBOEIsZ0JBQWdCO0FBQzlDO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLGtDQUFrQztBQUNqRCxpQkFBaUIsdURBQXVEO0FBQ3hFO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEIsaUJBQWlCLE9BQU87QUFDeEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsV0FBVztBQUMxQixpQkFBaUI7QUFDakI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvYXNzZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFzc2V0ID0gdm9pZCAwO1xudmFyIF91dGlsID0gcmVxdWlyZShcIi4vdXRpbC91dGlsXCIpO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3hkclwiKSk7XG52YXIgX2tleXBhaXIgPSByZXF1aXJlKFwiLi9rZXlwYWlyXCIpO1xudmFyIF9zdHJrZXkgPSByZXF1aXJlKFwiLi9zdHJrZXlcIik7XG52YXIgX2hhc2hpbmcgPSByZXF1aXJlKFwiLi9oYXNoaW5nXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQXNzZXQgY2xhc3MgcmVwcmVzZW50cyBhbiBhc3NldCwgZWl0aGVyIHRoZSBuYXRpdmUgYXNzZXQgKGBYTE1gKVxuICogb3IgYW4gYXNzZXQgY29kZSAvIGlzc3VlciBhY2NvdW50IElEIHBhaXIuXG4gKlxuICogQW4gYXNzZXQgY29kZSBkZXNjcmliZXMgYW4gYXNzZXQgY29kZSBhbmQgaXNzdWVyIHBhaXIuIEluIHRoZSBjYXNlIG9mIHRoZSBuYXRpdmVcbiAqIGFzc2V0IFhMTSwgdGhlIGlzc3VlciB3aWxsIGJlIG51bGwuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gY29kZSAtIFRoZSBhc3NldCBjb2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IGlzc3VlciAtIFRoZSBhY2NvdW50IElEIG9mIHRoZSBpc3N1ZXIuXG4gKi9cbnZhciBBc3NldCA9IGV4cG9ydHMuQXNzZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBc3NldChjb2RlLCBpc3N1ZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXNzZXQpO1xuICAgIGlmICghL15bYS16QS1aMC05XXsxLDEyfSQvLnRlc3QoY29kZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXNzZXQgY29kZSBpcyBpbnZhbGlkIChtYXhpbXVtIGFscGhhbnVtZXJpYywgMTIgY2hhcmFjdGVycyBhdCBtYXgpJyk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcoY29kZSkudG9Mb3dlckNhc2UoKSAhPT0gJ3hsbScgJiYgIWlzc3Vlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJc3N1ZXIgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgaWYgKGlzc3VlciAmJiAhX3N0cmtleS5TdHJLZXkuaXNWYWxpZEVkMjU1MTlQdWJsaWNLZXkoaXNzdWVyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJc3N1ZXIgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKGNvZGUpLnRvTG93ZXJDYXNlKCkgPT09ICd4bG0nKSB7XG4gICAgICAvLyB0cmFuc2Zvcm0gYWxsIHhMTSwgWGxtLCBldGMuIHZhcmlhbnRzIC0+IFhMTVxuICAgICAgdGhpcy5jb2RlID0gJ1hMTSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgfVxuICAgIHRoaXMuaXNzdWVyID0gaXNzdWVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXNzZXQgb2JqZWN0IGZvciB0aGUgbmF0aXZlIGFzc2V0LlxuICAgKiBAUmV0dXJuIHtBc3NldH1cbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQXNzZXQsIFt7XG4gICAga2V5OiBcInRvWERST2JqZWN0XCIsXG4gICAgdmFsdWU6XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgeGRyLkFzc2V0IG9iamVjdCBmb3IgdGhpcyBhc3NldC5cbiAgICAgKiBAcmV0dXJucyB7eGRyLkFzc2V0fSBYRFIgYXNzZXQgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9YRFJPYmplY3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdG9YRFJPYmplY3QoX3hkcltcImRlZmF1bHRcIl0uQXNzZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHhkci5DaGFuZ2VUcnVzdEFzc2V0IG9iamVjdCBmb3IgdGhpcyBhc3NldC5cbiAgICAgKiBAcmV0dXJucyB7eGRyLkNoYW5nZVRydXN0QXNzZXR9IFhEUiBhc3NldCBvYmplY3RcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ0b0NoYW5nZVRydXN0WERST2JqZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvQ2hhbmdlVHJ1c3RYRFJPYmplY3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdG9YRFJPYmplY3QoX3hkcltcImRlZmF1bHRcIl0uQ2hhbmdlVHJ1c3RBc3NldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgeGRyLlRydXN0TGluZUFzc2V0IG9iamVjdCBmb3IgdGhpcyBhc3NldC5cbiAgICAgKiBAcmV0dXJucyB7eGRyLlRydXN0TGluZUFzc2V0fSBYRFIgYXNzZXQgb2JqZWN0XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidG9UcnVzdExpbmVYRFJPYmplY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9UcnVzdExpbmVYRFJPYmplY3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdG9YRFJPYmplY3QoX3hkcltcImRlZmF1bHRcIl0uVHJ1c3RMaW5lQXNzZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHdvdWxkLWJlIGNvbnRyYWN0IElEIChgQy4uLmAgZm9ybWF0KSBmb3IgdGhpcyBhc3NldCBvbiBhIGdpdmVuXG4gICAgICogbmV0d29yay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgICBuZXR3b3JrUGFzc3BocmFzZSAgIGluZGljYXRlcyB3aGljaCBuZXR3b3JrIHRoZSBjb250cmFjdFxuICAgICAqICAgIElEIHNob3VsZCByZWZlciB0bywgc2luY2UgZXZlcnkgbmV0d29yayB3aWxsIGhhdmUgYSB1bmlxdWUgSUQgZm9yIHRoZVxuICAgICAqICAgIHNhbWUgY29udHJhY3QgKHNlZSB7QGxpbmsgTmV0d29ya3N9IGZvciBvcHRpb25zKVxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gIHRoZSBzdHJrZXktZW5jb2RlZCAoYEMuLi5gKSBjb250cmFjdCBJRCBmb3IgdGhpcyBhc3NldFxuICAgICAqXG4gICAgICogQHdhcm5pbmcgVGhpcyBtYWtlcyBubyBndWFyYW50ZWUgdGhhdCB0aGlzIGNvbnRyYWN0IGFjdHVhbGx5ICpleGlzdHMqLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImNvbnRyYWN0SWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udHJhY3RJZChuZXR3b3JrUGFzc3BocmFzZSkge1xuICAgICAgdmFyIG5ldHdvcmtJZCA9ICgwLCBfaGFzaGluZy5oYXNoKShCdWZmZXIuZnJvbShuZXR3b3JrUGFzc3BocmFzZSkpO1xuICAgICAgdmFyIHByZWltYWdlID0gX3hkcltcImRlZmF1bHRcIl0uSGFzaElkUHJlaW1hZ2UuZW52ZWxvcGVUeXBlQ29udHJhY3RJZChuZXcgX3hkcltcImRlZmF1bHRcIl0uSGFzaElkUHJlaW1hZ2VDb250cmFjdElkKHtcbiAgICAgICAgbmV0d29ya0lkOiBuZXR3b3JrSWQsXG4gICAgICAgIGNvbnRyYWN0SWRQcmVpbWFnZTogX3hkcltcImRlZmF1bHRcIl0uQ29udHJhY3RJZFByZWltYWdlLmNvbnRyYWN0SWRQcmVpbWFnZUZyb21Bc3NldCh0aGlzLnRvWERST2JqZWN0KCkpXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gX3N0cmtleS5TdHJLZXkuZW5jb2RlQ29udHJhY3QoKDAsIF9oYXNoaW5nLmhhc2gpKHByZWltYWdlLnRvWERSKCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB4ZHIgb2JqZWN0IGZvciB0aGlzIGFzc2V0LlxuICAgICAqIEBwYXJhbSB7eGRyLkFzc2V0IHwgeGRyLkNoYW5nZVRydXN0QXNzZXR9IHhkckFzc2V0IC0gVGhlIGFzc2V0IHhkciBvYmplY3QuXG4gICAgICogQHJldHVybnMge3hkci5Bc3NldCB8IHhkci5DaGFuZ2VUcnVzdEFzc2V0IHwgeGRyLlRydXN0TGluZUFzc2V0fSBYRFIgQXNzZXQgb2JqZWN0XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX3RvWERST2JqZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF90b1hEUk9iamVjdCgpIHtcbiAgICAgIHZhciB4ZHJBc3NldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX3hkcltcImRlZmF1bHRcIl0uQXNzZXQ7XG4gICAgICBpZiAodGhpcy5pc05hdGl2ZSgpKSB7XG4gICAgICAgIHJldHVybiB4ZHJBc3NldC5hc3NldFR5cGVOYXRpdmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciB4ZHJUeXBlO1xuICAgICAgdmFyIHhkclR5cGVTdHJpbmc7XG4gICAgICBpZiAodGhpcy5jb2RlLmxlbmd0aCA8PSA0KSB7XG4gICAgICAgIHhkclR5cGUgPSBfeGRyW1wiZGVmYXVsdFwiXS5BbHBoYU51bTQ7XG4gICAgICAgIHhkclR5cGVTdHJpbmcgPSAnYXNzZXRUeXBlQ3JlZGl0QWxwaGFudW00JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhkclR5cGUgPSBfeGRyW1wiZGVmYXVsdFwiXS5BbHBoYU51bTEyO1xuICAgICAgICB4ZHJUeXBlU3RyaW5nID0gJ2Fzc2V0VHlwZUNyZWRpdEFscGhhbnVtMTInO1xuICAgICAgfVxuXG4gICAgICAvLyBwYWQgY29kZSB3aXRoIG51bGwgYnl0ZXMgaWYgbmVjZXNzYXJ5XG4gICAgICB2YXIgcGFkTGVuZ3RoID0gdGhpcy5jb2RlLmxlbmd0aCA8PSA0ID8gNCA6IDEyO1xuICAgICAgdmFyIHBhZGRlZENvZGUgPSB0aGlzLmNvZGUucGFkRW5kKHBhZExlbmd0aCwgJ1xcMCcpO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgdmFyIGFzc2V0VHlwZSA9IG5ldyB4ZHJUeXBlKHtcbiAgICAgICAgYXNzZXRDb2RlOiBwYWRkZWRDb2RlLFxuICAgICAgICBpc3N1ZXI6IF9rZXlwYWlyLktleXBhaXIuZnJvbVB1YmxpY0tleSh0aGlzLmlzc3VlcikueGRyQWNjb3VudElkKClcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyB4ZHJBc3NldCh4ZHJUeXBlU3RyaW5nLCBhc3NldFR5cGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEFzc2V0IGNvZGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvZGUoKSB7XG4gICAgICBpZiAodGhpcy5jb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBTdHJpbmcodGhpcy5jb2RlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBc3NldCBpc3N1ZXJcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRJc3N1ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SXNzdWVyKCkge1xuICAgICAgaWYgKHRoaXMuaXNzdWVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBTdHJpbmcodGhpcy5pc3N1ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzZWUgW0Fzc2V0cyBjb25jZXB0XShodHRwczovL2RldmVsb3BlcnMuc3RlbGxhci5vcmcvZG9jcy9nbG9zc2FyeS9hc3NldHMvKVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEFzc2V0IHR5cGUuIENhbiBiZSBvbmUgb2YgZm9sbG93aW5nIHR5cGVzOlxuICAgICAqXG4gICAgICogIC0gYG5hdGl2ZWAsXG4gICAgICogIC0gYGNyZWRpdF9hbHBoYW51bTRgLFxuICAgICAqICAtIGBjcmVkaXRfYWxwaGFudW0xMmAsIG9yXG4gICAgICogIC0gYHVua25vd25gIGFzIHRoZSBlcnJvciBjYXNlICh3aGljaCBzaG91bGQgbmV2ZXIgb2NjdXIpXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0QXNzZXRUeXBlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFzc2V0VHlwZSgpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5nZXRSYXdBc3NldFR5cGUoKS52YWx1ZSkge1xuICAgICAgICBjYXNlIF94ZHJbXCJkZWZhdWx0XCJdLkFzc2V0VHlwZS5hc3NldFR5cGVOYXRpdmUoKS52YWx1ZTpcbiAgICAgICAgICByZXR1cm4gJ25hdGl2ZSc7XG4gICAgICAgIGNhc2UgX3hkcltcImRlZmF1bHRcIl0uQXNzZXRUeXBlLmFzc2V0VHlwZUNyZWRpdEFscGhhbnVtNCgpLnZhbHVlOlxuICAgICAgICAgIHJldHVybiAnY3JlZGl0X2FscGhhbnVtNCc7XG4gICAgICAgIGNhc2UgX3hkcltcImRlZmF1bHRcIl0uQXNzZXRUeXBlLmFzc2V0VHlwZUNyZWRpdEFscGhhbnVtMTIoKS52YWx1ZTpcbiAgICAgICAgICByZXR1cm4gJ2NyZWRpdF9hbHBoYW51bTEyJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gJ3Vua25vd24nO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHt4ZHIuQXNzZXRUeXBlfSAgdGhlIHJhdyBYRFIgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFzc2V0IHR5cGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRSYXdBc3NldFR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmF3QXNzZXRUeXBlKCkge1xuICAgICAgaWYgKHRoaXMuaXNOYXRpdmUoKSkge1xuICAgICAgICByZXR1cm4gX3hkcltcImRlZmF1bHRcIl0uQXNzZXRUeXBlLmFzc2V0VHlwZU5hdGl2ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY29kZS5sZW5ndGggPD0gNCkge1xuICAgICAgICByZXR1cm4gX3hkcltcImRlZmF1bHRcIl0uQXNzZXRUeXBlLmFzc2V0VHlwZUNyZWRpdEFscGhhbnVtNCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF94ZHJbXCJkZWZhdWx0XCJdLkFzc2V0VHlwZS5hc3NldFR5cGVDcmVkaXRBbHBoYW51bTEyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59ICB0cnVlIGlmIHRoaXMgYXNzZXQgb2JqZWN0IGlzIHRoZSBuYXRpdmUgYXNzZXQuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNOYXRpdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNOYXRpdmUoKSB7XG4gICAgICByZXR1cm4gIXRoaXMuaXNzdWVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QXNzZXR9IGFzc2V0IEFzc2V0IHRvIGNvbXBhcmVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGlzIGFzc2V0IGVxdWFscyB0aGUgZ2l2ZW4gYXNzZXQuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZXF1YWxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVxdWFscyhhc3NldCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29kZSA9PT0gYXNzZXQuZ2V0Q29kZSgpICYmIHRoaXMuaXNzdWVyID09PSBhc3NldC5nZXRJc3N1ZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9TdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICBpZiAodGhpcy5pc05hdGl2ZSgpKSB7XG4gICAgICAgIHJldHVybiAnbmF0aXZlJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0aGlzLmdldENvZGUoKSwgXCI6XCIpLmNvbmNhdCh0aGlzLmdldElzc3VlcigpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0d28gYXNzZXRzIGFjY29yZGluZyB0byB0aGUgY3JpdGVyaWE6XG4gICAgICpcbiAgICAgKiAgMS4gRmlyc3QgY29tcGFyZSB0aGUgdHlwZSAobmF0aXZlIDwgYWxwaGFudW00IDwgYWxwaGFudW0xMikuXG4gICAgICogIDIuIElmIHRoZSB0eXBlcyBhcmUgZXF1YWwsIGNvbXBhcmUgdGhlIGFzc2V0cyBjb2Rlcy5cbiAgICAgKiAgMy4gSWYgdGhlIGFzc2V0IGNvZGVzIGFyZSBlcXVhbCwgY29tcGFyZSB0aGUgaXNzdWVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtBc3NldH0gYXNzZXRBIC0gdGhlIGZpcnN0IGFzc2V0XG4gICAgICogQHBhcmFtICAge0Fzc2V0fSBhc3NldEIgLSB0aGUgc2Vjb25kIGFzc2V0XG4gICAgICogQHJldHVybnMge251bWJlcn0gYC0xYCBpZiBhc3NldEEgPCBhc3NldEIsIGAwYCBpZiBhc3NldEEgPT0gYXNzZXRCLCBgMWAgaWYgYXNzZXRBID4gYXNzZXRCLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJvZiBBc3NldFxuICAgICAqL1xuICB9XSwgW3tcbiAgICBrZXk6IFwibmF0aXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9uYXRpdmUoKSB7XG4gICAgICByZXR1cm4gbmV3IEFzc2V0KCdYTE0nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFzc2V0IG9iamVjdCBmcm9tIGl0cyBYRFIgb2JqZWN0IHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEBwYXJhbSB7eGRyLkFzc2V0fSBhc3NldFhkciAtIFRoZSBhc3NldCB4ZHIgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtBc3NldH1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJmcm9tT3BlcmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21PcGVyYXRpb24oYXNzZXRYZHIpIHtcbiAgICAgIHZhciBhbnVtO1xuICAgICAgdmFyIGNvZGU7XG4gICAgICB2YXIgaXNzdWVyO1xuICAgICAgc3dpdGNoIChhc3NldFhkcltcInN3aXRjaFwiXSgpKSB7XG4gICAgICAgIGNhc2UgX3hkcltcImRlZmF1bHRcIl0uQXNzZXRUeXBlLmFzc2V0VHlwZU5hdGl2ZSgpOlxuICAgICAgICAgIHJldHVybiB0aGlzW1wibmF0aXZlXCJdKCk7XG4gICAgICAgIGNhc2UgX3hkcltcImRlZmF1bHRcIl0uQXNzZXRUeXBlLmFzc2V0VHlwZUNyZWRpdEFscGhhbnVtNCgpOlxuICAgICAgICAgIGFudW0gPSBhc3NldFhkci5hbHBoYU51bTQoKTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIF94ZHJbXCJkZWZhdWx0XCJdLkFzc2V0VHlwZS5hc3NldFR5cGVDcmVkaXRBbHBoYW51bTEyKCk6XG4gICAgICAgICAgYW51bSA9IGFudW0gfHwgYXNzZXRYZHIuYWxwaGFOdW0xMigpO1xuICAgICAgICAgIGlzc3VlciA9IF9zdHJrZXkuU3RyS2V5LmVuY29kZUVkMjU1MTlQdWJsaWNLZXkoYW51bS5pc3N1ZXIoKS5lZDI1NTE5KCkpO1xuICAgICAgICAgIGNvZGUgPSAoMCwgX3V0aWwudHJpbUVuZCkoYW51bS5hc3NldENvZGUoKSwgJ1xcMCcpO1xuICAgICAgICAgIHJldHVybiBuZXcgdGhpcyhjb2RlLCBpc3N1ZXIpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXNzZXQgdHlwZTogXCIuY29uY2F0KGFzc2V0WGRyW1wic3dpdGNoXCJdKCkubmFtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wYXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBhcmUoYXNzZXRBLCBhc3NldEIpIHtcbiAgICAgIGlmICghYXNzZXRBIHx8ICEoYXNzZXRBIGluc3RhbmNlb2YgQXNzZXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzZXRBIGlzIGludmFsaWQnKTtcbiAgICAgIH1cbiAgICAgIGlmICghYXNzZXRCIHx8ICEoYXNzZXRCIGluc3RhbmNlb2YgQXNzZXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzZXRCIGlzIGludmFsaWQnKTtcbiAgICAgIH1cbiAgICAgIGlmIChhc3NldEEuZXF1YWxzKGFzc2V0QikpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIC8vIENvbXBhcmUgYXNzZXQgdHlwZXMuXG4gICAgICB2YXIgeGRyQXR5cGUgPSBhc3NldEEuZ2V0UmF3QXNzZXRUeXBlKCkudmFsdWU7XG4gICAgICB2YXIgeGRyQnR5cGUgPSBhc3NldEIuZ2V0UmF3QXNzZXRUeXBlKCkudmFsdWU7XG4gICAgICBpZiAoeGRyQXR5cGUgIT09IHhkckJ0eXBlKSB7XG4gICAgICAgIHJldHVybiB4ZHJBdHlwZSA8IHhkckJ0eXBlID8gLTEgOiAxO1xuICAgICAgfVxuXG4gICAgICAvLyBDb21wYXJlIGFzc2V0IGNvZGVzLlxuICAgICAgdmFyIHJlc3VsdCA9IGFzY2lpQ29tcGFyZShhc3NldEEuZ2V0Q29kZSgpLCBhc3NldEIuZ2V0Q29kZSgpKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgLy8gQ29tcGFyZSBhc3NldCBpc3N1ZXJzLlxuICAgICAgcmV0dXJuIGFzY2lpQ29tcGFyZShhc3NldEEuZ2V0SXNzdWVyKCksIGFzc2V0Qi5nZXRJc3N1ZXIoKSk7XG4gICAgfVxuICB9XSk7XG59KCk7XG4vKipcbiAqIENvbXBhcmVzIHR3byBBU0NJSSBzdHJpbmdzIGluIGxleG9ncmFwaGljIG9yZGVyIHdpdGggdXBwZXJjYXNlIHByZWNlZGVuY2UuXG4gKlxuICogQHBhcmFtICAge3N0cmluZ30gYSAtIHRoZSBmaXJzdCBzdHJpbmcgdG8gY29tcGFyZVxuICogQHBhcmFtICAge3N0cmluZ30gYiAtIHRoZSBzZWNvbmRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGxpa2UgYWxsIGBjb21wYXJlKClgczpcbiAqICAgICAtMSBpZiBgYSA8IGJgLCAwIGlmIGBhID09IGJgLCBhbmQgMSBpZiBgYSA+IGJgXG4gKlxuICogQHdhcm5pbmcgTm8gdHlwZS1jaGVja3MgYXJlIGRvbmUgb24gdGhlIHBhcmFtZXRlcnNcbiAqL1xuZnVuY3Rpb24gYXNjaWlDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKEJ1ZmZlci5mcm9tKGEsICdhc2NpaScpLCBCdWZmZXIuZnJvbShiLCAnYXNjaWknKSk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/auth.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/auth.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.authorizeEntry = authorizeEntry;\nexports.authorizeInvocation = authorizeInvocation;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _network = __webpack_require__(/*! ./network */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/network.js\");\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/address.js\");\nvar _scval = __webpack_require__(/*! ./scval */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/scval.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * @async\n * @callback SigningCallback A callback for signing an XDR structure\n * representing all of the details necessary to authorize an invocation tree.\n *\n * @param {xdr.HashIdPreimage} preimage   the entire authorization envelope\n *    whose hash you should sign, so that you can inspect the entire structure\n *    if necessary (rather than blindly signing a hash)\n *\n * @returns {\n *    Promise<Uint8Array> |\n *    Promise<{signature: Uint8Array, publicKey: string}\n * }  the signature of the raw payload (which is the sha256 hash of the preimage\n *    bytes, so `hash(preimage.toXDR())`) either naked, implying it is signed\n *    by the key corresponding to the public key in the entry you pass to\n *    {@link authorizeEntry} (decipherable from its\n *    `credentials().address().address()`), or alongside an explicit `publicKey`.\n */\n/**\n * Actually authorizes an existing authorization entry using the given the\n * credentials and expiration details, returning a signed copy.\n *\n * This \"fills out\" the authorization entry with a signature, indicating to the\n * {@link Operation.invokeHostFunction} its attached to that:\n *   - a particular identity (i.e. signing {@link Keypair} or other signer)\n *   - approving the execution of an invocation tree (i.e. a simulation-acquired\n *     {@link xdr.SorobanAuthorizedInvocation} or otherwise built)\n *   - on a particular network (uniquely identified by its passphrase, see\n *     {@link Networks})\n *   - until a particular ledger sequence is reached.\n *\n * This one lets you pass a either a {@link Keypair} (or, more accurately,\n * anything with a `sign(Buffer): Buffer` method) or a callback function (see\n * {@link SigningCallback}) to handle signing the envelope hash.\n *\n * @param {xdr.SorobanAuthorizationEntry} entry   an unsigned authorization entr\n * @param {Keypair | SigningCallback} signer  either a {@link Keypair} instance\n *    or a function which takes a {@link xdr.HashIdPreimageSorobanAuthorization}\n *    input payload and returns EITHER\n *\n *      (a) an object containing a `signature` of the hash of the raw payload bytes\n *          as a Buffer-like and a `publicKey` string representing who just\n *          created this signature, or\n *      (b) just the naked signature of the hash of the raw payload bytes (where\n *          the signing key is implied to be the address in the `entry`).\n *\n *    The latter option (b) is JUST for backwards compatibility and will be\n *    removed in the future.\n * @param {number} validUntilLedgerSeq   the (exclusive) future ledger sequence\n *    number until which this authorization entry should be valid (if\n *    `currentLedgerSeq==validUntil`, this is expired))\n * @param {string} [networkPassphrase]  the network passphrase is incorprated\n *    into the signature (see {@link Networks} for options)\n *\n * @returns {Promise<xdr.SorobanAuthorizationEntry>} a promise for an\n *    authorization entry that you can pass along to\n *    {@link Operation.invokeHostFunction}\n *\n * @note If using the `SigningCallback` variation, the signer is assumed to be\n *    the entry's credential address unless you use the variant that returns\n *    the object.\n *\n * @see authorizeInvocation\n * @example\n * import {\n *   SorobanRpc,\n *   Transaction,\n *   Networks,\n *   authorizeEntry\n * } from '@stellar/stellar-sdk';\n *\n * // Assume signPayloadCallback is a well-formed signing callback.\n * //\n * // It might, for example, pop up a modal from a browser extension, send the\n * // transaction to a third-party service for signing, or just do simple\n * // signing via Keypair like it does here:\n * function signPayloadCallback(payload) {\n *    return signer.sign(hash(payload.toXDR());\n * }\n *\n * function multiPartyAuth(\n *    server: SorobanRpc.Server,\n *    // assume this involves multi-party auth\n *    tx: Transaction,\n * ) {\n *    return server\n *      .simulateTransaction(tx)\n *      .then((simResult) => {\n *          tx.operations[0].auth.map(entry =>\n *            authorizeEntry(\n *              entry,\n *              signPayloadCallback,\n *              currentLedger + 1000,\n *              Networks.TESTNET);\n *          ));\n *\n *          return server.prepareTransaction(tx, simResult);\n *      })\n *      .then((preppedTx) => {\n *        preppedTx.sign(source);\n *        return server.sendTransaction(preppedTx);\n *      });\n * }\n */\nfunction authorizeEntry(_x, _x2, _x3) {\n  return _authorizeEntry.apply(this, arguments);\n}\n/**\n * This builds an entry from scratch, allowing you to express authorization as a\n * function of:\n *   - a particular identity (i.e. signing {@link Keypair} or other signer)\n *   - approving the execution of an invocation tree (i.e. a simulation-acquired\n *     {@link xdr.SorobanAuthorizedInvocation} or otherwise built)\n *   - on a particular network (uniquely identified by its passphrase, see\n *     {@link Networks})\n *   - until a particular ledger sequence is reached.\n *\n * This is in contrast to {@link authorizeEntry}, which signs an existing entry.\n *\n * @param {Keypair | SigningCallback} signer  either a {@link Keypair} instance\n *    (or anything with a `.sign(buf): Buffer-like` method) or a function which\n *    takes a payload (a {@link xdr.HashIdPreimageSorobanAuthorization}\n *    instance) input and returns the signature of the hash of the raw payload\n *    bytes (where the signing key should correspond to the address in the\n *    `entry`)\n * @param {number}  validUntilLedgerSeq  the (exclusive) future ledger sequence\n *    number until which this authorization entry should be valid (if\n *    `currentLedgerSeq==validUntilLedgerSeq`, this is expired))\n * @param {xdr.SorobanAuthorizedInvocation} invocation the invocation tree that\n *    we're authorizing (likely, this comes from transaction simulation)\n * @param {string}  [publicKey]   the public identity of the signer (when\n *    providing a {@link Keypair} to `signer`, this can be omitted, as it just\n *    uses {@link Keypair.publicKey})\n * @param {string}  [networkPassphrase]   the network passphrase is incorprated\n *    into the signature (see {@link Networks} for options, default:\n *    {@link Networks.FUTURENET})\n *\n * @returns {Promise<xdr.SorobanAuthorizationEntry>} a promise for an\n *    authorization entry that you can pass along to\n *    {@link Operation.invokeHostFunction}\n *\n * @see authorizeEntry\n */\nfunction _authorizeEntry() {\n  _authorizeEntry = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(entry, signer, validUntilLedgerSeq) {\n    var networkPassphrase,\n      clone,\n      addrAuth,\n      networkId,\n      preimage,\n      payload,\n      signature,\n      publicKey,\n      sigResult,\n      sigScVal,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          networkPassphrase = _args.length > 3 && _args[3] !== undefined ? _args[3] : _network.Networks.FUTURENET;\n          if (!(entry.credentials()[\"switch\"]().value !== _xdr[\"default\"].SorobanCredentialsType.sorobanCredentialsAddress().value)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", entry);\n        case 3:\n          clone = _xdr[\"default\"].SorobanAuthorizationEntry.fromXDR(entry.toXDR());\n          /** @type {xdr.SorobanAddressCredentials} */\n          addrAuth = clone.credentials().address();\n          addrAuth.signatureExpirationLedger(validUntilLedgerSeq);\n          networkId = (0, _hashing.hash)(Buffer.from(networkPassphrase));\n          preimage = _xdr[\"default\"].HashIdPreimage.envelopeTypeSorobanAuthorization(new _xdr[\"default\"].HashIdPreimageSorobanAuthorization({\n            networkId: networkId,\n            nonce: addrAuth.nonce(),\n            invocation: clone.rootInvocation(),\n            signatureExpirationLedger: addrAuth.signatureExpirationLedger()\n          }));\n          payload = (0, _hashing.hash)(preimage.toXDR());\n          if (!(typeof signer === 'function')) {\n            _context.next = 16;\n            break;\n          }\n          _context.next = 12;\n          return signer(preimage);\n        case 12:\n          sigResult = _context.sent;\n          if (sigResult !== null && sigResult !== void 0 && sigResult.signature) {\n            signature = Buffer.from(sigResult.signature);\n            publicKey = sigResult.publicKey;\n          } else {\n            // if using the deprecated form, assume it's for the entry\n            signature = Buffer.from(sigResult);\n            publicKey = _address.Address.fromScAddress(addrAuth.address()).toString();\n          }\n          _context.next = 18;\n          break;\n        case 16:\n          signature = Buffer.from(signer.sign(payload));\n          publicKey = signer.publicKey();\n        case 18:\n          if (_keypair.Keypair.fromPublicKey(publicKey).verify(payload, signature)) {\n            _context.next = 20;\n            break;\n          }\n          throw new Error(\"signature doesn't match payload\");\n        case 20:\n          // This structure is defined here:\n          // https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#stellar-account-signatures\n          //\n          // Encoding a contract structure as an ScVal means the map keys are supposed\n          // to be symbols, hence the forced typing here.\n          sigScVal = (0, _scval.nativeToScVal)({\n            public_key: _strkey.StrKey.decodeEd25519PublicKey(publicKey),\n            signature: signature\n          }, {\n            type: {\n              public_key: ['symbol', null],\n              signature: ['symbol', null]\n            }\n          });\n          addrAuth.signature(_xdr[\"default\"].ScVal.scvVec([sigScVal]));\n          return _context.abrupt(\"return\", clone);\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _authorizeEntry.apply(this, arguments);\n}\nfunction authorizeInvocation(signer, validUntilLedgerSeq, invocation) {\n  var publicKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var networkPassphrase = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _network.Networks.FUTURENET;\n  // We use keypairs as a source of randomness for the nonce to avoid mucking\n  // with any crypto dependencies. Note that this just has to be random and\n  // unique, not cryptographically secure, so it's fine.\n  var kp = _keypair.Keypair.random().rawPublicKey();\n  var nonce = new _xdr[\"default\"].Int64(bytesToInt64(kp));\n  var pk = publicKey || signer.publicKey();\n  if (!pk) {\n    throw new Error(\"authorizeInvocation requires publicKey parameter\");\n  }\n  var entry = new _xdr[\"default\"].SorobanAuthorizationEntry({\n    rootInvocation: invocation,\n    credentials: _xdr[\"default\"].SorobanCredentials.sorobanCredentialsAddress(new _xdr[\"default\"].SorobanAddressCredentials({\n      address: new _address.Address(pk).toScAddress(),\n      nonce: nonce,\n      signatureExpirationLedger: 0,\n      // replaced\n      signature: _xdr[\"default\"].ScVal.scvVec([]) // replaced\n    }))\n  });\n  return authorizeEntry(entry, signer, validUntilLedgerSeq, networkPassphrase);\n}\nfunction bytesToInt64(bytes) {\n  // eslint-disable-next-line no-bitwise\n  return bytes.subarray(0, 8).reduce(function (accum, b) {\n    return accum << 8 | b;\n  }, 0);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/auth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/claimant.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/claimant.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Claimant = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Claimant class represents an xdr.Claimant\n *\n * The claim predicate is optional, it defaults to unconditional if none is specified.\n *\n * @constructor\n * @param {string} destination - The destination account ID.\n * @param {xdr.ClaimPredicate} [predicate] - The claim predicate.\n */\nvar Claimant = exports.Claimant = /*#__PURE__*/function () {\n  function Claimant(destination, predicate) {\n    _classCallCheck(this, Claimant);\n    if (destination && !_strkey.StrKey.isValidEd25519PublicKey(destination)) {\n      throw new Error('Destination is invalid');\n    }\n    this._destination = destination;\n    if (!predicate) {\n      this._predicate = _xdr[\"default\"].ClaimPredicate.claimPredicateUnconditional();\n    } else if (predicate instanceof _xdr[\"default\"].ClaimPredicate) {\n      this._predicate = predicate;\n    } else {\n      throw new Error('Predicate should be an xdr.ClaimPredicate');\n    }\n  }\n\n  /**\n   * Returns an unconditional claim predicate\n   * @Return {xdr.ClaimPredicate}\n   */\n  return _createClass(Claimant, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the xdr object for this claimant.\n     * @returns {xdr.Claimant} XDR Claimant object\n     */\n    function toXDRObject() {\n      var claimant = new _xdr[\"default\"].ClaimantV0({\n        destination: _keypair.Keypair.fromPublicKey(this._destination).xdrAccountId(),\n        predicate: this._predicate\n      });\n      return _xdr[\"default\"].Claimant.claimantTypeV0(claimant);\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"destination\",\n    get: function get() {\n      return this._destination;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n\n    /**\n     * @type {xdr.ClaimPredicate}\n     * @readonly\n     */\n  }, {\n    key: \"predicate\",\n    get: function get() {\n      return this._predicate;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n  }], [{\n    key: \"predicateUnconditional\",\n    value: function predicateUnconditional() {\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateUnconditional();\n    }\n\n    /**\n     * Returns an `and` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateAnd\",\n    value: function predicateAnd(left, right) {\n      if (!(left instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateAnd([left, right]);\n    }\n\n    /**\n     * Returns an `or` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateOr\",\n    value: function predicateOr(left, right) {\n      if (!(left instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateOr([left, right]);\n    }\n\n    /**\n     * Returns a `not` claim predicate\n     * @param {xdr.ClaimPredicate} predicate an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateNot\",\n    value: function predicateNot(predicate) {\n      if (!(predicate instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateNot(predicate);\n    }\n\n    /**\n     * Returns a `BeforeAbsoluteTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation is less than this (absolute)\n     * Unix timestamp (expressed in seconds).\n     *\n     * @param {string} absBefore Unix epoch (in seconds) as a string\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateBeforeAbsoluteTime\",\n    value: function predicateBeforeAbsoluteTime(absBefore) {\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateBeforeAbsoluteTime(_xdr[\"default\"].Int64.fromString(absBefore));\n    }\n\n    /**\n     * Returns a `BeforeRelativeTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation plus this relative time delta\n     * (in seconds) is less than the current time.\n     *\n     * @param {strings} seconds seconds since closeTime of the ledger in which the ClaimableBalanceEntry was created (as string)\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateBeforeRelativeTime\",\n    value: function predicateBeforeRelativeTime(seconds) {\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateBeforeRelativeTime(_xdr[\"default\"].Int64.fromString(seconds));\n    }\n\n    /**\n     * Returns a claimant object from its XDR object representation.\n     * @param {xdr.Claimant} claimantXdr - The claimant xdr object.\n     * @returns {Claimant}\n     */\n  }, {\n    key: \"fromXDR\",\n    value: function fromXDR(claimantXdr) {\n      var value;\n      switch (claimantXdr[\"switch\"]()) {\n        case _xdr[\"default\"].ClaimantType.claimantTypeV0():\n          value = claimantXdr.v0();\n          return new this(_strkey.StrKey.encodeEd25519PublicKey(value.destination().ed25519()), value.predicate());\n        default:\n          throw new Error(\"Invalid claimant type: \".concat(claimantXdr[\"switch\"]().name));\n      }\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9jbGFpbWFudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQkFBZ0I7QUFDaEIsa0NBQWtDLG1CQUFPLENBQUMsb0hBQU87QUFDakQsZUFBZSxtQkFBTyxDQUFDLDRIQUFXO0FBQ2xDLGNBQWMsbUJBQU8sQ0FBQywwSEFBVTtBQUNoQyxxQ0FBcUMsaUNBQWlDO0FBQ3RFLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3UTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixjQUFjO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQyxlQUFlLG9CQUFvQjtBQUNuQyxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsb0JBQW9CO0FBQ25DLGVBQWUsb0JBQW9CO0FBQ25DLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkMsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixpQkFBaUI7QUFDakI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL2NsYWltYW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DbGFpbWFudCA9IHZvaWQgMDtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi94ZHJcIikpO1xudmFyIF9rZXlwYWlyID0gcmVxdWlyZShcIi4va2V5cGFpclwiKTtcbnZhciBfc3Rya2V5ID0gcmVxdWlyZShcIi4vc3Rya2V5XCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQ2xhaW1hbnQgY2xhc3MgcmVwcmVzZW50cyBhbiB4ZHIuQ2xhaW1hbnRcbiAqXG4gKiBUaGUgY2xhaW0gcHJlZGljYXRlIGlzIG9wdGlvbmFsLCBpdCBkZWZhdWx0cyB0byB1bmNvbmRpdGlvbmFsIGlmIG5vbmUgaXMgc3BlY2lmaWVkLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGRlc3RpbmF0aW9uIC0gVGhlIGRlc3RpbmF0aW9uIGFjY291bnQgSUQuXG4gKiBAcGFyYW0ge3hkci5DbGFpbVByZWRpY2F0ZX0gW3ByZWRpY2F0ZV0gLSBUaGUgY2xhaW0gcHJlZGljYXRlLlxuICovXG52YXIgQ2xhaW1hbnQgPSBleHBvcnRzLkNsYWltYW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2xhaW1hbnQoZGVzdGluYXRpb24sIHByZWRpY2F0ZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGFpbWFudCk7XG4gICAgaWYgKGRlc3RpbmF0aW9uICYmICFfc3Rya2V5LlN0cktleS5pc1ZhbGlkRWQyNTUxOVB1YmxpY0tleShkZXN0aW5hdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGVzdGluYXRpb24gaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICB0aGlzLl9kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgIGlmICghcHJlZGljYXRlKSB7XG4gICAgICB0aGlzLl9wcmVkaWNhdGUgPSBfeGRyW1wiZGVmYXVsdFwiXS5DbGFpbVByZWRpY2F0ZS5jbGFpbVByZWRpY2F0ZVVuY29uZGl0aW9uYWwoKTtcbiAgICB9IGVsc2UgaWYgKHByZWRpY2F0ZSBpbnN0YW5jZW9mIF94ZHJbXCJkZWZhdWx0XCJdLkNsYWltUHJlZGljYXRlKSB7XG4gICAgICB0aGlzLl9wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUHJlZGljYXRlIHNob3VsZCBiZSBhbiB4ZHIuQ2xhaW1QcmVkaWNhdGUnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiB1bmNvbmRpdGlvbmFsIGNsYWltIHByZWRpY2F0ZVxuICAgKiBAUmV0dXJuIHt4ZHIuQ2xhaW1QcmVkaWNhdGV9XG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENsYWltYW50LCBbe1xuICAgIGtleTogXCJ0b1hEUk9iamVjdFwiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHhkciBvYmplY3QgZm9yIHRoaXMgY2xhaW1hbnQuXG4gICAgICogQHJldHVybnMge3hkci5DbGFpbWFudH0gWERSIENsYWltYW50IG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvWERST2JqZWN0KCkge1xuICAgICAgdmFyIGNsYWltYW50ID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkNsYWltYW50VjAoe1xuICAgICAgICBkZXN0aW5hdGlvbjogX2tleXBhaXIuS2V5cGFpci5mcm9tUHVibGljS2V5KHRoaXMuX2Rlc3RpbmF0aW9uKS54ZHJBY2NvdW50SWQoKSxcbiAgICAgICAgcHJlZGljYXRlOiB0aGlzLl9wcmVkaWNhdGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF94ZHJbXCJkZWZhdWx0XCJdLkNsYWltYW50LmNsYWltYW50VHlwZVYwKGNsYWltYW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImRlc3RpbmF0aW9uXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVzdGluYXRpb247XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbGFpbWFudCBpcyBpbW11dGFibGUnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7eGRyLkNsYWltUHJlZGljYXRlfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInByZWRpY2F0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3ByZWRpY2F0ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsYWltYW50IGlzIGltbXV0YWJsZScpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcInByZWRpY2F0ZVVuY29uZGl0aW9uYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlZGljYXRlVW5jb25kaXRpb25hbCgpIHtcbiAgICAgIHJldHVybiBfeGRyW1wiZGVmYXVsdFwiXS5DbGFpbVByZWRpY2F0ZS5jbGFpbVByZWRpY2F0ZVVuY29uZGl0aW9uYWwoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGBhbmRgIGNsYWltIHByZWRpY2F0ZVxuICAgICAqIEBwYXJhbSB7eGRyLkNsYWltUHJlZGljYXRlfSBsZWZ0IGFuIHhkci5DbGFpbVByZWRpY2F0ZVxuICAgICAqIEBwYXJhbSB7eGRyLkNsYWltUHJlZGljYXRlfSByaWdodCBhbiB4ZHIuQ2xhaW1QcmVkaWNhdGVcbiAgICAgKiBAUmV0dXJuIHt4ZHIuQ2xhaW1QcmVkaWNhdGV9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwicHJlZGljYXRlQW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZWRpY2F0ZUFuZChsZWZ0LCByaWdodCkge1xuICAgICAgaWYgKCEobGVmdCBpbnN0YW5jZW9mIF94ZHJbXCJkZWZhdWx0XCJdLkNsYWltUHJlZGljYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xlZnQgUHJlZGljYXRlIHNob3VsZCBiZSBhbiB4ZHIuQ2xhaW1QcmVkaWNhdGUnKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJpZ2h0IGluc3RhbmNlb2YgX3hkcltcImRlZmF1bHRcIl0uQ2xhaW1QcmVkaWNhdGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmlnaHQgUHJlZGljYXRlIHNob3VsZCBiZSBhbiB4ZHIuQ2xhaW1QcmVkaWNhdGUnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfeGRyW1wiZGVmYXVsdFwiXS5DbGFpbVByZWRpY2F0ZS5jbGFpbVByZWRpY2F0ZUFuZChbbGVmdCwgcmlnaHRdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGBvcmAgY2xhaW0gcHJlZGljYXRlXG4gICAgICogQHBhcmFtIHt4ZHIuQ2xhaW1QcmVkaWNhdGV9IGxlZnQgYW4geGRyLkNsYWltUHJlZGljYXRlXG4gICAgICogQHBhcmFtIHt4ZHIuQ2xhaW1QcmVkaWNhdGV9IHJpZ2h0IGFuIHhkci5DbGFpbVByZWRpY2F0ZVxuICAgICAqIEBSZXR1cm4ge3hkci5DbGFpbVByZWRpY2F0ZX1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJwcmVkaWNhdGVPclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVkaWNhdGVPcihsZWZ0LCByaWdodCkge1xuICAgICAgaWYgKCEobGVmdCBpbnN0YW5jZW9mIF94ZHJbXCJkZWZhdWx0XCJdLkNsYWltUHJlZGljYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xlZnQgUHJlZGljYXRlIHNob3VsZCBiZSBhbiB4ZHIuQ2xhaW1QcmVkaWNhdGUnKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJpZ2h0IGluc3RhbmNlb2YgX3hkcltcImRlZmF1bHRcIl0uQ2xhaW1QcmVkaWNhdGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmlnaHQgUHJlZGljYXRlIHNob3VsZCBiZSBhbiB4ZHIuQ2xhaW1QcmVkaWNhdGUnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfeGRyW1wiZGVmYXVsdFwiXS5DbGFpbVByZWRpY2F0ZS5jbGFpbVByZWRpY2F0ZU9yKFtsZWZ0LCByaWdodF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBgbm90YCBjbGFpbSBwcmVkaWNhdGVcbiAgICAgKiBAcGFyYW0ge3hkci5DbGFpbVByZWRpY2F0ZX0gcHJlZGljYXRlIGFuIHhkci5DbGFpbVByZWRpY2F0ZVxuICAgICAqIEBSZXR1cm4ge3hkci5DbGFpbVByZWRpY2F0ZX1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJwcmVkaWNhdGVOb3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlZGljYXRlTm90KHByZWRpY2F0ZSkge1xuICAgICAgaWYgKCEocHJlZGljYXRlIGluc3RhbmNlb2YgX3hkcltcImRlZmF1bHRcIl0uQ2xhaW1QcmVkaWNhdGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmlnaHQgUHJlZGljYXRlIHNob3VsZCBiZSBhbiB4ZHIuQ2xhaW1QcmVkaWNhdGUnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfeGRyW1wiZGVmYXVsdFwiXS5DbGFpbVByZWRpY2F0ZS5jbGFpbVByZWRpY2F0ZU5vdChwcmVkaWNhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBgQmVmb3JlQWJzb2x1dGVUaW1lYCBjbGFpbSBwcmVkaWNhdGVcbiAgICAgKlxuICAgICAqIFRoaXMgcHJlZGljYXRlIHdpbGwgYmUgZnVsZmlsbGVkIGlmIHRoZSBjbG9zaW5nIHRpbWUgb2YgdGhlIGxlZGdlciB0aGF0XG4gICAgICogaW5jbHVkZXMgdGhlIENyZWF0ZUNsYWltYWJsZUJhbGFuY2Ugb3BlcmF0aW9uIGlzIGxlc3MgdGhhbiB0aGlzIChhYnNvbHV0ZSlcbiAgICAgKiBVbml4IHRpbWVzdGFtcCAoZXhwcmVzc2VkIGluIHNlY29uZHMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFic0JlZm9yZSBVbml4IGVwb2NoIChpbiBzZWNvbmRzKSBhcyBhIHN0cmluZ1xuICAgICAqIEBSZXR1cm4ge3hkci5DbGFpbVByZWRpY2F0ZX1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJwcmVkaWNhdGVCZWZvcmVBYnNvbHV0ZVRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlZGljYXRlQmVmb3JlQWJzb2x1dGVUaW1lKGFic0JlZm9yZSkge1xuICAgICAgcmV0dXJuIF94ZHJbXCJkZWZhdWx0XCJdLkNsYWltUHJlZGljYXRlLmNsYWltUHJlZGljYXRlQmVmb3JlQWJzb2x1dGVUaW1lKF94ZHJbXCJkZWZhdWx0XCJdLkludDY0LmZyb21TdHJpbmcoYWJzQmVmb3JlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGBCZWZvcmVSZWxhdGl2ZVRpbWVgIGNsYWltIHByZWRpY2F0ZVxuICAgICAqXG4gICAgICogVGhpcyBwcmVkaWNhdGUgd2lsbCBiZSBmdWxmaWxsZWQgaWYgdGhlIGNsb3NpbmcgdGltZSBvZiB0aGUgbGVkZ2VyIHRoYXRcbiAgICAgKiBpbmNsdWRlcyB0aGUgQ3JlYXRlQ2xhaW1hYmxlQmFsYW5jZSBvcGVyYXRpb24gcGx1cyB0aGlzIHJlbGF0aXZlIHRpbWUgZGVsdGFcbiAgICAgKiAoaW4gc2Vjb25kcykgaXMgbGVzcyB0aGFuIHRoZSBjdXJyZW50IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3N9IHNlY29uZHMgc2Vjb25kcyBzaW5jZSBjbG9zZVRpbWUgb2YgdGhlIGxlZGdlciBpbiB3aGljaCB0aGUgQ2xhaW1hYmxlQmFsYW5jZUVudHJ5IHdhcyBjcmVhdGVkIChhcyBzdHJpbmcpXG4gICAgICogQFJldHVybiB7eGRyLkNsYWltUHJlZGljYXRlfVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInByZWRpY2F0ZUJlZm9yZVJlbGF0aXZlVGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVkaWNhdGVCZWZvcmVSZWxhdGl2ZVRpbWUoc2Vjb25kcykge1xuICAgICAgcmV0dXJuIF94ZHJbXCJkZWZhdWx0XCJdLkNsYWltUHJlZGljYXRlLmNsYWltUHJlZGljYXRlQmVmb3JlUmVsYXRpdmVUaW1lKF94ZHJbXCJkZWZhdWx0XCJdLkludDY0LmZyb21TdHJpbmcoc2Vjb25kcykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBjbGFpbWFudCBvYmplY3QgZnJvbSBpdHMgWERSIG9iamVjdCByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3hkci5DbGFpbWFudH0gY2xhaW1hbnRYZHIgLSBUaGUgY2xhaW1hbnQgeGRyIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7Q2xhaW1hbnR9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbVhEUlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tWERSKGNsYWltYW50WGRyKSB7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICBzd2l0Y2ggKGNsYWltYW50WGRyW1wic3dpdGNoXCJdKCkpIHtcbiAgICAgICAgY2FzZSBfeGRyW1wiZGVmYXVsdFwiXS5DbGFpbWFudFR5cGUuY2xhaW1hbnRUeXBlVjAoKTpcbiAgICAgICAgICB2YWx1ZSA9IGNsYWltYW50WGRyLnYwKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyB0aGlzKF9zdHJrZXkuU3RyS2V5LmVuY29kZUVkMjU1MTlQdWJsaWNLZXkodmFsdWUuZGVzdGluYXRpb24oKS5lZDI1NTE5KCkpLCB2YWx1ZS5wcmVkaWNhdGUoKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjbGFpbWFudCB0eXBlOiBcIi5jb25jYXQoY2xhaW1hbnRYZHJbXCJzd2l0Y2hcIl0oKS5uYW1lKSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG59KCk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/claimant.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/contract.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/contract.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Contract = void 0;\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/address.js\");\nvar _operation = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operation.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Create a new Contract object.\n *\n * `Contract` represents a single contract in the Stellar network, embodying the\n * interface of the contract. See\n * [Contracts](https://soroban.stellar.org/docs/learn/interacting-with-contracts)\n * for more information about how contracts work in Stellar.\n *\n * @constructor\n *\n * @param {string} contractId - ID of the contract (ex.\n *     `CA3D5KRYM6CB7OWQ6TWYRR3Z4T7GNZLKERYNZGGA5SOAOPIFY6YQGAXE`).\n */\nvar Contract = exports.Contract = /*#__PURE__*/function () {\n  function Contract(contractId) {\n    _classCallCheck(this, Contract);\n    try {\n      // First, try it as a strkey\n      this._id = _strkey.StrKey.decodeContract(contractId);\n    } catch (_) {\n      throw new Error(\"Invalid contract ID: \".concat(contractId));\n    }\n  }\n\n  /**\n   * Returns Stellar contract ID as a strkey, ex.\n   * `CA3D5KRYM6CB7OWQ6TWYRR3Z4T7GNZLKERYNZGGA5SOAOPIFY6YQGAXE`.\n   * @returns {string}\n   */\n  return _createClass(Contract, [{\n    key: \"contractId\",\n    value: function contractId() {\n      return _strkey.StrKey.encodeContract(this._id);\n    }\n\n    /** @returns {string} the ID as a strkey (C...) */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.contractId();\n    }\n\n    /** @returns {Address} the wrapped address of this contract */\n  }, {\n    key: \"address\",\n    value: function address() {\n      return _address.Address.contract(this._id);\n    }\n\n    /**\n     * Returns an operation that will invoke this contract call.\n     *\n     * @param {string}        method   name of the method to call\n     * @param {...xdr.ScVal}  params   arguments to pass to the function call\n     *\n     * @returns {xdr.Operation}   an InvokeHostFunctionOp operation to call the\n     *    contract with the given method and parameters\n     *\n     * @see Operation.invokeHostFunction\n     * @see Operation.invokeContractFunction\n     * @see Operation.createCustomContract\n     * @see Operation.createStellarAssetContract\n     * @see Operation.uploadContractWasm\n     */\n  }, {\n    key: \"call\",\n    value: function call(method) {\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n      return _operation.Operation.invokeContractFunction({\n        contract: this.address().toString(),\n        \"function\": method,\n        args: params\n      });\n    }\n\n    /**\n     * Returns the read-only footprint entries necessary for any invocations to\n     * this contract, for convenience when manually adding it to your\n     * transaction's overall footprint or doing bump/restore operations.\n     *\n     * @returns {xdr.LedgerKey} the ledger key for the deployed contract instance\n     */\n  }, {\n    key: \"getFootprint\",\n    value: function getFootprint() {\n      return _xdr[\"default\"].LedgerKey.contractData(new _xdr[\"default\"].LedgerKeyContractData({\n        contract: this.address().toScAddress(),\n        key: _xdr[\"default\"].ScVal.scvLedgerKeyContractInstance(),\n        durability: _xdr[\"default\"].ContractDataDurability.persistent()\n      }));\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/events.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/events.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.humanizeEvents = humanizeEvents;\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _scval = __webpack_require__(/*! ./scval */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/scval.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Converts raw diagnostic or contract events into something with a flatter,\n * human-readable, and understandable structure.\n *\n * @param {xdr.DiagnosticEvent[] | xdr.ContractEvent[]} events  either contract\n *    events or diagnostic events to parse into a friendly format\n *\n * @returns {SorobanEvent[]}  a list of human-readable event structures, where\n *    each element has the following properties:\n *  - type: a string of one of 'system', 'contract', 'diagnostic\n *  - contractId?: optionally, a `C...` encoded strkey\n *  - topics: a list of {@link scValToNative} invocations on the topics\n *  - data: similarly, a {@link scValToNative} invocation on the raw event data\n */\nfunction humanizeEvents(events) {\n  return events.map(function (e) {\n    // A pseudo-instanceof check for xdr.DiagnosticEvent more reliable\n    // in mixed SDK environments:\n    if (e.inSuccessfulContractCall) {\n      return extractEvent(e.event());\n    }\n    return extractEvent(e);\n  });\n}\nfunction extractEvent(event) {\n  return _objectSpread(_objectSpread({}, typeof event.contractId === 'function' && event.contractId() != null && {\n    contractId: _strkey.StrKey.encodeContract(event.contractId())\n  }), {}, {\n    type: event.type().name,\n    topics: event.body().value().topics().map(function (t) {\n      return (0, _scval.scValToNative)(t);\n    }),\n    data: (0, _scval.scValToNative)(event.body().value().data())\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9ldmVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysc0JBQXNCO0FBQ3RCLGNBQWMsbUJBQU8sQ0FBQywwSEFBVTtBQUNoQyxhQUFhLG1CQUFPLENBQUMsd0hBQVM7QUFDOUIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MseUJBQXlCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3BQLDRCQUE0QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHNEQUFzRCw4QkFBOEIsbUpBQW1KLHFFQUFxRSxLQUFLO0FBQzVhLG9DQUFvQyxvRUFBb0UsMERBQTBEO0FBQ2xLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2Q0FBNkM7QUFDeEQ7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixxQkFBcUI7QUFDOUMsMEJBQTBCLHFCQUFxQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBLEdBQUcsS0FBSztBQUNSO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9ldmVudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmh1bWFuaXplRXZlbnRzID0gaHVtYW5pemVFdmVudHM7XG52YXIgX3N0cmtleSA9IHJlcXVpcmUoXCIuL3N0cmtleVwiKTtcbnZhciBfc2N2YWwgPSByZXF1aXJlKFwiLi9zY3ZhbFwiKTtcbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHsgcmV0dXJuIChyID0gX3RvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgeyB2YWx1ZTogdCwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSA6IGVbcl0gPSB0LCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBDb252ZXJ0cyByYXcgZGlhZ25vc3RpYyBvciBjb250cmFjdCBldmVudHMgaW50byBzb21ldGhpbmcgd2l0aCBhIGZsYXR0ZXIsXG4gKiBodW1hbi1yZWFkYWJsZSwgYW5kIHVuZGVyc3RhbmRhYmxlIHN0cnVjdHVyZS5cbiAqXG4gKiBAcGFyYW0ge3hkci5EaWFnbm9zdGljRXZlbnRbXSB8IHhkci5Db250cmFjdEV2ZW50W119IGV2ZW50cyAgZWl0aGVyIGNvbnRyYWN0XG4gKiAgICBldmVudHMgb3IgZGlhZ25vc3RpYyBldmVudHMgdG8gcGFyc2UgaW50byBhIGZyaWVuZGx5IGZvcm1hdFxuICpcbiAqIEByZXR1cm5zIHtTb3JvYmFuRXZlbnRbXX0gIGEgbGlzdCBvZiBodW1hbi1yZWFkYWJsZSBldmVudCBzdHJ1Y3R1cmVzLCB3aGVyZVxuICogICAgZWFjaCBlbGVtZW50IGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgLSB0eXBlOiBhIHN0cmluZyBvZiBvbmUgb2YgJ3N5c3RlbScsICdjb250cmFjdCcsICdkaWFnbm9zdGljXG4gKiAgLSBjb250cmFjdElkPzogb3B0aW9uYWxseSwgYSBgQy4uLmAgZW5jb2RlZCBzdHJrZXlcbiAqICAtIHRvcGljczogYSBsaXN0IG9mIHtAbGluayBzY1ZhbFRvTmF0aXZlfSBpbnZvY2F0aW9ucyBvbiB0aGUgdG9waWNzXG4gKiAgLSBkYXRhOiBzaW1pbGFybHksIGEge0BsaW5rIHNjVmFsVG9OYXRpdmV9IGludm9jYXRpb24gb24gdGhlIHJhdyBldmVudCBkYXRhXG4gKi9cbmZ1bmN0aW9uIGh1bWFuaXplRXZlbnRzKGV2ZW50cykge1xuICByZXR1cm4gZXZlbnRzLm1hcChmdW5jdGlvbiAoZSkge1xuICAgIC8vIEEgcHNldWRvLWluc3RhbmNlb2YgY2hlY2sgZm9yIHhkci5EaWFnbm9zdGljRXZlbnQgbW9yZSByZWxpYWJsZVxuICAgIC8vIGluIG1peGVkIFNESyBlbnZpcm9ubWVudHM6XG4gICAgaWYgKGUuaW5TdWNjZXNzZnVsQ29udHJhY3RDYWxsKSB7XG4gICAgICByZXR1cm4gZXh0cmFjdEV2ZW50KGUuZXZlbnQoKSk7XG4gICAgfVxuICAgIHJldHVybiBleHRyYWN0RXZlbnQoZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZXh0cmFjdEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHR5cGVvZiBldmVudC5jb250cmFjdElkID09PSAnZnVuY3Rpb24nICYmIGV2ZW50LmNvbnRyYWN0SWQoKSAhPSBudWxsICYmIHtcbiAgICBjb250cmFjdElkOiBfc3Rya2V5LlN0cktleS5lbmNvZGVDb250cmFjdChldmVudC5jb250cmFjdElkKCkpXG4gIH0pLCB7fSwge1xuICAgIHR5cGU6IGV2ZW50LnR5cGUoKS5uYW1lLFxuICAgIHRvcGljczogZXZlbnQuYm9keSgpLnZhbHVlKCkudG9waWNzKCkubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gKDAsIF9zY3ZhbC5zY1ZhbFRvTmF0aXZlKSh0KTtcbiAgICB9KSxcbiAgICBkYXRhOiAoMCwgX3NjdmFsLnNjVmFsVG9OYXRpdmUpKGV2ZW50LmJvZHkoKS52YWx1ZSgpLmRhdGEoKSlcbiAgfSk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FeeBumpTransaction = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _transaction = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction.js\");\nvar _transaction_base = __webpack_require__(/*! ./transaction_base */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_base.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Use {@link TransactionBuilder.buildFeeBumpTransaction} to build a\n * FeeBumpTransaction object. If you have an object or base64-encoded string of\n * the transaction envelope XDR use {@link TransactionBuilder.fromXDR}.\n *\n * Once a {@link FeeBumpTransaction} has been created, its attributes and operations\n * should not be changed. You should only add signatures (using {@link FeeBumpTransaction#sign}) before\n * submitting to the network or forwarding on to additional signers.\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string.\n * @param {string} networkPassphrase - passphrase of the target Stellar network\n *     (e.g. \"Public Global Stellar Network ; September 2015\").\n *\n * @extends TransactionBase\n */\nvar FeeBumpTransaction = exports.FeeBumpTransaction = /*#__PURE__*/function (_TransactionBase) {\n  function FeeBumpTransaction(envelope, networkPassphrase) {\n    var _this;\n    _classCallCheck(this, FeeBumpTransaction);\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _xdr[\"default\"].TransactionEnvelope.fromXDR(buffer);\n    }\n    var envelopeType = envelope[\"switch\"]();\n    if (envelopeType !== _xdr[\"default\"].EnvelopeType.envelopeTypeTxFeeBump()) {\n      throw new Error(\"Invalid TransactionEnvelope: expected an envelopeTypeTxFeeBump but received an \".concat(envelopeType.name, \".\"));\n    }\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    // clone signatures\n    var signatures = (txEnvelope.signatures() || []).slice();\n    _this = _callSuper(this, FeeBumpTransaction, [tx, signatures, fee, networkPassphrase]);\n    var innerTxEnvelope = _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(tx.innerTx().v1());\n    _this._feeSource = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.feeSource());\n    _this._innerTransaction = new _transaction.Transaction(innerTxEnvelope, networkPassphrase);\n    return _this;\n  }\n\n  /**\n   * @type {Transaction}\n   * @readonly\n   */\n  _inherits(FeeBumpTransaction, _TransactionBase);\n  return _createClass(FeeBumpTransaction, [{\n    key: \"innerTransaction\",\n    get: function get() {\n      return this._innerTransaction;\n    }\n\n    /**\n     * @type {Operation[]}\n     * @readonly\n     */\n  }, {\n    key: \"operations\",\n    get: function get() {\n      return this._innerTransaction.operations;\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"feeSource\",\n    get: function get() {\n      return this._feeSource;\n    }\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"signatureBase\",\n    value: function signatureBase() {\n      var taggedTransaction = new _xdr[\"default\"].TransactionSignaturePayloadTaggedTransaction.envelopeTypeTxFeeBump(this.tx);\n      var txSignature = new _xdr[\"default\"].TransactionSignaturePayload({\n        networkId: _xdr[\"default\"].Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n  }, {\n    key: \"toEnvelope\",\n    value: function toEnvelope() {\n      var envelope = new _xdr[\"default\"].FeeBumpTransactionEnvelope({\n        tx: _xdr[\"default\"].FeeBumpTransaction.fromXDR(this.tx.toXDR()),\n        // make a copy of the tx\n        signatures: this.signatures.slice() // make a copy of the signatures\n      });\n      return new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTxFeeBump(envelope);\n    }\n  }]);\n}(_transaction_base.TransactionBase);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/generated/curr_generated.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/generated/curr_generated.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar XDR = _interopRequireWildcard(__webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { \"default\": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n[\"default\"] = e, t && t.set(e, n), n; }\n// Automatically generated by xdrgen on 2024-09-12T11:09:00-08:00\n// DO NOT EDIT or your changes may be overwritten\n\n/* jshint maxstatements:2147483647  */\n/* jshint esnext:true  */\n\nvar types = XDR.config(function (xdr) {\n  // Workaround for https://github.com/stellar/xdrgen/issues/152\n  //\n  // The \"correct\" way would be to replace bare instances of each constant with\n  // xdr.lookup(\"...\"), but that's more error-prone.\n  var SCSYMBOL_LIMIT = 32;\n  var SC_SPEC_DOC_LIMIT = 1024;\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Value<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Value\", xdr.varOpaque());\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPBallot\n  //   {\n  //       uint32 counter; // n\n  //       Value value;    // x\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpBallot\", [[\"counter\", xdr.lookup(\"Uint32\")], [\"value\", xdr.lookup(\"Value\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCPStatementType\n  //   {\n  //       SCP_ST_PREPARE = 0,\n  //       SCP_ST_CONFIRM = 1,\n  //       SCP_ST_EXTERNALIZE = 2,\n  //       SCP_ST_NOMINATE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScpStatementType\", {\n    scpStPrepare: 0,\n    scpStConfirm: 1,\n    scpStExternalize: 2,\n    scpStNominate: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPNomination\n  //   {\n  //       Hash quorumSetHash; // D\n  //       Value votes<>;      // X\n  //       Value accepted<>;   // Y\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpNomination\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"votes\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)], [\"accepted\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementPrepare\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"ballot\", xdr.lookup(\"ScpBallot\")], [\"prepared\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"preparedPrime\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"nC\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementConfirm\", [[\"ballot\", xdr.lookup(\"ScpBallot\")], [\"nPrepared\", xdr.lookup(\"Uint32\")], [\"nCommit\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"quorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementExternalize\", [[\"commit\", xdr.lookup(\"ScpBallot\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"commitQuorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ScpStatementPledges\", {\n    switchOn: xdr.lookup(\"ScpStatementType\"),\n    switchName: \"type\",\n    switches: [[\"scpStPrepare\", \"prepare\"], [\"scpStConfirm\", \"confirm\"], [\"scpStExternalize\", \"externalize\"], [\"scpStNominate\", \"nominate\"]],\n    arms: {\n      prepare: xdr.lookup(\"ScpStatementPrepare\"),\n      confirm: xdr.lookup(\"ScpStatementConfirm\"),\n      externalize: xdr.lookup(\"ScpStatementExternalize\"),\n      nominate: xdr.lookup(\"ScpNomination\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPStatement\n  //   {\n  //       NodeID nodeID;    // v\n  //       uint64 slotIndex; // i\n  //\n  //       union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //       pledges;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatement\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"slotIndex\", xdr.lookup(\"Uint64\")], [\"pledges\", xdr.lookup(\"ScpStatementPledges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPEnvelope\n  //   {\n  //       SCPStatement statement;\n  //       Signature signature;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpEnvelope\", [[\"statement\", xdr.lookup(\"ScpStatement\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPQuorumSet\n  //   {\n  //       uint32 threshold;\n  //       NodeID validators<>;\n  //       SCPQuorumSet innerSets<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpQuorumSet\", [[\"threshold\", xdr.lookup(\"Uint32\")], [\"validators\", xdr.varArray(xdr.lookup(\"NodeId\"), 2147483647)], [\"innerSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Thresholds[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Thresholds\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string32<32>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String32\", xdr.string(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string64<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String64\", xdr.string(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef int64 SequenceNumber;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SequenceNumber\", xdr.lookup(\"Int64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque DataValue<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"DataValue\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash PoolID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PoolId\", xdr.lookup(\"Hash\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode4[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode4\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode12[12];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode12\", xdr.opaque(12));\n\n  // === xdr source ============================================================\n  //\n  //   enum AssetType\n  //   {\n  //       ASSET_TYPE_NATIVE = 0,\n  //       ASSET_TYPE_CREDIT_ALPHANUM4 = 1,\n  //       ASSET_TYPE_CREDIT_ALPHANUM12 = 2,\n  //       ASSET_TYPE_POOL_SHARE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AssetType\", {\n    assetTypeNative: 0,\n    assetTypeCreditAlphanum4: 1,\n    assetTypeCreditAlphanum12: 2,\n    assetTypePoolShare: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AssetCode switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AssetCode4 assetCode4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AssetCode12 assetCode12;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AssetCode\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeCreditAlphanum4\", \"assetCode4\"], [\"assetTypeCreditAlphanum12\", \"assetCode12\"]],\n    arms: {\n      assetCode4: xdr.lookup(\"AssetCode4\"),\n      assetCode12: xdr.lookup(\"AssetCode12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum4\n  //   {\n  //       AssetCode4 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum4\", [[\"assetCode\", xdr.lookup(\"AssetCode4\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum12\n  //   {\n  //       AssetCode12 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum12\", [[\"assetCode\", xdr.lookup(\"AssetCode12\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Asset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Asset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr[\"void\"]()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Price\n  //   {\n  //       int32 n; // numerator\n  //       int32 d; // denominator\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Price\", [[\"n\", xdr.lookup(\"Int32\")], [\"d\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Liabilities\n  //   {\n  //       int64 buying;\n  //       int64 selling;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Liabilities\", [[\"buying\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ThresholdIndexes\n  //   {\n  //       THRESHOLD_MASTER_WEIGHT = 0,\n  //       THRESHOLD_LOW = 1,\n  //       THRESHOLD_MED = 2,\n  //       THRESHOLD_HIGH = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ThresholdIndices\", {\n    thresholdMasterWeight: 0,\n    thresholdLow: 1,\n    thresholdMed: 2,\n    thresholdHigh: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryType\n  //   {\n  //       ACCOUNT = 0,\n  //       TRUSTLINE = 1,\n  //       OFFER = 2,\n  //       DATA = 3,\n  //       CLAIMABLE_BALANCE = 4,\n  //       LIQUIDITY_POOL = 5,\n  //       CONTRACT_DATA = 6,\n  //       CONTRACT_CODE = 7,\n  //       CONFIG_SETTING = 8,\n  //       TTL = 9\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerEntryType\", {\n    account: 0,\n    trustline: 1,\n    offer: 2,\n    data: 3,\n    claimableBalance: 4,\n    liquidityPool: 5,\n    contractData: 6,\n    contractCode: 7,\n    configSetting: 8,\n    ttl: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Signer\n  //   {\n  //       SignerKey key;\n  //       uint32 weight; // really only need 1 byte\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Signer\", [[\"key\", xdr.lookup(\"SignerKey\")], [\"weight\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountFlags\n  //   { // masks for each flag\n  //\n  //       // Flags set on issuer accounts\n  //       // TrustLines are created with authorized set to \"false\" requiring\n  //       // the issuer to set it for each TrustLine\n  //       AUTH_REQUIRED_FLAG = 0x1,\n  //       // If set, the authorized flag in TrustLines can be cleared\n  //       // otherwise, authorization cannot be revoked\n  //       AUTH_REVOCABLE_FLAG = 0x2,\n  //       // Once set, causes all AUTH_* flags to be read-only\n  //       AUTH_IMMUTABLE_FLAG = 0x4,\n  //       // Trustlines are created with clawback enabled set to \"true\",\n  //       // and claimable balances created from those trustlines are created\n  //       // with clawback enabled set to \"true\"\n  //       AUTH_CLAWBACK_ENABLED_FLAG = 0x8\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AccountFlags\", {\n    authRequiredFlag: 1,\n    authRevocableFlag: 2,\n    authImmutableFlag: 4,\n    authClawbackEnabledFlag: 8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_ACCOUNT_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS_V17 = 0xF;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_ACCOUNT_FLAGS_V17\", 0xF);\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_SIGNERS = 20;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MAX_SIGNERS\", 20);\n\n  // === xdr source ============================================================\n  //\n  //   typedef AccountID* SponsorshipDescriptor;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SponsorshipDescriptor\", xdr.option(xdr.lookup(\"AccountId\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV3\n  //   {\n  //       // We can use this to add more fields, or because it is first, to\n  //       // change AccountEntryExtensionV3 into a union.\n  //       ExtensionPoint ext;\n  //\n  //       // Ledger number at which `seqNum` took on its present value.\n  //       uint32 seqLedger;\n  //\n  //       // Time at which `seqNum` took on its present value.\n  //       TimePoint seqTime;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV3\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"seqLedger\", xdr.lookup(\"Uint32\")], [\"seqTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV2Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [3, \"v3\"]],\n    arms: {\n      v3: xdr.lookup(\"AccountEntryExtensionV3\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV2\n  //   {\n  //       uint32 numSponsored;\n  //       uint32 numSponsoring;\n  //       SponsorshipDescriptor signerSponsoringIDs<MAX_SIGNERS>;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV2\", [[\"numSponsored\", xdr.lookup(\"Uint32\")], [\"numSponsoring\", xdr.lookup(\"Uint32\")], [\"signerSponsoringIDs\", xdr.varArray(xdr.lookup(\"SponsorshipDescriptor\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"AccountEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV1\n  //   {\n  //       Liabilities liabilities;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"AccountEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"AccountEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntry\n  //   {\n  //       AccountID accountID;      // master public key for this account\n  //       int64 balance;            // in stroops\n  //       SequenceNumber seqNum;    // last sequence number used for this account\n  //       uint32 numSubEntries;     // number of sub-entries this account has\n  //                                 // drives the reserve\n  //       AccountID* inflationDest; // Account to vote for during inflation\n  //       uint32 flags;             // see AccountFlags\n  //\n  //       string32 homeDomain; // can be used for reverse federation and memo lookup\n  //\n  //       // fields used for signatures\n  //       // thresholds stores unsigned bytes: [weight of master|low|medium|high]\n  //       Thresholds thresholds;\n  //\n  //       Signer signers<MAX_SIGNERS>; // possible signers for this account\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"balance\", xdr.lookup(\"Int64\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"numSubEntries\", xdr.lookup(\"Uint32\")], [\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"flags\", xdr.lookup(\"Uint32\")], [\"homeDomain\", xdr.lookup(\"String32\")], [\"thresholds\", xdr.lookup(\"Thresholds\")], [\"signers\", xdr.varArray(xdr.lookup(\"Signer\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum TrustLineFlags\n  //   {\n  //       // issuer has authorized account to perform transactions with its credit\n  //       AUTHORIZED_FLAG = 1,\n  //       // issuer has authorized account to maintain and reduce liabilities for its\n  //       // credit\n  //       AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG = 2,\n  //       // issuer has specified that it may clawback its credit, and that claimable\n  //       // balances created with its credit may also be clawed back\n  //       TRUSTLINE_CLAWBACK_ENABLED_FLAG = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"TrustLineFlags\", {\n    authorizedFlag: 1,\n    authorizedToMaintainLiabilitiesFlag: 2,\n    trustlineClawbackEnabledFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_TRUSTLINE_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V13 = 3;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_TRUSTLINE_FLAGS_V13\", 3);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V17 = 7;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_TRUSTLINE_FLAGS_V17\", 7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolType\n  //   {\n  //       LIQUIDITY_POOL_CONSTANT_PRODUCT = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LiquidityPoolType\", {\n    liquidityPoolConstantProduct: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TrustLineAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //\n  //   case ASSET_TYPE_POOL_SHARE:\n  //       PoolID liquidityPoolID;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr[\"void\"]()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPoolId\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPoolId: xdr.lookup(\"PoolId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExtensionV2Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntryExtensionV2\n  //   {\n  //       int32 liquidityPoolUseCount;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryExtensionV2\", [[\"liquidityPoolUseCount\", xdr.lookup(\"Int32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"TrustLineEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Liabilities liabilities;\n  //\n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"TrustLineEntryV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //\n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TrustLineEntryV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntry\n  //   {\n  //       AccountID accountID;  // account this trustline belongs to\n  //       TrustLineAsset asset; // type of asset (with issuer)\n  //       int64 balance;        // how much of this asset the user has.\n  //                             // Asset defines the unit for this;\n  //\n  //       int64 limit;  // balance cannot be above this\n  //       uint32 flags; // see TrustLineFlags\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //\n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")], [\"balance\", xdr.lookup(\"Int64\")], [\"limit\", xdr.lookup(\"Int64\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OfferEntryFlags\n  //   {\n  //       // an offer with this flag will not act on and take a reverse offer of equal\n  //       // price\n  //       PASSIVE_FLAG = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"OfferEntryFlags\", {\n    passiveFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_OFFERENTRY_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_OFFERENTRY_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OfferEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct OfferEntry\n  //   {\n  //       AccountID sellerID;\n  //       int64 offerID;\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount of A\n  //\n  //       /* price for this offer:\n  //           price of A in terms of B\n  //           price=AmountB/AmountA=priceNumerator/priceDenominator\n  //           price is after fees\n  //       */\n  //       Price price;\n  //       uint32 flags; // see OfferEntryFlags\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OfferEntry\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"OfferEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"DataEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DataEntry\n  //   {\n  //       AccountID accountID; // account this data belongs to\n  //       string64 dataName;\n  //       DataValue dataValue;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DataEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.lookup(\"DataValue\")], [\"ext\", xdr.lookup(\"DataEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimPredicateType\n  //   {\n  //       CLAIM_PREDICATE_UNCONDITIONAL = 0,\n  //       CLAIM_PREDICATE_AND = 1,\n  //       CLAIM_PREDICATE_OR = 2,\n  //       CLAIM_PREDICATE_NOT = 3,\n  //       CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME = 4,\n  //       CLAIM_PREDICATE_BEFORE_RELATIVE_TIME = 5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimPredicateType\", {\n    claimPredicateUnconditional: 0,\n    claimPredicateAnd: 1,\n    claimPredicateOr: 2,\n    claimPredicateNot: 3,\n    claimPredicateBeforeAbsoluteTime: 4,\n    claimPredicateBeforeRelativeTime: 5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimPredicate switch (ClaimPredicateType type)\n  //   {\n  //   case CLAIM_PREDICATE_UNCONDITIONAL:\n  //       void;\n  //   case CLAIM_PREDICATE_AND:\n  //       ClaimPredicate andPredicates<2>;\n  //   case CLAIM_PREDICATE_OR:\n  //       ClaimPredicate orPredicates<2>;\n  //   case CLAIM_PREDICATE_NOT:\n  //       ClaimPredicate* notPredicate;\n  //   case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:\n  //       int64 absBefore; // Predicate will be true if closeTime < absBefore\n  //   case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:\n  //       int64 relBefore; // Seconds since closeTime of the ledger in which the\n  //                        // ClaimableBalanceEntry was created\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimPredicate\", {\n    switchOn: xdr.lookup(\"ClaimPredicateType\"),\n    switchName: \"type\",\n    switches: [[\"claimPredicateUnconditional\", xdr[\"void\"]()], [\"claimPredicateAnd\", \"andPredicates\"], [\"claimPredicateOr\", \"orPredicates\"], [\"claimPredicateNot\", \"notPredicate\"], [\"claimPredicateBeforeAbsoluteTime\", \"absBefore\"], [\"claimPredicateBeforeRelativeTime\", \"relBefore\"]],\n    arms: {\n      andPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      orPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      notPredicate: xdr.option(xdr.lookup(\"ClaimPredicate\")),\n      absBefore: xdr.lookup(\"Int64\"),\n      relBefore: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimantType\n  //   {\n  //       CLAIMANT_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimantType\", {\n    claimantTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimantV0\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"predicate\", xdr.lookup(\"ClaimPredicate\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Claimant switch (ClaimantType type)\n  //   {\n  //   case CLAIMANT_TYPE_V0:\n  //       struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Claimant\", {\n    switchOn: xdr.lookup(\"ClaimantType\"),\n    switchName: \"type\",\n    switches: [[\"claimantTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimantV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceIDType\n  //   {\n  //       CLAIMABLE_BALANCE_ID_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimableBalanceIdType\", {\n    claimableBalanceIdTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimableBalanceID switch (ClaimableBalanceIDType type)\n  //   {\n  //   case CLAIMABLE_BALANCE_ID_TYPE_V0:\n  //       Hash v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceId\", {\n    switchOn: xdr.lookup(\"ClaimableBalanceIdType\"),\n    switchName: \"type\",\n    switches: [[\"claimableBalanceIdTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceFlags\n  //   {\n  //       // If set, the issuer account of the asset held by the claimable balance may\n  //       // clawback the claimable balance\n  //       CLAIMABLE_BALANCE_CLAWBACK_ENABLED_FLAG = 0x1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimableBalanceFlags\", {\n    claimableBalanceClawbackEnabledFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_CLAIMABLE_BALANCE_FLAGS = 0x1;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_CLAIMABLE_BALANCE_FLAGS\", 0x1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntryExtensionV1\n  //   {\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //\n  //       uint32 flags; // see ClaimableBalanceFlags\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntryExtensionV1\", [[\"ext\", xdr.lookup(\"ClaimableBalanceEntryExtensionV1Ext\")], [\"flags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"ClaimableBalanceEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntry\n  //   {\n  //       // Unique identifier for this ClaimableBalanceEntry\n  //       ClaimableBalanceID balanceID;\n  //\n  //       // List of claimants with associated predicate\n  //       Claimant claimants<10>;\n  //\n  //       // Any asset including native\n  //       Asset asset;\n  //\n  //       // Amount of asset\n  //       int64 amount;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntry\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"ext\", xdr.lookup(\"ClaimableBalanceEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolConstantProductParameters\n  //   {\n  //       Asset assetA; // assetA < assetB\n  //       Asset assetB;\n  //       int32 fee; // Fee is in basis points, so the actual rate is (fee/100)%\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolConstantProductParameters\", [[\"assetA\", xdr.lookup(\"Asset\")], [\"assetB\", xdr.lookup(\"Asset\")], [\"fee\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //\n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntryConstantProduct\", [[\"params\", xdr.lookup(\"LiquidityPoolConstantProductParameters\")], [\"reserveA\", xdr.lookup(\"Int64\")], [\"reserveB\", xdr.lookup(\"Int64\")], [\"totalPoolShares\", xdr.lookup(\"Int64\")], [\"poolSharesTrustLineCount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //\n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolEntryBody\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolEntryConstantProduct\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolEntry\n  //   {\n  //       PoolID liquidityPoolID;\n  //\n  //       union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //\n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntry\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"body\", xdr.lookup(\"LiquidityPoolEntryBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractDataDurability {\n  //       TEMPORARY = 0,\n  //       PERSISTENT = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractDataDurability\", {\n    temporary: 0,\n    persistent: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractDataEntry {\n  //       ExtensionPoint ext;\n  //\n  //       SCAddress contract;\n  //       SCVal key;\n  //       ContractDataDurability durability;\n  //       SCVal val;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractDataEntry\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"contract\", xdr.lookup(\"ScAddress\")], [\"key\", xdr.lookup(\"ScVal\")], [\"durability\", xdr.lookup(\"ContractDataDurability\")], [\"val\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractCodeCostInputs {\n  //       ExtensionPoint ext;\n  //       uint32 nInstructions;\n  //       uint32 nFunctions;\n  //       uint32 nGlobals;\n  //       uint32 nTableEntries;\n  //       uint32 nTypes;\n  //       uint32 nDataSegments;\n  //       uint32 nElemSegments;\n  //       uint32 nImports;\n  //       uint32 nExports;\n  //       uint32 nDataSegmentBytes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCodeCostInputs\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"nInstructions\", xdr.lookup(\"Uint32\")], [\"nFunctions\", xdr.lookup(\"Uint32\")], [\"nGlobals\", xdr.lookup(\"Uint32\")], [\"nTableEntries\", xdr.lookup(\"Uint32\")], [\"nTypes\", xdr.lookup(\"Uint32\")], [\"nDataSegments\", xdr.lookup(\"Uint32\")], [\"nElemSegments\", xdr.lookup(\"Uint32\")], [\"nImports\", xdr.lookup(\"Uint32\")], [\"nExports\", xdr.lookup(\"Uint32\")], [\"nDataSegmentBytes\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //               {\n  //                   ExtensionPoint ext;\n  //                   ContractCodeCostInputs costInputs;\n  //               }\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCodeEntryV1\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"costInputs\", xdr.lookup(\"ContractCodeCostInputs\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //           case 0:\n  //               void;\n  //           case 1:\n  //               struct\n  //               {\n  //                   ExtensionPoint ext;\n  //                   ContractCodeCostInputs costInputs;\n  //               } v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ContractCodeEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"ContractCodeEntryV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractCodeEntry {\n  //       union switch (int v)\n  //       {\n  //           case 0:\n  //               void;\n  //           case 1:\n  //               struct\n  //               {\n  //                   ExtensionPoint ext;\n  //                   ContractCodeCostInputs costInputs;\n  //               } v1;\n  //       } ext;\n  //\n  //       Hash hash;\n  //       opaque code<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCodeEntry\", [[\"ext\", xdr.lookup(\"ContractCodeEntryExt\")], [\"hash\", xdr.lookup(\"Hash\")], [\"code\", xdr.varOpaque()]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TTLEntry {\n  //       // Hash of the LedgerKey that is associated with this TTLEntry\n  //       Hash keyHash;\n  //       uint32 liveUntilLedgerSeq;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TtlEntry\", [[\"keyHash\", xdr.lookup(\"Hash\")], [\"liveUntilLedgerSeq\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntryExtensionV1\n  //   {\n  //       SponsorshipDescriptor sponsoringID;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntryExtensionV1\", [[\"sponsoringId\", xdr.lookup(\"SponsorshipDescriptor\")], [\"ext\", xdr.lookup(\"LedgerEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       case CONTRACT_DATA:\n  //           ContractDataEntry contractData;\n  //       case CONTRACT_CODE:\n  //           ContractCodeEntry contractCode;\n  //       case CONFIG_SETTING:\n  //           ConfigSettingEntry configSetting;\n  //       case TTL:\n  //           TTLEntry ttl;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryData\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"], [\"contractData\", \"contractData\"], [\"contractCode\", \"contractCode\"], [\"configSetting\", \"configSetting\"], [\"ttl\", \"ttl\"]],\n    arms: {\n      account: xdr.lookup(\"AccountEntry\"),\n      trustLine: xdr.lookup(\"TrustLineEntry\"),\n      offer: xdr.lookup(\"OfferEntry\"),\n      data: xdr.lookup(\"DataEntry\"),\n      claimableBalance: xdr.lookup(\"ClaimableBalanceEntry\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolEntry\"),\n      contractData: xdr.lookup(\"ContractDataEntry\"),\n      contractCode: xdr.lookup(\"ContractCodeEntry\"),\n      configSetting: xdr.lookup(\"ConfigSettingEntry\"),\n      ttl: xdr.lookup(\"TtlEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntry\n  //   {\n  //       uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed\n  //\n  //       union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       case CONTRACT_DATA:\n  //           ContractDataEntry contractData;\n  //       case CONTRACT_CODE:\n  //           ContractCodeEntry contractCode;\n  //       case CONFIG_SETTING:\n  //           ConfigSettingEntry configSetting;\n  //       case TTL:\n  //           TTLEntry ttl;\n  //       }\n  //       data;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntry\", [[\"lastModifiedLedgerSeq\", xdr.lookup(\"Uint32\")], [\"data\", xdr.lookup(\"LedgerEntryData\")], [\"ext\", xdr.lookup(\"LedgerEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyAccount\", [[\"accountId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyTrustLine\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyOffer\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyData\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyClaimableBalance\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyLiquidityPool\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           SCAddress contract;\n  //           SCVal key;\n  //           ContractDataDurability durability;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyContractData\", [[\"contract\", xdr.lookup(\"ScAddress\")], [\"key\", xdr.lookup(\"ScVal\")], [\"durability\", xdr.lookup(\"ContractDataDurability\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           Hash hash;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyContractCode\", [[\"hash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ConfigSettingID configSettingID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyConfigSetting\", [[\"configSettingId\", xdr.lookup(\"ConfigSettingId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           // Hash of the LedgerKey that is associated with this TTLEntry\n  //           Hash keyHash;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyTtl\", [[\"keyHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerKey switch (LedgerEntryType type)\n  //   {\n  //   case ACCOUNT:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //       } account;\n  //\n  //   case TRUSTLINE:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       } trustLine;\n  //\n  //   case OFFER:\n  //       struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       } offer;\n  //\n  //   case DATA:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       } data;\n  //\n  //   case CLAIMABLE_BALANCE:\n  //       struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       } claimableBalance;\n  //\n  //   case LIQUIDITY_POOL:\n  //       struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       } liquidityPool;\n  //   case CONTRACT_DATA:\n  //       struct\n  //       {\n  //           SCAddress contract;\n  //           SCVal key;\n  //           ContractDataDurability durability;\n  //       } contractData;\n  //   case CONTRACT_CODE:\n  //       struct\n  //       {\n  //           Hash hash;\n  //       } contractCode;\n  //   case CONFIG_SETTING:\n  //       struct\n  //       {\n  //           ConfigSettingID configSettingID;\n  //       } configSetting;\n  //   case TTL:\n  //       struct\n  //       {\n  //           // Hash of the LedgerKey that is associated with this TTLEntry\n  //           Hash keyHash;\n  //       } ttl;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerKey\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"], [\"contractData\", \"contractData\"], [\"contractCode\", \"contractCode\"], [\"configSetting\", \"configSetting\"], [\"ttl\", \"ttl\"]],\n    arms: {\n      account: xdr.lookup(\"LedgerKeyAccount\"),\n      trustLine: xdr.lookup(\"LedgerKeyTrustLine\"),\n      offer: xdr.lookup(\"LedgerKeyOffer\"),\n      data: xdr.lookup(\"LedgerKeyData\"),\n      claimableBalance: xdr.lookup(\"LedgerKeyClaimableBalance\"),\n      liquidityPool: xdr.lookup(\"LedgerKeyLiquidityPool\"),\n      contractData: xdr.lookup(\"LedgerKeyContractData\"),\n      contractCode: xdr.lookup(\"LedgerKeyContractCode\"),\n      configSetting: xdr.lookup(\"LedgerKeyConfigSetting\"),\n      ttl: xdr.lookup(\"LedgerKeyTtl\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EnvelopeType\n  //   {\n  //       ENVELOPE_TYPE_TX_V0 = 0,\n  //       ENVELOPE_TYPE_SCP = 1,\n  //       ENVELOPE_TYPE_TX = 2,\n  //       ENVELOPE_TYPE_AUTH = 3,\n  //       ENVELOPE_TYPE_SCPVALUE = 4,\n  //       ENVELOPE_TYPE_TX_FEE_BUMP = 5,\n  //       ENVELOPE_TYPE_OP_ID = 6,\n  //       ENVELOPE_TYPE_POOL_REVOKE_OP_ID = 7,\n  //       ENVELOPE_TYPE_CONTRACT_ID = 8,\n  //       ENVELOPE_TYPE_SOROBAN_AUTHORIZATION = 9\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"EnvelopeType\", {\n    envelopeTypeTxV0: 0,\n    envelopeTypeScp: 1,\n    envelopeTypeTx: 2,\n    envelopeTypeAuth: 3,\n    envelopeTypeScpvalue: 4,\n    envelopeTypeTxFeeBump: 5,\n    envelopeTypeOpId: 6,\n    envelopeTypePoolRevokeOpId: 7,\n    envelopeTypeContractId: 8,\n    envelopeTypeSorobanAuthorization: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BucketListType\n  //   {\n  //       LIVE = 0,\n  //       HOT_ARCHIVE = 1,\n  //       COLD_ARCHIVE = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BucketListType\", {\n    live: 0,\n    hotArchive: 1,\n    coldArchive: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BucketEntryType\n  //   {\n  //       METAENTRY =\n  //           -1, // At-and-after protocol 11: bucket metadata, should come first.\n  //       LIVEENTRY = 0, // Before protocol 11: created-or-updated;\n  //                      // At-and-after protocol 11: only updated.\n  //       DEADENTRY = 1,\n  //       INITENTRY = 2 // At-and-after protocol 11: only created.\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BucketEntryType\", {\n    metaentry: -1,\n    liveentry: 0,\n    deadentry: 1,\n    initentry: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum HotArchiveBucketEntryType\n  //   {\n  //       HOT_ARCHIVE_METAENTRY = -1, // Bucket metadata, should come first.\n  //       HOT_ARCHIVE_ARCHIVED = 0,   // Entry is Archived\n  //       HOT_ARCHIVE_LIVE = 1,       // Entry was previously HOT_ARCHIVE_ARCHIVED, or HOT_ARCHIVE_DELETED, but\n  //                                   // has been added back to the live BucketList.\n  //                                   // Does not need to be persisted.\n  //       HOT_ARCHIVE_DELETED = 2     // Entry deleted (Note: must be persisted in archive)\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"HotArchiveBucketEntryType\", {\n    hotArchiveMetaentry: -1,\n    hotArchiveArchived: 0,\n    hotArchiveLive: 1,\n    hotArchiveDeleted: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ColdArchiveBucketEntryType\n  //   {\n  //       COLD_ARCHIVE_METAENTRY     = -1,  // Bucket metadata, should come first.\n  //       COLD_ARCHIVE_ARCHIVED_LEAF = 0,   // Full LedgerEntry that was archived during the epoch\n  //       COLD_ARCHIVE_DELETED_LEAF  = 1,   // LedgerKey that was deleted during the epoch\n  //       COLD_ARCHIVE_BOUNDARY_LEAF = 2,   // Dummy leaf representing low/high bound\n  //       COLD_ARCHIVE_HASH          = 3    // Intermediary Merkle hash entry\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ColdArchiveBucketEntryType\", {\n    coldArchiveMetaentry: -1,\n    coldArchiveArchivedLeaf: 0,\n    coldArchiveDeletedLeaf: 1,\n    coldArchiveBoundaryLeaf: 2,\n    coldArchiveHash: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           BucketListType bucketListType;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"BucketMetadataExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"bucketListType\"]],\n    arms: {\n      bucketListType: xdr.lookup(\"BucketListType\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct BucketMetadata\n  //   {\n  //       // Indicates the protocol version used to create / merge this bucket.\n  //       uint32 ledgerVersion;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           BucketListType bucketListType;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BucketMetadata\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"BucketMetadataExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union BucketEntry switch (BucketEntryType type)\n  //   {\n  //   case LIVEENTRY:\n  //   case INITENTRY:\n  //       LedgerEntry liveEntry;\n  //\n  //   case DEADENTRY:\n  //       LedgerKey deadEntry;\n  //   case METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BucketEntry\", {\n    switchOn: xdr.lookup(\"BucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"liveentry\", \"liveEntry\"], [\"initentry\", \"liveEntry\"], [\"deadentry\", \"deadEntry\"], [\"metaentry\", \"metaEntry\"]],\n    arms: {\n      liveEntry: xdr.lookup(\"LedgerEntry\"),\n      deadEntry: xdr.lookup(\"LedgerKey\"),\n      metaEntry: xdr.lookup(\"BucketMetadata\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union HotArchiveBucketEntry switch (HotArchiveBucketEntryType type)\n  //   {\n  //   case HOT_ARCHIVE_ARCHIVED:\n  //       LedgerEntry archivedEntry;\n  //\n  //   case HOT_ARCHIVE_LIVE:\n  //   case HOT_ARCHIVE_DELETED:\n  //       LedgerKey key;\n  //   case HOT_ARCHIVE_METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HotArchiveBucketEntry\", {\n    switchOn: xdr.lookup(\"HotArchiveBucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"hotArchiveArchived\", \"archivedEntry\"], [\"hotArchiveLive\", \"key\"], [\"hotArchiveDeleted\", \"key\"], [\"hotArchiveMetaentry\", \"metaEntry\"]],\n    arms: {\n      archivedEntry: xdr.lookup(\"LedgerEntry\"),\n      key: xdr.lookup(\"LedgerKey\"),\n      metaEntry: xdr.lookup(\"BucketMetadata\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveArchivedLeaf\n  //   {\n  //       uint32 index;\n  //       LedgerEntry archivedEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveArchivedLeaf\", [[\"index\", xdr.lookup(\"Uint32\")], [\"archivedEntry\", xdr.lookup(\"LedgerEntry\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveDeletedLeaf\n  //   {\n  //       uint32 index;\n  //       LedgerKey deletedKey;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveDeletedLeaf\", [[\"index\", xdr.lookup(\"Uint32\")], [\"deletedKey\", xdr.lookup(\"LedgerKey\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveBoundaryLeaf\n  //   {\n  //       uint32 index;\n  //       bool isLowerBound;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveBoundaryLeaf\", [[\"index\", xdr.lookup(\"Uint32\")], [\"isLowerBound\", xdr.bool()]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveHashEntry\n  //   {\n  //       uint32 index;\n  //       uint32 level;\n  //       Hash hash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveHashEntry\", [[\"index\", xdr.lookup(\"Uint32\")], [\"level\", xdr.lookup(\"Uint32\")], [\"hash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ColdArchiveBucketEntry switch (ColdArchiveBucketEntryType type)\n  //   {\n  //   case COLD_ARCHIVE_METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   case COLD_ARCHIVE_ARCHIVED_LEAF:\n  //       ColdArchiveArchivedLeaf archivedLeaf;\n  //   case COLD_ARCHIVE_DELETED_LEAF:\n  //       ColdArchiveDeletedLeaf deletedLeaf;\n  //   case COLD_ARCHIVE_BOUNDARY_LEAF:\n  //       ColdArchiveBoundaryLeaf boundaryLeaf;\n  //   case COLD_ARCHIVE_HASH:\n  //       ColdArchiveHashEntry hashEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ColdArchiveBucketEntry\", {\n    switchOn: xdr.lookup(\"ColdArchiveBucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"coldArchiveMetaentry\", \"metaEntry\"], [\"coldArchiveArchivedLeaf\", \"archivedLeaf\"], [\"coldArchiveDeletedLeaf\", \"deletedLeaf\"], [\"coldArchiveBoundaryLeaf\", \"boundaryLeaf\"], [\"coldArchiveHash\", \"hashEntry\"]],\n    arms: {\n      metaEntry: xdr.lookup(\"BucketMetadata\"),\n      archivedLeaf: xdr.lookup(\"ColdArchiveArchivedLeaf\"),\n      deletedLeaf: xdr.lookup(\"ColdArchiveDeletedLeaf\"),\n      boundaryLeaf: xdr.lookup(\"ColdArchiveBoundaryLeaf\"),\n      hashEntry: xdr.lookup(\"ColdArchiveHashEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque UpgradeType<128>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"UpgradeType\", xdr.varOpaque(128));\n\n  // === xdr source ============================================================\n  //\n  //   enum StellarValueType\n  //   {\n  //       STELLAR_VALUE_BASIC = 0,\n  //       STELLAR_VALUE_SIGNED = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"StellarValueType\", {\n    stellarValueBasic: 0,\n    stellarValueSigned: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseValueSignature\n  //   {\n  //       NodeID nodeID;       // which node introduced the value\n  //       Signature signature; // nodeID's signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseValueSignature\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"StellarValueExt\", {\n    switchOn: xdr.lookup(\"StellarValueType\"),\n    switchName: \"v\",\n    switches: [[\"stellarValueBasic\", xdr[\"void\"]()], [\"stellarValueSigned\", \"lcValueSignature\"]],\n    arms: {\n      lcValueSignature: xdr.lookup(\"LedgerCloseValueSignature\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct StellarValue\n  //   {\n  //       Hash txSetHash;      // transaction set to apply to previous ledger\n  //       TimePoint closeTime; // network close time\n  //\n  //       // upgrades to apply to the previous ledger (usually empty)\n  //       // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop\n  //       // unknown steps during consensus if needed.\n  //       // see notes below on 'LedgerUpgrade' for more detail\n  //       // max size is dictated by number of upgrade types (+ room for future)\n  //       UpgradeType upgrades<6>;\n  //\n  //       // reserved for future use\n  //       union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"StellarValue\", [[\"txSetHash\", xdr.lookup(\"Hash\")], [\"closeTime\", xdr.lookup(\"TimePoint\")], [\"upgrades\", xdr.varArray(xdr.lookup(\"UpgradeType\"), 6)], [\"ext\", xdr.lookup(\"StellarValueExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_LEDGER_HEADER_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_LEDGER_HEADER_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerHeaderFlags\n  //   {\n  //       DISABLE_LIQUIDITY_POOL_TRADING_FLAG = 0x1,\n  //       DISABLE_LIQUIDITY_POOL_DEPOSIT_FLAG = 0x2,\n  //       DISABLE_LIQUIDITY_POOL_WITHDRAWAL_FLAG = 0x4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerHeaderFlags\", {\n    disableLiquidityPoolTradingFlag: 1,\n    disableLiquidityPoolDepositFlag: 2,\n    disableLiquidityPoolWithdrawalFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderExtensionV1\n  //   {\n  //       uint32 flags; // LedgerHeaderFlags\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderExtensionV1\", [[\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"LedgerHeaderExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerHeaderExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeader\n  //   {\n  //       uint32 ledgerVersion;    // the protocol version of the ledger\n  //       Hash previousLedgerHash; // hash of the previous ledger header\n  //       StellarValue scpValue;   // what consensus agreed to\n  //       Hash txSetResultHash;    // the TransactionResultSet that led to this ledger\n  //       Hash bucketListHash;     // hash of the ledger state\n  //\n  //       uint32 ledgerSeq; // sequence number of this ledger\n  //\n  //       int64 totalCoins; // total number of stroops in existence.\n  //                         // 10,000,000 stroops in 1 XLM\n  //\n  //       int64 feePool;       // fees burned since last inflation run\n  //       uint32 inflationSeq; // inflation sequence number\n  //\n  //       uint64 idPool; // last used global ID, used for generating objects\n  //\n  //       uint32 baseFee;     // base fee per operation in stroops\n  //       uint32 baseReserve; // account base reserve in stroops\n  //\n  //       uint32 maxTxSetSize; // maximum size a transaction set can be\n  //\n  //       Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back\n  //                         // in time without walking the chain back ledger by ledger\n  //                         // each slot contains the oldest ledger that is mod of\n  //                         // either 50  5000  50000 or 500000 depending on index\n  //                         // skipList[0] mod(50), skipList[1] mod(5000), etc\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeader\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"scpValue\", xdr.lookup(\"StellarValue\")], [\"txSetResultHash\", xdr.lookup(\"Hash\")], [\"bucketListHash\", xdr.lookup(\"Hash\")], [\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"totalCoins\", xdr.lookup(\"Int64\")], [\"feePool\", xdr.lookup(\"Int64\")], [\"inflationSeq\", xdr.lookup(\"Uint32\")], [\"idPool\", xdr.lookup(\"Uint64\")], [\"baseFee\", xdr.lookup(\"Uint32\")], [\"baseReserve\", xdr.lookup(\"Uint32\")], [\"maxTxSetSize\", xdr.lookup(\"Uint32\")], [\"skipList\", xdr.array(xdr.lookup(\"Hash\"), 4)], [\"ext\", xdr.lookup(\"LedgerHeaderExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerUpgradeType\n  //   {\n  //       LEDGER_UPGRADE_VERSION = 1,\n  //       LEDGER_UPGRADE_BASE_FEE = 2,\n  //       LEDGER_UPGRADE_MAX_TX_SET_SIZE = 3,\n  //       LEDGER_UPGRADE_BASE_RESERVE = 4,\n  //       LEDGER_UPGRADE_FLAGS = 5,\n  //       LEDGER_UPGRADE_CONFIG = 6,\n  //       LEDGER_UPGRADE_MAX_SOROBAN_TX_SET_SIZE = 7\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerUpgradeType\", {\n    ledgerUpgradeVersion: 1,\n    ledgerUpgradeBaseFee: 2,\n    ledgerUpgradeMaxTxSetSize: 3,\n    ledgerUpgradeBaseReserve: 4,\n    ledgerUpgradeFlags: 5,\n    ledgerUpgradeConfig: 6,\n    ledgerUpgradeMaxSorobanTxSetSize: 7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigUpgradeSetKey {\n  //       Hash contractID;\n  //       Hash contentHash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigUpgradeSetKey\", [[\"contractId\", xdr.lookup(\"Hash\")], [\"contentHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerUpgrade switch (LedgerUpgradeType type)\n  //   {\n  //   case LEDGER_UPGRADE_VERSION:\n  //       uint32 newLedgerVersion; // update ledgerVersion\n  //   case LEDGER_UPGRADE_BASE_FEE:\n  //       uint32 newBaseFee; // update baseFee\n  //   case LEDGER_UPGRADE_MAX_TX_SET_SIZE:\n  //       uint32 newMaxTxSetSize; // update maxTxSetSize\n  //   case LEDGER_UPGRADE_BASE_RESERVE:\n  //       uint32 newBaseReserve; // update baseReserve\n  //   case LEDGER_UPGRADE_FLAGS:\n  //       uint32 newFlags; // update flags\n  //   case LEDGER_UPGRADE_CONFIG:\n  //       // Update arbitrary `ConfigSetting` entries identified by the key.\n  //       ConfigUpgradeSetKey newConfig;\n  //   case LEDGER_UPGRADE_MAX_SOROBAN_TX_SET_SIZE:\n  //       // Update ConfigSettingContractExecutionLanesV0.ledgerMaxTxCount without\n  //       // using `LEDGER_UPGRADE_CONFIG`.\n  //       uint32 newMaxSorobanTxSetSize;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerUpgrade\", {\n    switchOn: xdr.lookup(\"LedgerUpgradeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerUpgradeVersion\", \"newLedgerVersion\"], [\"ledgerUpgradeBaseFee\", \"newBaseFee\"], [\"ledgerUpgradeMaxTxSetSize\", \"newMaxTxSetSize\"], [\"ledgerUpgradeBaseReserve\", \"newBaseReserve\"], [\"ledgerUpgradeFlags\", \"newFlags\"], [\"ledgerUpgradeConfig\", \"newConfig\"], [\"ledgerUpgradeMaxSorobanTxSetSize\", \"newMaxSorobanTxSetSize\"]],\n    arms: {\n      newLedgerVersion: xdr.lookup(\"Uint32\"),\n      newBaseFee: xdr.lookup(\"Uint32\"),\n      newMaxTxSetSize: xdr.lookup(\"Uint32\"),\n      newBaseReserve: xdr.lookup(\"Uint32\"),\n      newFlags: xdr.lookup(\"Uint32\"),\n      newConfig: xdr.lookup(\"ConfigUpgradeSetKey\"),\n      newMaxSorobanTxSetSize: xdr.lookup(\"Uint32\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigUpgradeSet {\n  //       ConfigSettingEntry updatedEntry<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigUpgradeSet\", [[\"updatedEntry\", xdr.varArray(xdr.lookup(\"ConfigSettingEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum TxSetComponentType\n  //   {\n  //     // txs with effective fee <= bid derived from a base fee (if any).\n  //     // If base fee is not specified, no discount is applied.\n  //     TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"TxSetComponentType\", {\n    txsetCompTxsMaybeDiscountedFee: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     }\n  //\n  // ===========================================================================\n  xdr.struct(\"TxSetComponentTxsMaybeDiscountedFee\", [[\"baseFee\", xdr.option(xdr.lookup(\"Int64\"))], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TxSetComponent switch (TxSetComponentType type)\n  //   {\n  //   case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:\n  //     struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     } txsMaybeDiscountedFee;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TxSetComponent\", {\n    switchOn: xdr.lookup(\"TxSetComponentType\"),\n    switchName: \"type\",\n    switches: [[\"txsetCompTxsMaybeDiscountedFee\", \"txsMaybeDiscountedFee\"]],\n    arms: {\n      txsMaybeDiscountedFee: xdr.lookup(\"TxSetComponentTxsMaybeDiscountedFee\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionPhase switch (int v)\n  //   {\n  //   case 0:\n  //       TxSetComponent v0Components<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionPhase\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0Components\"]],\n    arms: {\n      v0Components: xdr.varArray(xdr.lookup(\"TxSetComponent\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSet\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionEnvelope txs<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSet\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSetV1\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionPhase phases<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSetV1\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"phases\", xdr.varArray(xdr.lookup(\"TransactionPhase\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union GeneralizedTransactionSet switch (int v)\n  //   {\n  //   // We consider the legacy TransactionSet to be v0.\n  //   case 1:\n  //       TransactionSetV1 v1TxSet;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"GeneralizedTransactionSet\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[1, \"v1TxSet\"]],\n    arms: {\n      v1TxSet: xdr.lookup(\"TransactionSetV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultPair\n  //   {\n  //       Hash transactionHash;\n  //       TransactionResult result; // result for the transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"TransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultSet\n  //   {\n  //       TransactionResultPair results<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultSet\", [[\"results\", xdr.varArray(xdr.lookup(\"TransactionResultPair\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"generalizedTxSet\"]],\n    arms: {\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionSet txSet;\n  //\n  //       // when v != 0, txSet must be empty\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryResultEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryResultEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionResultSet txResultSet;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryResultEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txResultSet\", xdr.lookup(\"TransactionResultSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryResultEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderHistoryEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderHistoryEntry\n  //   {\n  //       Hash hash;\n  //       LedgerHeader header;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderHistoryEntry\", [[\"hash\", xdr.lookup(\"Hash\")], [\"header\", xdr.lookup(\"LedgerHeader\")], [\"ext\", xdr.lookup(\"LedgerHeaderHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerSCPMessages\n  //   {\n  //       uint32 ledgerSeq;\n  //       SCPEnvelope messages<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerScpMessages\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"messages\", xdr.varArray(xdr.lookup(\"ScpEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPHistoryEntryV0\n  //   {\n  //       SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages\n  //       LedgerSCPMessages ledgerMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpHistoryEntryV0\", [[\"quorumSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)], [\"ledgerMessages\", xdr.lookup(\"LedgerScpMessages\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCPHistoryEntry switch (int v)\n  //   {\n  //   case 0:\n  //       SCPHistoryEntryV0 v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScpHistoryEntry\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ScpHistoryEntryV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryChangeType\n  //   {\n  //       LEDGER_ENTRY_CREATED = 0, // entry was added to the ledger\n  //       LEDGER_ENTRY_UPDATED = 1, // entry was modified in the ledger\n  //       LEDGER_ENTRY_REMOVED = 2, // entry was removed from the ledger\n  //       LEDGER_ENTRY_STATE = 3    // value of the entry\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerEntryChangeType\", {\n    ledgerEntryCreated: 0,\n    ledgerEntryUpdated: 1,\n    ledgerEntryRemoved: 2,\n    ledgerEntryState: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerEntryChange switch (LedgerEntryChangeType type)\n  //   {\n  //   case LEDGER_ENTRY_CREATED:\n  //       LedgerEntry created;\n  //   case LEDGER_ENTRY_UPDATED:\n  //       LedgerEntry updated;\n  //   case LEDGER_ENTRY_REMOVED:\n  //       LedgerKey removed;\n  //   case LEDGER_ENTRY_STATE:\n  //       LedgerEntry state;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryChange\", {\n    switchOn: xdr.lookup(\"LedgerEntryChangeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerEntryCreated\", \"created\"], [\"ledgerEntryUpdated\", \"updated\"], [\"ledgerEntryRemoved\", \"removed\"], [\"ledgerEntryState\", \"state\"]],\n    arms: {\n      created: xdr.lookup(\"LedgerEntry\"),\n      updated: xdr.lookup(\"LedgerEntry\"),\n      removed: xdr.lookup(\"LedgerKey\"),\n      state: xdr.lookup(\"LedgerEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef LedgerEntryChange LedgerEntryChanges<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"LedgerEntryChanges\", xdr.varArray(xdr.lookup(\"LedgerEntryChange\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct OperationMeta\n  //   {\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OperationMeta\", [[\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV1\n  //   {\n  //       LedgerEntryChanges txChanges; // tx level changes if any\n  //       OperationMeta operations<>;   // meta for each operation\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV1\", [[\"txChanges\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV2\n  //   {\n  //       LedgerEntryChanges txChangesBefore; // tx level changes before operations\n  //                                           // are applied if any\n  //       OperationMeta operations<>;         // meta for each operation\n  //       LedgerEntryChanges txChangesAfter;  // tx level changes after operations are\n  //                                           // applied if any\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV2\", [[\"txChangesBefore\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)], [\"txChangesAfter\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractEventType\n  //   {\n  //       SYSTEM = 0,\n  //       CONTRACT = 1,\n  //       DIAGNOSTIC = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractEventType\", {\n    system: 0,\n    contract: 1,\n    diagnostic: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCVal topics<>;\n  //               SCVal data;\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractEventV0\", [[\"topics\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647)], [\"data\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           struct\n  //           {\n  //               SCVal topics<>;\n  //               SCVal data;\n  //           } v0;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ContractEventBody\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ContractEventV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractEvent\n  //   {\n  //       // We can use this to add more fields, or because it\n  //       // is first, to change ContractEvent into a union.\n  //       ExtensionPoint ext;\n  //\n  //       Hash* contractID;\n  //       ContractEventType type;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           struct\n  //           {\n  //               SCVal topics<>;\n  //               SCVal data;\n  //           } v0;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractEvent\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"contractId\", xdr.option(xdr.lookup(\"Hash\"))], [\"type\", xdr.lookup(\"ContractEventType\")], [\"body\", xdr.lookup(\"ContractEventBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct DiagnosticEvent\n  //   {\n  //       bool inSuccessfulContractCall;\n  //       ContractEvent event;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DiagnosticEvent\", [[\"inSuccessfulContractCall\", xdr.bool()], [\"event\", xdr.lookup(\"ContractEvent\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef DiagnosticEvent DiagnosticEvents<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"DiagnosticEvents\", xdr.varArray(xdr.lookup(\"DiagnosticEvent\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanTransactionMetaExtV1\n  //   {\n  //       ExtensionPoint ext;\n  //\n  //       // The following are the components of the overall Soroban resource fee\n  //       // charged for the transaction.\n  //       // The following relation holds:\n  //       // `resourceFeeCharged = totalNonRefundableResourceFeeCharged + totalRefundableResourceFeeCharged`\n  //       // where `resourceFeeCharged` is the overall fee charged for the\n  //       // transaction. Also, `resourceFeeCharged` <= `sorobanData.resourceFee`\n  //       // i.e.we never charge more than the declared resource fee.\n  //       // The inclusion fee for charged the Soroban transaction can be found using\n  //       // the following equation:\n  //       // `result.feeCharged = resourceFeeCharged + inclusionFeeCharged`.\n  //\n  //       // Total amount (in stroops) that has been charged for non-refundable\n  //       // Soroban resources.\n  //       // Non-refundable resources are charged based on the usage declared in\n  //       // the transaction envelope (such as `instructions`, `readBytes` etc.) and\n  //       // is charged regardless of the success of the transaction.\n  //       int64 totalNonRefundableResourceFeeCharged;\n  //       // Total amount (in stroops) that has been charged for refundable\n  //       // Soroban resource fees.\n  //       // Currently this comprises the rent fee (`rentFeeCharged`) and the\n  //       // fee for the events and return value.\n  //       // Refundable resources are charged based on the actual resources usage.\n  //       // Since currently refundable resources are only used for the successful\n  //       // transactions, this will be `0` for failed transactions.\n  //       int64 totalRefundableResourceFeeCharged;\n  //       // Amount (in stroops) that has been charged for rent.\n  //       // This is a part of `totalNonRefundableResourceFeeCharged`.\n  //       int64 rentFeeCharged;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanTransactionMetaExtV1\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"totalNonRefundableResourceFeeCharged\", xdr.lookup(\"Int64\")], [\"totalRefundableResourceFeeCharged\", xdr.lookup(\"Int64\")], [\"rentFeeCharged\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SorobanTransactionMetaExt switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   case 1:\n  //       SorobanTransactionMetaExtV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SorobanTransactionMetaExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"SorobanTransactionMetaExtV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanTransactionMeta\n  //   {\n  //       SorobanTransactionMetaExt ext;\n  //\n  //       ContractEvent events<>;             // custom events populated by the\n  //                                           // contracts themselves.\n  //       SCVal returnValue;                  // return value of the host fn invocation\n  //\n  //       // Diagnostics events that are not hashed.\n  //       // This will contain all contract and diagnostic events. Even ones\n  //       // that were emitted in a failed contract call.\n  //       DiagnosticEvent diagnosticEvents<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanTransactionMeta\", [[\"ext\", xdr.lookup(\"SorobanTransactionMetaExt\")], [\"events\", xdr.varArray(xdr.lookup(\"ContractEvent\"), 2147483647)], [\"returnValue\", xdr.lookup(\"ScVal\")], [\"diagnosticEvents\", xdr.varArray(xdr.lookup(\"DiagnosticEvent\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV3\n  //   {\n  //       ExtensionPoint ext;\n  //\n  //       LedgerEntryChanges txChangesBefore;  // tx level changes before operations\n  //                                            // are applied if any\n  //       OperationMeta operations<>;          // meta for each operation\n  //       LedgerEntryChanges txChangesAfter;   // tx level changes after operations are\n  //                                            // applied if any\n  //       SorobanTransactionMeta* sorobanMeta; // Soroban-specific meta (only for\n  //                                            // Soroban transactions).\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV3\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"txChangesBefore\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)], [\"txChangesAfter\", xdr.lookup(\"LedgerEntryChanges\")], [\"sorobanMeta\", xdr.option(xdr.lookup(\"SorobanTransactionMeta\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InvokeHostFunctionSuccessPreImage\n  //   {\n  //       SCVal returnValue;\n  //       ContractEvent events<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InvokeHostFunctionSuccessPreImage\", [[\"returnValue\", xdr.lookup(\"ScVal\")], [\"events\", xdr.varArray(xdr.lookup(\"ContractEvent\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionMeta switch (int v)\n  //   {\n  //   case 0:\n  //       OperationMeta operations<>;\n  //   case 1:\n  //       TransactionMetaV1 v1;\n  //   case 2:\n  //       TransactionMetaV2 v2;\n  //   case 3:\n  //       TransactionMetaV3 v3;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionMeta\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"operations\"], [1, \"v1\"], [2, \"v2\"], [3, \"v3\"]],\n    arms: {\n      operations: xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647),\n      v1: xdr.lookup(\"TransactionMetaV1\"),\n      v2: xdr.lookup(\"TransactionMetaV2\"),\n      v3: xdr.lookup(\"TransactionMetaV3\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultMeta\n  //   {\n  //       TransactionResultPair result;\n  //       LedgerEntryChanges feeProcessing;\n  //       TransactionMeta txApplyProcessing;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultMeta\", [[\"result\", xdr.lookup(\"TransactionResultPair\")], [\"feeProcessing\", xdr.lookup(\"LedgerEntryChanges\")], [\"txApplyProcessing\", xdr.lookup(\"TransactionMeta\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct UpgradeEntryMeta\n  //   {\n  //       LedgerUpgrade upgrade;\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UpgradeEntryMeta\", [[\"upgrade\", xdr.lookup(\"LedgerUpgrade\")], [\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV0\n  //   {\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //       // NB: txSet is sorted in \"Hash order\"\n  //       TransactionSet txSet;\n  //\n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //\n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //\n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV0\", [[\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaExtV1\n  //   {\n  //       ExtensionPoint ext;\n  //       int64 sorobanFeeWrite1KB;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaExtV1\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"sorobanFeeWrite1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerCloseMetaExt switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   case 1:\n  //       LedgerCloseMetaExtV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerCloseMetaExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerCloseMetaExtV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV1\n  //   {\n  //       LedgerCloseMetaExt ext;\n  //\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //\n  //       GeneralizedTransactionSet txSet;\n  //\n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //\n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //\n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //\n  //       // Size in bytes of BucketList, to support downstream\n  //       // systems calculating storage fees correctly.\n  //       uint64 totalByteSizeOfBucketList;\n  //\n  //       // Temp keys that are being evicted at this ledger.\n  //       LedgerKey evictedTemporaryLedgerKeys<>;\n  //\n  //       // Archived restorable ledger entries that are being\n  //       // evicted at this ledger.\n  //       LedgerEntry evictedPersistentLedgerEntries<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV1\", [[\"ext\", xdr.lookup(\"LedgerCloseMetaExt\")], [\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"GeneralizedTransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)], [\"totalByteSizeOfBucketList\", xdr.lookup(\"Uint64\")], [\"evictedTemporaryLedgerKeys\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)], [\"evictedPersistentLedgerEntries\", xdr.varArray(xdr.lookup(\"LedgerEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerCloseMeta switch (int v)\n  //   {\n  //   case 0:\n  //       LedgerCloseMetaV0 v0;\n  //   case 1:\n  //       LedgerCloseMetaV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerCloseMeta\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0\"], [1, \"v1\"]],\n    arms: {\n      v0: xdr.lookup(\"LedgerCloseMetaV0\"),\n      v1: xdr.lookup(\"LedgerCloseMetaV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ErrorCode\n  //   {\n  //       ERR_MISC = 0, // Unspecific error\n  //       ERR_DATA = 1, // Malformed data\n  //       ERR_CONF = 2, // Misconfiguration error\n  //       ERR_AUTH = 3, // Authentication failure\n  //       ERR_LOAD = 4  // System overloaded\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ErrorCode\", {\n    errMisc: 0,\n    errData: 1,\n    errConf: 2,\n    errAuth: 3,\n    errLoad: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Error\n  //   {\n  //       ErrorCode code;\n  //       string msg<100>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Error\", [[\"code\", xdr.lookup(\"ErrorCode\")], [\"msg\", xdr.string(100)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SendMore\n  //   {\n  //       uint32 numMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SendMore\", [[\"numMessages\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SendMoreExtended\n  //   {\n  //       uint32 numMessages;\n  //       uint32 numBytes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SendMoreExtended\", [[\"numMessages\", xdr.lookup(\"Uint32\")], [\"numBytes\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AuthCert\n  //   {\n  //       Curve25519Public pubkey;\n  //       uint64 expiration;\n  //       Signature sig;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthCert\", [[\"pubkey\", xdr.lookup(\"Curve25519Public\")], [\"expiration\", xdr.lookup(\"Uint64\")], [\"sig\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Hello\n  //   {\n  //       uint32 ledgerVersion;\n  //       uint32 overlayVersion;\n  //       uint32 overlayMinVersion;\n  //       Hash networkID;\n  //       string versionStr<100>;\n  //       int listeningPort;\n  //       NodeID peerID;\n  //       AuthCert cert;\n  //       uint256 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Hello\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"overlayVersion\", xdr.lookup(\"Uint32\")], [\"overlayMinVersion\", xdr.lookup(\"Uint32\")], [\"networkId\", xdr.lookup(\"Hash\")], [\"versionStr\", xdr.string(100)], [\"listeningPort\", xdr[\"int\"]()], [\"peerId\", xdr.lookup(\"NodeId\")], [\"cert\", xdr.lookup(\"AuthCert\")], [\"nonce\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const AUTH_MSG_FLAG_FLOW_CONTROL_BYTES_REQUESTED = 200;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"AUTH_MSG_FLAG_FLOW_CONTROL_BYTES_REQUESTED\", 200);\n\n  // === xdr source ============================================================\n  //\n  //   struct Auth\n  //   {\n  //       int flags;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Auth\", [[\"flags\", xdr[\"int\"]()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum IPAddrType\n  //   {\n  //       IPv4 = 0,\n  //       IPv6 = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"IpAddrType\", {\n    iPv4: 0,\n    iPv6: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"PeerAddressIp\", {\n    switchOn: xdr.lookup(\"IpAddrType\"),\n    switchName: \"type\",\n    switches: [[\"iPv4\", \"ipv4\"], [\"iPv6\", \"ipv6\"]],\n    arms: {\n      ipv4: xdr.opaque(4),\n      ipv6: xdr.opaque(16)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerAddress\n  //   {\n  //       union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //       ip;\n  //       uint32 port;\n  //       uint32 numFailures;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerAddress\", [[\"ip\", xdr.lookup(\"PeerAddressIp\")], [\"port\", xdr.lookup(\"Uint32\")], [\"numFailures\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum MessageType\n  //   {\n  //       ERROR_MSG = 0,\n  //       AUTH = 2,\n  //       DONT_HAVE = 3,\n  //\n  //       GET_PEERS = 4, // gets a list of peers this guy knows about\n  //       PEERS = 5,\n  //\n  //       GET_TX_SET = 6, // gets a particular txset by hash\n  //       TX_SET = 7,\n  //       GENERALIZED_TX_SET = 17,\n  //\n  //       TRANSACTION = 8, // pass on a tx you have heard about\n  //\n  //       // SCP\n  //       GET_SCP_QUORUMSET = 9,\n  //       SCP_QUORUMSET = 10,\n  //       SCP_MESSAGE = 11,\n  //       GET_SCP_STATE = 12,\n  //\n  //       // new messages\n  //       HELLO = 13,\n  //\n  //       SURVEY_REQUEST = 14,\n  //       SURVEY_RESPONSE = 15,\n  //\n  //       SEND_MORE = 16,\n  //       SEND_MORE_EXTENDED = 20,\n  //\n  //       FLOOD_ADVERT = 18,\n  //       FLOOD_DEMAND = 19,\n  //\n  //       TIME_SLICED_SURVEY_REQUEST = 21,\n  //       TIME_SLICED_SURVEY_RESPONSE = 22,\n  //       TIME_SLICED_SURVEY_START_COLLECTING = 23,\n  //       TIME_SLICED_SURVEY_STOP_COLLECTING = 24\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"MessageType\", {\n    errorMsg: 0,\n    auth: 2,\n    dontHave: 3,\n    getPeers: 4,\n    peers: 5,\n    getTxSet: 6,\n    txSet: 7,\n    generalizedTxSet: 17,\n    transaction: 8,\n    getScpQuorumset: 9,\n    scpQuorumset: 10,\n    scpMessage: 11,\n    getScpState: 12,\n    hello: 13,\n    surveyRequest: 14,\n    surveyResponse: 15,\n    sendMore: 16,\n    sendMoreExtended: 20,\n    floodAdvert: 18,\n    floodDemand: 19,\n    timeSlicedSurveyRequest: 21,\n    timeSlicedSurveyResponse: 22,\n    timeSlicedSurveyStartCollecting: 23,\n    timeSlicedSurveyStopCollecting: 24\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DontHave\n  //   {\n  //       MessageType type;\n  //       uint256 reqHash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DontHave\", [[\"type\", xdr.lookup(\"MessageType\")], [\"reqHash\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SurveyMessageCommandType\n  //   {\n  //       SURVEY_TOPOLOGY = 0,\n  //       TIME_SLICED_SURVEY_TOPOLOGY = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SurveyMessageCommandType\", {\n    surveyTopology: 0,\n    timeSlicedSurveyTopology: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SurveyMessageResponseType\n  //   {\n  //       SURVEY_TOPOLOGY_RESPONSE_V0 = 0,\n  //       SURVEY_TOPOLOGY_RESPONSE_V1 = 1,\n  //       SURVEY_TOPOLOGY_RESPONSE_V2 = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SurveyMessageResponseType\", {\n    surveyTopologyResponseV0: 0,\n    surveyTopologyResponseV1: 1,\n    surveyTopologyResponseV2: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyStartCollectingMessage\n  //   {\n  //       NodeID surveyorID;\n  //       uint32 nonce;\n  //       uint32 ledgerNum;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyStartCollectingMessage\", [[\"surveyorId\", xdr.lookup(\"NodeId\")], [\"nonce\", xdr.lookup(\"Uint32\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyStartCollectingMessage\n  //   {\n  //       Signature signature;\n  //       TimeSlicedSurveyStartCollectingMessage startCollecting;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyStartCollectingMessage\", [[\"signature\", xdr.lookup(\"Signature\")], [\"startCollecting\", xdr.lookup(\"TimeSlicedSurveyStartCollectingMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyStopCollectingMessage\n  //   {\n  //       NodeID surveyorID;\n  //       uint32 nonce;\n  //       uint32 ledgerNum;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyStopCollectingMessage\", [[\"surveyorId\", xdr.lookup(\"NodeId\")], [\"nonce\", xdr.lookup(\"Uint32\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyStopCollectingMessage\n  //   {\n  //       Signature signature;\n  //       TimeSlicedSurveyStopCollectingMessage stopCollecting;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyStopCollectingMessage\", [[\"signature\", xdr.lookup(\"Signature\")], [\"stopCollecting\", xdr.lookup(\"TimeSlicedSurveyStopCollectingMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyRequestMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       Curve25519Public encryptionKey;\n  //       SurveyMessageCommandType commandType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyRequestMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"encryptionKey\", xdr.lookup(\"Curve25519Public\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyRequestMessage\n  //   {\n  //       SurveyRequestMessage request;\n  //       uint32 nonce;\n  //       uint32 inboundPeersIndex;\n  //       uint32 outboundPeersIndex;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyRequestMessage\", [[\"request\", xdr.lookup(\"SurveyRequestMessage\")], [\"nonce\", xdr.lookup(\"Uint32\")], [\"inboundPeersIndex\", xdr.lookup(\"Uint32\")], [\"outboundPeersIndex\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyRequestMessage\n  //   {\n  //       Signature requestSignature;\n  //       SurveyRequestMessage request;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyRequestMessage\", [[\"requestSignature\", xdr.lookup(\"Signature\")], [\"request\", xdr.lookup(\"SurveyRequestMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyRequestMessage\n  //   {\n  //       Signature requestSignature;\n  //       TimeSlicedSurveyRequestMessage request;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyRequestMessage\", [[\"requestSignature\", xdr.lookup(\"Signature\")], [\"request\", xdr.lookup(\"TimeSlicedSurveyRequestMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque EncryptedBody<64000>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"EncryptedBody\", xdr.varOpaque(64000));\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyResponseMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       SurveyMessageCommandType commandType;\n  //       EncryptedBody encryptedBody;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyResponseMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")], [\"encryptedBody\", xdr.lookup(\"EncryptedBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyResponseMessage\n  //   {\n  //       SurveyResponseMessage response;\n  //       uint32 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyResponseMessage\", [[\"response\", xdr.lookup(\"SurveyResponseMessage\")], [\"nonce\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyResponseMessage\n  //   {\n  //       Signature responseSignature;\n  //       SurveyResponseMessage response;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyResponseMessage\", [[\"responseSignature\", xdr.lookup(\"Signature\")], [\"response\", xdr.lookup(\"SurveyResponseMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyResponseMessage\n  //   {\n  //       Signature responseSignature;\n  //       TimeSlicedSurveyResponseMessage response;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyResponseMessage\", [[\"responseSignature\", xdr.lookup(\"Signature\")], [\"response\", xdr.lookup(\"TimeSlicedSurveyResponseMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerStats\n  //   {\n  //       NodeID id;\n  //       string versionStr<100>;\n  //       uint64 messagesRead;\n  //       uint64 messagesWritten;\n  //       uint64 bytesRead;\n  //       uint64 bytesWritten;\n  //       uint64 secondsConnected;\n  //\n  //       uint64 uniqueFloodBytesRecv;\n  //       uint64 duplicateFloodBytesRecv;\n  //       uint64 uniqueFetchBytesRecv;\n  //       uint64 duplicateFetchBytesRecv;\n  //\n  //       uint64 uniqueFloodMessageRecv;\n  //       uint64 duplicateFloodMessageRecv;\n  //       uint64 uniqueFetchMessageRecv;\n  //       uint64 duplicateFetchMessageRecv;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerStats\", [[\"id\", xdr.lookup(\"NodeId\")], [\"versionStr\", xdr.string(100)], [\"messagesRead\", xdr.lookup(\"Uint64\")], [\"messagesWritten\", xdr.lookup(\"Uint64\")], [\"bytesRead\", xdr.lookup(\"Uint64\")], [\"bytesWritten\", xdr.lookup(\"Uint64\")], [\"secondsConnected\", xdr.lookup(\"Uint64\")], [\"uniqueFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchMessageRecv\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef PeerStats PeerStatList<25>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PeerStatList\", xdr.varArray(xdr.lookup(\"PeerStats\"), 25));\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedNodeData\n  //   {\n  //       uint32 addedAuthenticatedPeers;\n  //       uint32 droppedAuthenticatedPeers;\n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //\n  //       // SCP stats\n  //       uint32 p75SCPFirstToSelfLatencyMs;\n  //       uint32 p75SCPSelfToOtherLatencyMs;\n  //\n  //       // How many times the node lost sync in the time slice\n  //       uint32 lostSyncCount;\n  //\n  //       // Config data\n  //       bool isValidator;\n  //       uint32 maxInboundPeerCount;\n  //       uint32 maxOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedNodeData\", [[\"addedAuthenticatedPeers\", xdr.lookup(\"Uint32\")], [\"droppedAuthenticatedPeers\", xdr.lookup(\"Uint32\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")], [\"p75ScpFirstToSelfLatencyMs\", xdr.lookup(\"Uint32\")], [\"p75ScpSelfToOtherLatencyMs\", xdr.lookup(\"Uint32\")], [\"lostSyncCount\", xdr.lookup(\"Uint32\")], [\"isValidator\", xdr.bool()], [\"maxInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"maxOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedPeerData\n  //   {\n  //       PeerStats peerStats;\n  //       uint32 averageLatencyMs;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedPeerData\", [[\"peerStats\", xdr.lookup(\"PeerStats\")], [\"averageLatencyMs\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef TimeSlicedPeerData TimeSlicedPeerDataList<25>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TimeSlicedPeerDataList\", xdr.varArray(xdr.lookup(\"TimeSlicedPeerData\"), 25));\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBodyV0\n  //   {\n  //       PeerStatList inboundPeers;\n  //       PeerStatList outboundPeers;\n  //\n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBodyV0\", [[\"inboundPeers\", xdr.lookup(\"PeerStatList\")], [\"outboundPeers\", xdr.lookup(\"PeerStatList\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBodyV1\n  //   {\n  //       PeerStatList inboundPeers;\n  //       PeerStatList outboundPeers;\n  //\n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //\n  //       uint32 maxInboundPeerCount;\n  //       uint32 maxOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBodyV1\", [[\"inboundPeers\", xdr.lookup(\"PeerStatList\")], [\"outboundPeers\", xdr.lookup(\"PeerStatList\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")], [\"maxInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"maxOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBodyV2\n  //   {\n  //       TimeSlicedPeerDataList inboundPeers;\n  //       TimeSlicedPeerDataList outboundPeers;\n  //       TimeSlicedNodeData nodeData;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBodyV2\", [[\"inboundPeers\", xdr.lookup(\"TimeSlicedPeerDataList\")], [\"outboundPeers\", xdr.lookup(\"TimeSlicedPeerDataList\")], [\"nodeData\", xdr.lookup(\"TimeSlicedNodeData\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SurveyResponseBody switch (SurveyMessageResponseType type)\n  //   {\n  //   case SURVEY_TOPOLOGY_RESPONSE_V0:\n  //       TopologyResponseBodyV0 topologyResponseBodyV0;\n  //   case SURVEY_TOPOLOGY_RESPONSE_V1:\n  //       TopologyResponseBodyV1 topologyResponseBodyV1;\n  //   case SURVEY_TOPOLOGY_RESPONSE_V2:\n  //       TopologyResponseBodyV2 topologyResponseBodyV2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SurveyResponseBody\", {\n    switchOn: xdr.lookup(\"SurveyMessageResponseType\"),\n    switchName: \"type\",\n    switches: [[\"surveyTopologyResponseV0\", \"topologyResponseBodyV0\"], [\"surveyTopologyResponseV1\", \"topologyResponseBodyV1\"], [\"surveyTopologyResponseV2\", \"topologyResponseBodyV2\"]],\n    arms: {\n      topologyResponseBodyV0: xdr.lookup(\"TopologyResponseBodyV0\"),\n      topologyResponseBodyV1: xdr.lookup(\"TopologyResponseBodyV1\"),\n      topologyResponseBodyV2: xdr.lookup(\"TopologyResponseBodyV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const TX_ADVERT_VECTOR_MAX_SIZE = 1000;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"TX_ADVERT_VECTOR_MAX_SIZE\", 1000);\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash TxAdvertVector<TX_ADVERT_VECTOR_MAX_SIZE>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TxAdvertVector\", xdr.varArray(xdr.lookup(\"Hash\"), xdr.lookup(\"TX_ADVERT_VECTOR_MAX_SIZE\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct FloodAdvert\n  //   {\n  //       TxAdvertVector txHashes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FloodAdvert\", [[\"txHashes\", xdr.lookup(\"TxAdvertVector\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const TX_DEMAND_VECTOR_MAX_SIZE = 1000;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"TX_DEMAND_VECTOR_MAX_SIZE\", 1000);\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash TxDemandVector<TX_DEMAND_VECTOR_MAX_SIZE>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TxDemandVector\", xdr.varArray(xdr.lookup(\"Hash\"), xdr.lookup(\"TX_DEMAND_VECTOR_MAX_SIZE\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct FloodDemand\n  //   {\n  //       TxDemandVector txHashes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FloodDemand\", [[\"txHashes\", xdr.lookup(\"TxDemandVector\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union StellarMessage switch (MessageType type)\n  //   {\n  //   case ERROR_MSG:\n  //       Error error;\n  //   case HELLO:\n  //       Hello hello;\n  //   case AUTH:\n  //       Auth auth;\n  //   case DONT_HAVE:\n  //       DontHave dontHave;\n  //   case GET_PEERS:\n  //       void;\n  //   case PEERS:\n  //       PeerAddress peers<100>;\n  //\n  //   case GET_TX_SET:\n  //       uint256 txSetHash;\n  //   case TX_SET:\n  //       TransactionSet txSet;\n  //   case GENERALIZED_TX_SET:\n  //       GeneralizedTransactionSet generalizedTxSet;\n  //\n  //   case TRANSACTION:\n  //       TransactionEnvelope transaction;\n  //\n  //   case SURVEY_REQUEST:\n  //       SignedSurveyRequestMessage signedSurveyRequestMessage;\n  //\n  //   case SURVEY_RESPONSE:\n  //       SignedSurveyResponseMessage signedSurveyResponseMessage;\n  //\n  //   case TIME_SLICED_SURVEY_REQUEST:\n  //       SignedTimeSlicedSurveyRequestMessage signedTimeSlicedSurveyRequestMessage;\n  //\n  //   case TIME_SLICED_SURVEY_RESPONSE:\n  //       SignedTimeSlicedSurveyResponseMessage signedTimeSlicedSurveyResponseMessage;\n  //\n  //   case TIME_SLICED_SURVEY_START_COLLECTING:\n  //       SignedTimeSlicedSurveyStartCollectingMessage\n  //           signedTimeSlicedSurveyStartCollectingMessage;\n  //\n  //   case TIME_SLICED_SURVEY_STOP_COLLECTING:\n  //       SignedTimeSlicedSurveyStopCollectingMessage\n  //           signedTimeSlicedSurveyStopCollectingMessage;\n  //\n  //   // SCP\n  //   case GET_SCP_QUORUMSET:\n  //       uint256 qSetHash;\n  //   case SCP_QUORUMSET:\n  //       SCPQuorumSet qSet;\n  //   case SCP_MESSAGE:\n  //       SCPEnvelope envelope;\n  //   case GET_SCP_STATE:\n  //       uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest\n  //   case SEND_MORE:\n  //       SendMore sendMoreMessage;\n  //   case SEND_MORE_EXTENDED:\n  //       SendMoreExtended sendMoreExtendedMessage;\n  //   // Pull mode\n  //   case FLOOD_ADVERT:\n  //        FloodAdvert floodAdvert;\n  //   case FLOOD_DEMAND:\n  //        FloodDemand floodDemand;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"StellarMessage\", {\n    switchOn: xdr.lookup(\"MessageType\"),\n    switchName: \"type\",\n    switches: [[\"errorMsg\", \"error\"], [\"hello\", \"hello\"], [\"auth\", \"auth\"], [\"dontHave\", \"dontHave\"], [\"getPeers\", xdr[\"void\"]()], [\"peers\", \"peers\"], [\"getTxSet\", \"txSetHash\"], [\"txSet\", \"txSet\"], [\"generalizedTxSet\", \"generalizedTxSet\"], [\"transaction\", \"transaction\"], [\"surveyRequest\", \"signedSurveyRequestMessage\"], [\"surveyResponse\", \"signedSurveyResponseMessage\"], [\"timeSlicedSurveyRequest\", \"signedTimeSlicedSurveyRequestMessage\"], [\"timeSlicedSurveyResponse\", \"signedTimeSlicedSurveyResponseMessage\"], [\"timeSlicedSurveyStartCollecting\", \"signedTimeSlicedSurveyStartCollectingMessage\"], [\"timeSlicedSurveyStopCollecting\", \"signedTimeSlicedSurveyStopCollectingMessage\"], [\"getScpQuorumset\", \"qSetHash\"], [\"scpQuorumset\", \"qSet\"], [\"scpMessage\", \"envelope\"], [\"getScpState\", \"getScpLedgerSeq\"], [\"sendMore\", \"sendMoreMessage\"], [\"sendMoreExtended\", \"sendMoreExtendedMessage\"], [\"floodAdvert\", \"floodAdvert\"], [\"floodDemand\", \"floodDemand\"]],\n    arms: {\n      error: xdr.lookup(\"Error\"),\n      hello: xdr.lookup(\"Hello\"),\n      auth: xdr.lookup(\"Auth\"),\n      dontHave: xdr.lookup(\"DontHave\"),\n      peers: xdr.varArray(xdr.lookup(\"PeerAddress\"), 100),\n      txSetHash: xdr.lookup(\"Uint256\"),\n      txSet: xdr.lookup(\"TransactionSet\"),\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\"),\n      transaction: xdr.lookup(\"TransactionEnvelope\"),\n      signedSurveyRequestMessage: xdr.lookup(\"SignedSurveyRequestMessage\"),\n      signedSurveyResponseMessage: xdr.lookup(\"SignedSurveyResponseMessage\"),\n      signedTimeSlicedSurveyRequestMessage: xdr.lookup(\"SignedTimeSlicedSurveyRequestMessage\"),\n      signedTimeSlicedSurveyResponseMessage: xdr.lookup(\"SignedTimeSlicedSurveyResponseMessage\"),\n      signedTimeSlicedSurveyStartCollectingMessage: xdr.lookup(\"SignedTimeSlicedSurveyStartCollectingMessage\"),\n      signedTimeSlicedSurveyStopCollectingMessage: xdr.lookup(\"SignedTimeSlicedSurveyStopCollectingMessage\"),\n      qSetHash: xdr.lookup(\"Uint256\"),\n      qSet: xdr.lookup(\"ScpQuorumSet\"),\n      envelope: xdr.lookup(\"ScpEnvelope\"),\n      getScpLedgerSeq: xdr.lookup(\"Uint32\"),\n      sendMoreMessage: xdr.lookup(\"SendMore\"),\n      sendMoreExtendedMessage: xdr.lookup(\"SendMoreExtended\"),\n      floodAdvert: xdr.lookup(\"FloodAdvert\"),\n      floodDemand: xdr.lookup(\"FloodDemand\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthenticatedMessageV0\", [[\"sequence\", xdr.lookup(\"Uint64\")], [\"message\", xdr.lookup(\"StellarMessage\")], [\"mac\", xdr.lookup(\"HmacSha256Mac\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union AuthenticatedMessage switch (uint32 v)\n  //   {\n  //   case 0:\n  //       struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AuthenticatedMessage\", {\n    switchOn: xdr.lookup(\"Uint32\"),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"AuthenticatedMessageV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_OPS_PER_TX = 100;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MAX_OPS_PER_TX\", 100);\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolParameters switch (LiquidityPoolType type)\n  //   {\n  //   case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //       LiquidityPoolConstantProductParameters constantProduct;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolParameters\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolConstantProductParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"MuxedAccountMed25519\", [[\"id\", xdr.lookup(\"Uint64\")], [\"ed25519\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union MuxedAccount switch (CryptoKeyType type)\n  //   {\n  //   case KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case KEY_TYPE_MUXED_ED25519:\n  //       struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       } med25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"MuxedAccount\", {\n    switchOn: xdr.lookup(\"CryptoKeyType\"),\n    switchName: \"type\",\n    switches: [[\"keyTypeEd25519\", \"ed25519\"], [\"keyTypeMuxedEd25519\", \"med25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      med25519: xdr.lookup(\"MuxedAccountMed25519\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DecoratedSignature\n  //   {\n  //       SignatureHint hint;  // last 4 bytes of the public key, used as a hint\n  //       Signature signature; // actual signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DecoratedSignature\", [[\"hint\", xdr.lookup(\"SignatureHint\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationType\n  //   {\n  //       CREATE_ACCOUNT = 0,\n  //       PAYMENT = 1,\n  //       PATH_PAYMENT_STRICT_RECEIVE = 2,\n  //       MANAGE_SELL_OFFER = 3,\n  //       CREATE_PASSIVE_SELL_OFFER = 4,\n  //       SET_OPTIONS = 5,\n  //       CHANGE_TRUST = 6,\n  //       ALLOW_TRUST = 7,\n  //       ACCOUNT_MERGE = 8,\n  //       INFLATION = 9,\n  //       MANAGE_DATA = 10,\n  //       BUMP_SEQUENCE = 11,\n  //       MANAGE_BUY_OFFER = 12,\n  //       PATH_PAYMENT_STRICT_SEND = 13,\n  //       CREATE_CLAIMABLE_BALANCE = 14,\n  //       CLAIM_CLAIMABLE_BALANCE = 15,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES = 16,\n  //       END_SPONSORING_FUTURE_RESERVES = 17,\n  //       REVOKE_SPONSORSHIP = 18,\n  //       CLAWBACK = 19,\n  //       CLAWBACK_CLAIMABLE_BALANCE = 20,\n  //       SET_TRUST_LINE_FLAGS = 21,\n  //       LIQUIDITY_POOL_DEPOSIT = 22,\n  //       LIQUIDITY_POOL_WITHDRAW = 23,\n  //       INVOKE_HOST_FUNCTION = 24,\n  //       EXTEND_FOOTPRINT_TTL = 25,\n  //       RESTORE_FOOTPRINT = 26\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"OperationType\", {\n    createAccount: 0,\n    payment: 1,\n    pathPaymentStrictReceive: 2,\n    manageSellOffer: 3,\n    createPassiveSellOffer: 4,\n    setOptions: 5,\n    changeTrust: 6,\n    allowTrust: 7,\n    accountMerge: 8,\n    inflation: 9,\n    manageData: 10,\n    bumpSequence: 11,\n    manageBuyOffer: 12,\n    pathPaymentStrictSend: 13,\n    createClaimableBalance: 14,\n    claimClaimableBalance: 15,\n    beginSponsoringFutureReserves: 16,\n    endSponsoringFutureReserves: 17,\n    revokeSponsorship: 18,\n    clawback: 19,\n    clawbackClaimableBalance: 20,\n    setTrustLineFlags: 21,\n    liquidityPoolDeposit: 22,\n    liquidityPoolWithdraw: 23,\n    invokeHostFunction: 24,\n    extendFootprintTtl: 25,\n    restoreFootprint: 26\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateAccountOp\n  //   {\n  //       AccountID destination; // account to create\n  //       int64 startingBalance; // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateAccountOp\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"startingBalance\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PaymentOp\n  //   {\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset asset;              // what they end up with\n  //       int64 amount;             // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PaymentOp\", [[\"destination\", xdr.lookup(\"MuxedAccount\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictReceiveOp\n  //   {\n  //       Asset sendAsset; // asset we pay with\n  //       int64 sendMax;   // the maximum amount of sendAsset to\n  //                        // send (excluding fees).\n  //                        // The operation will fail if can't be met\n  //\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destAmount;         // amount they end up with\n  //\n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendMax\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destAmount\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictSendOp\n  //   {\n  //       Asset sendAsset;  // asset we pay with\n  //       int64 sendAmount; // amount of sendAsset to send (excluding fees)\n  //\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destMin;            // the minimum amount of dest asset to\n  //                                 // be received\n  //                                 // The operation will fail if it can't be met\n  //\n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendAmount\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destMin\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageSellOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 amount; // amount being sold. if set to 0, delete the offer\n  //       Price price;  // price of thing being sold in terms of what you are buying\n  //\n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageBuyOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 buyAmount; // amount being bought. if set to 0, delete the offer\n  //       Price price;     // price of thing being bought in terms of what you are\n  //                        // selling\n  //\n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageBuyOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"buyAmount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreatePassiveSellOfferOp\n  //   {\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount taker gets\n  //       Price price;   // cost of A in terms of B\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreatePassiveSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetOptionsOp\n  //   {\n  //       AccountID* inflationDest; // sets the inflation destination\n  //\n  //       uint32* clearFlags; // which flags to clear\n  //       uint32* setFlags;   // which flags to set\n  //\n  //       // account threshold manipulation\n  //       uint32* masterWeight; // weight of the master account\n  //       uint32* lowThreshold;\n  //       uint32* medThreshold;\n  //       uint32* highThreshold;\n  //\n  //       string32* homeDomain; // sets the home domain\n  //\n  //       // Add, update or remove a signer for the account\n  //       // signer is deleted if the weight is 0\n  //       Signer* signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetOptionsOp\", [[\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"clearFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"setFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"masterWeight\", xdr.option(xdr.lookup(\"Uint32\"))], [\"lowThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"medThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"highThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"homeDomain\", xdr.option(xdr.lookup(\"String32\"))], [\"signer\", xdr.option(xdr.lookup(\"Signer\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //\n  //   case ASSET_TYPE_POOL_SHARE:\n  //       LiquidityPoolParameters liquidityPool;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr[\"void\"]()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPool\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ChangeTrustOp\n  //   {\n  //       ChangeTrustAsset line;\n  //\n  //       // if limit is set to 0, deletes the trust line\n  //       int64 limit;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ChangeTrustOp\", [[\"line\", xdr.lookup(\"ChangeTrustAsset\")], [\"limit\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AllowTrustOp\n  //   {\n  //       AccountID trustor;\n  //       AssetCode asset;\n  //\n  //       // One of 0, AUTHORIZED_FLAG, or AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG\n  //       uint32 authorize;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AllowTrustOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"AssetCode\")], [\"authorize\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageDataOp\n  //   {\n  //       string64 dataName;\n  //       DataValue* dataValue; // set to null to clear\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageDataOp\", [[\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.option(xdr.lookup(\"DataValue\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BumpSequenceOp\n  //   {\n  //       SequenceNumber bumpTo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BumpSequenceOp\", [[\"bumpTo\", xdr.lookup(\"SequenceNumber\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateClaimableBalanceOp\n  //   {\n  //       Asset asset;\n  //       int64 amount;\n  //       Claimant claimants<10>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateClaimableBalanceOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BeginSponsoringFutureReservesOp\n  //   {\n  //       AccountID sponsoredID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BeginSponsoringFutureReservesOp\", [[\"sponsoredId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipType\n  //   {\n  //       REVOKE_SPONSORSHIP_LEDGER_ENTRY = 0,\n  //       REVOKE_SPONSORSHIP_SIGNER = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"RevokeSponsorshipType\", {\n    revokeSponsorshipLedgerEntry: 0,\n    revokeSponsorshipSigner: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"RevokeSponsorshipOpSigner\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"signerKey\", xdr.lookup(\"SignerKey\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipOp switch (RevokeSponsorshipType type)\n  //   {\n  //   case REVOKE_SPONSORSHIP_LEDGER_ENTRY:\n  //       LedgerKey ledgerKey;\n  //   case REVOKE_SPONSORSHIP_SIGNER:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       } signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipOp\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipType\"),\n    switchName: \"type\",\n    switches: [[\"revokeSponsorshipLedgerEntry\", \"ledgerKey\"], [\"revokeSponsorshipSigner\", \"signer\"]],\n    arms: {\n      ledgerKey: xdr.lookup(\"LedgerKey\"),\n      signer: xdr.lookup(\"RevokeSponsorshipOpSigner\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackOp\n  //   {\n  //       Asset asset;\n  //       MuxedAccount from;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"from\", xdr.lookup(\"MuxedAccount\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetTrustLineFlagsOp\n  //   {\n  //       AccountID trustor;\n  //       Asset asset;\n  //\n  //       uint32 clearFlags; // which flags to clear\n  //       uint32 setFlags;   // which flags to set\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetTrustLineFlagsOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"clearFlags\", xdr.lookup(\"Uint32\")], [\"setFlags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const LIQUIDITY_POOL_FEE_V18 = 30;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"LIQUIDITY_POOL_FEE_V18\", 30);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolDepositOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 maxAmountA; // maximum amount of first asset to deposit\n  //       int64 maxAmountB; // maximum amount of second asset to deposit\n  //       Price minPrice;   // minimum depositA/depositB\n  //       Price maxPrice;   // maximum depositA/depositB\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolDepositOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"maxAmountA\", xdr.lookup(\"Int64\")], [\"maxAmountB\", xdr.lookup(\"Int64\")], [\"minPrice\", xdr.lookup(\"Price\")], [\"maxPrice\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolWithdrawOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 amount;     // amount of pool shares to withdraw\n  //       int64 minAmountA; // minimum amount of first asset to withdraw\n  //       int64 minAmountB; // minimum amount of second asset to withdraw\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolWithdrawOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"amount\", xdr.lookup(\"Int64\")], [\"minAmountA\", xdr.lookup(\"Int64\")], [\"minAmountB\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum HostFunctionType\n  //   {\n  //       HOST_FUNCTION_TYPE_INVOKE_CONTRACT = 0,\n  //       HOST_FUNCTION_TYPE_CREATE_CONTRACT = 1,\n  //       HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM = 2,\n  //       HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2 = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"HostFunctionType\", {\n    hostFunctionTypeInvokeContract: 0,\n    hostFunctionTypeCreateContract: 1,\n    hostFunctionTypeUploadContractWasm: 2,\n    hostFunctionTypeCreateContractV2: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractIDPreimageType\n  //   {\n  //       CONTRACT_ID_PREIMAGE_FROM_ADDRESS = 0,\n  //       CONTRACT_ID_PREIMAGE_FROM_ASSET = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractIdPreimageType\", {\n    contractIdPreimageFromAddress: 0,\n    contractIdPreimageFromAsset: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           SCAddress address;\n  //           uint256 salt;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractIdPreimageFromAddress\", [[\"address\", xdr.lookup(\"ScAddress\")], [\"salt\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ContractIDPreimage switch (ContractIDPreimageType type)\n  //   {\n  //   case CONTRACT_ID_PREIMAGE_FROM_ADDRESS:\n  //       struct\n  //       {\n  //           SCAddress address;\n  //           uint256 salt;\n  //       } fromAddress;\n  //   case CONTRACT_ID_PREIMAGE_FROM_ASSET:\n  //       Asset fromAsset;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ContractIdPreimage\", {\n    switchOn: xdr.lookup(\"ContractIdPreimageType\"),\n    switchName: \"type\",\n    switches: [[\"contractIdPreimageFromAddress\", \"fromAddress\"], [\"contractIdPreimageFromAsset\", \"fromAsset\"]],\n    arms: {\n      fromAddress: xdr.lookup(\"ContractIdPreimageFromAddress\"),\n      fromAsset: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateContractArgs\n  //   {\n  //       ContractIDPreimage contractIDPreimage;\n  //       ContractExecutable executable;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateContractArgs\", [[\"contractIdPreimage\", xdr.lookup(\"ContractIdPreimage\")], [\"executable\", xdr.lookup(\"ContractExecutable\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateContractArgsV2\n  //   {\n  //       ContractIDPreimage contractIDPreimage;\n  //       ContractExecutable executable;\n  //       // Arguments of the contract's constructor.\n  //       SCVal constructorArgs<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateContractArgsV2\", [[\"contractIdPreimage\", xdr.lookup(\"ContractIdPreimage\")], [\"executable\", xdr.lookup(\"ContractExecutable\")], [\"constructorArgs\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InvokeContractArgs {\n  //       SCAddress contractAddress;\n  //       SCSymbol functionName;\n  //       SCVal args<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InvokeContractArgs\", [[\"contractAddress\", xdr.lookup(\"ScAddress\")], [\"functionName\", xdr.lookup(\"ScSymbol\")], [\"args\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union HostFunction switch (HostFunctionType type)\n  //   {\n  //   case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:\n  //       InvokeContractArgs invokeContract;\n  //   case HOST_FUNCTION_TYPE_CREATE_CONTRACT:\n  //       CreateContractArgs createContract;\n  //   case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:\n  //       opaque wasm<>;\n  //   case HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2:\n  //       CreateContractArgsV2 createContractV2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HostFunction\", {\n    switchOn: xdr.lookup(\"HostFunctionType\"),\n    switchName: \"type\",\n    switches: [[\"hostFunctionTypeInvokeContract\", \"invokeContract\"], [\"hostFunctionTypeCreateContract\", \"createContract\"], [\"hostFunctionTypeUploadContractWasm\", \"wasm\"], [\"hostFunctionTypeCreateContractV2\", \"createContractV2\"]],\n    arms: {\n      invokeContract: xdr.lookup(\"InvokeContractArgs\"),\n      createContract: xdr.lookup(\"CreateContractArgs\"),\n      wasm: xdr.varOpaque(),\n      createContractV2: xdr.lookup(\"CreateContractArgsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SorobanAuthorizedFunctionType\n  //   {\n  //       SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN = 0,\n  //       SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN = 1,\n  //       SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SorobanAuthorizedFunctionType\", {\n    sorobanAuthorizedFunctionTypeContractFn: 0,\n    sorobanAuthorizedFunctionTypeCreateContractHostFn: 1,\n    sorobanAuthorizedFunctionTypeCreateContractV2HostFn: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SorobanAuthorizedFunction switch (SorobanAuthorizedFunctionType type)\n  //   {\n  //   case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:\n  //       InvokeContractArgs contractFn;\n  //   // This variant of auth payload for creating new contract instances\n  //   // doesn't allow specifying the constructor arguments, creating contracts\n  //   // with constructors that take arguments is only possible by authorizing\n  //   // `SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN`\n  //   // (protocol 22+).\n  //   case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:\n  //       CreateContractArgs createContractHostFn;\n  //   // This variant of auth payload for creating new contract instances\n  //   // is only accepted in and after protocol 22. It allows authorizing the\n  //   // contract constructor arguments.\n  //   case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN:\n  //       CreateContractArgsV2 createContractV2HostFn;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SorobanAuthorizedFunction\", {\n    switchOn: xdr.lookup(\"SorobanAuthorizedFunctionType\"),\n    switchName: \"type\",\n    switches: [[\"sorobanAuthorizedFunctionTypeContractFn\", \"contractFn\"], [\"sorobanAuthorizedFunctionTypeCreateContractHostFn\", \"createContractHostFn\"], [\"sorobanAuthorizedFunctionTypeCreateContractV2HostFn\", \"createContractV2HostFn\"]],\n    arms: {\n      contractFn: xdr.lookup(\"InvokeContractArgs\"),\n      createContractHostFn: xdr.lookup(\"CreateContractArgs\"),\n      createContractV2HostFn: xdr.lookup(\"CreateContractArgsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanAuthorizedInvocation\n  //   {\n  //       SorobanAuthorizedFunction function;\n  //       SorobanAuthorizedInvocation subInvocations<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanAuthorizedInvocation\", [[\"function\", xdr.lookup(\"SorobanAuthorizedFunction\")], [\"subInvocations\", xdr.varArray(xdr.lookup(\"SorobanAuthorizedInvocation\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanAddressCredentials\n  //   {\n  //       SCAddress address;\n  //       int64 nonce;\n  //       uint32 signatureExpirationLedger;\n  //       SCVal signature;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanAddressCredentials\", [[\"address\", xdr.lookup(\"ScAddress\")], [\"nonce\", xdr.lookup(\"Int64\")], [\"signatureExpirationLedger\", xdr.lookup(\"Uint32\")], [\"signature\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SorobanCredentialsType\n  //   {\n  //       SOROBAN_CREDENTIALS_SOURCE_ACCOUNT = 0,\n  //       SOROBAN_CREDENTIALS_ADDRESS = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SorobanCredentialsType\", {\n    sorobanCredentialsSourceAccount: 0,\n    sorobanCredentialsAddress: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SorobanCredentials switch (SorobanCredentialsType type)\n  //   {\n  //   case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:\n  //       void;\n  //   case SOROBAN_CREDENTIALS_ADDRESS:\n  //       SorobanAddressCredentials address;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SorobanCredentials\", {\n    switchOn: xdr.lookup(\"SorobanCredentialsType\"),\n    switchName: \"type\",\n    switches: [[\"sorobanCredentialsSourceAccount\", xdr[\"void\"]()], [\"sorobanCredentialsAddress\", \"address\"]],\n    arms: {\n      address: xdr.lookup(\"SorobanAddressCredentials\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanAuthorizationEntry\n  //   {\n  //       SorobanCredentials credentials;\n  //       SorobanAuthorizedInvocation rootInvocation;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanAuthorizationEntry\", [[\"credentials\", xdr.lookup(\"SorobanCredentials\")], [\"rootInvocation\", xdr.lookup(\"SorobanAuthorizedInvocation\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InvokeHostFunctionOp\n  //   {\n  //       // Host function to invoke.\n  //       HostFunction hostFunction;\n  //       // Per-address authorizations for this host function.\n  //       SorobanAuthorizationEntry auth<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InvokeHostFunctionOp\", [[\"hostFunction\", xdr.lookup(\"HostFunction\")], [\"auth\", xdr.varArray(xdr.lookup(\"SorobanAuthorizationEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ExtendFootprintTTLOp\n  //   {\n  //       ExtensionPoint ext;\n  //       uint32 extendTo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ExtendFootprintTtlOp\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"extendTo\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct RestoreFootprintOp\n  //   {\n  //       ExtensionPoint ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"RestoreFootprintOp\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionOp invokeHostFunctionOp;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLOp extendFootprintTTLOp;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintOp restoreFootprintOp;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationBody\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountOp\"], [\"payment\", \"paymentOp\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveOp\"], [\"manageSellOffer\", \"manageSellOfferOp\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferOp\"], [\"setOptions\", \"setOptionsOp\"], [\"changeTrust\", \"changeTrustOp\"], [\"allowTrust\", \"allowTrustOp\"], [\"accountMerge\", \"destination\"], [\"inflation\", xdr[\"void\"]()], [\"manageData\", \"manageDataOp\"], [\"bumpSequence\", \"bumpSequenceOp\"], [\"manageBuyOffer\", \"manageBuyOfferOp\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendOp\"], [\"createClaimableBalance\", \"createClaimableBalanceOp\"], [\"claimClaimableBalance\", \"claimClaimableBalanceOp\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesOp\"], [\"endSponsoringFutureReserves\", xdr[\"void\"]()], [\"revokeSponsorship\", \"revokeSponsorshipOp\"], [\"clawback\", \"clawbackOp\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceOp\"], [\"setTrustLineFlags\", \"setTrustLineFlagsOp\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositOp\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawOp\"], [\"invokeHostFunction\", \"invokeHostFunctionOp\"], [\"extendFootprintTtl\", \"extendFootprintTtlOp\"], [\"restoreFootprint\", \"restoreFootprintOp\"]],\n    arms: {\n      createAccountOp: xdr.lookup(\"CreateAccountOp\"),\n      paymentOp: xdr.lookup(\"PaymentOp\"),\n      pathPaymentStrictReceiveOp: xdr.lookup(\"PathPaymentStrictReceiveOp\"),\n      manageSellOfferOp: xdr.lookup(\"ManageSellOfferOp\"),\n      createPassiveSellOfferOp: xdr.lookup(\"CreatePassiveSellOfferOp\"),\n      setOptionsOp: xdr.lookup(\"SetOptionsOp\"),\n      changeTrustOp: xdr.lookup(\"ChangeTrustOp\"),\n      allowTrustOp: xdr.lookup(\"AllowTrustOp\"),\n      destination: xdr.lookup(\"MuxedAccount\"),\n      manageDataOp: xdr.lookup(\"ManageDataOp\"),\n      bumpSequenceOp: xdr.lookup(\"BumpSequenceOp\"),\n      manageBuyOfferOp: xdr.lookup(\"ManageBuyOfferOp\"),\n      pathPaymentStrictSendOp: xdr.lookup(\"PathPaymentStrictSendOp\"),\n      createClaimableBalanceOp: xdr.lookup(\"CreateClaimableBalanceOp\"),\n      claimClaimableBalanceOp: xdr.lookup(\"ClaimClaimableBalanceOp\"),\n      beginSponsoringFutureReservesOp: xdr.lookup(\"BeginSponsoringFutureReservesOp\"),\n      revokeSponsorshipOp: xdr.lookup(\"RevokeSponsorshipOp\"),\n      clawbackOp: xdr.lookup(\"ClawbackOp\"),\n      clawbackClaimableBalanceOp: xdr.lookup(\"ClawbackClaimableBalanceOp\"),\n      setTrustLineFlagsOp: xdr.lookup(\"SetTrustLineFlagsOp\"),\n      liquidityPoolDepositOp: xdr.lookup(\"LiquidityPoolDepositOp\"),\n      liquidityPoolWithdrawOp: xdr.lookup(\"LiquidityPoolWithdrawOp\"),\n      invokeHostFunctionOp: xdr.lookup(\"InvokeHostFunctionOp\"),\n      extendFootprintTtlOp: xdr.lookup(\"ExtendFootprintTtlOp\"),\n      restoreFootprintOp: xdr.lookup(\"RestoreFootprintOp\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Operation\n  //   {\n  //       // sourceAccount is the account used to run the operation\n  //       // if not set, the runtime defaults to \"sourceAccount\" specified at\n  //       // the transaction level\n  //       MuxedAccount* sourceAccount;\n  //\n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionOp invokeHostFunctionOp;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLOp extendFootprintTTLOp;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintOp restoreFootprintOp;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Operation\", [[\"sourceAccount\", xdr.option(xdr.lookup(\"MuxedAccount\"))], [\"body\", xdr.lookup(\"OperationBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageOperationId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageRevokeId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")], [\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"asset\", xdr.lookup(\"Asset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           Hash networkID;\n  //           ContractIDPreimage contractIDPreimage;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageContractId\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"contractIdPreimage\", xdr.lookup(\"ContractIdPreimage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           Hash networkID;\n  //           int64 nonce;\n  //           uint32 signatureExpirationLedger;\n  //           SorobanAuthorizedInvocation invocation;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageSorobanAuthorization\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"nonce\", xdr.lookup(\"Int64\")], [\"signatureExpirationLedger\", xdr.lookup(\"Uint32\")], [\"invocation\", xdr.lookup(\"SorobanAuthorizedInvocation\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union HashIDPreimage switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       } operationID;\n  //   case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       } revokeID;\n  //   case ENVELOPE_TYPE_CONTRACT_ID:\n  //       struct\n  //       {\n  //           Hash networkID;\n  //           ContractIDPreimage contractIDPreimage;\n  //       } contractID;\n  //   case ENVELOPE_TYPE_SOROBAN_AUTHORIZATION:\n  //       struct\n  //       {\n  //           Hash networkID;\n  //           int64 nonce;\n  //           uint32 signatureExpirationLedger;\n  //           SorobanAuthorizedInvocation invocation;\n  //       } sorobanAuthorization;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HashIdPreimage\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeOpId\", \"operationId\"], [\"envelopeTypePoolRevokeOpId\", \"revokeId\"], [\"envelopeTypeContractId\", \"contractId\"], [\"envelopeTypeSorobanAuthorization\", \"sorobanAuthorization\"]],\n    arms: {\n      operationId: xdr.lookup(\"HashIdPreimageOperationId\"),\n      revokeId: xdr.lookup(\"HashIdPreimageRevokeId\"),\n      contractId: xdr.lookup(\"HashIdPreimageContractId\"),\n      sorobanAuthorization: xdr.lookup(\"HashIdPreimageSorobanAuthorization\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum MemoType\n  //   {\n  //       MEMO_NONE = 0,\n  //       MEMO_TEXT = 1,\n  //       MEMO_ID = 2,\n  //       MEMO_HASH = 3,\n  //       MEMO_RETURN = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"MemoType\", {\n    memoNone: 0,\n    memoText: 1,\n    memoId: 2,\n    memoHash: 3,\n    memoReturn: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Memo switch (MemoType type)\n  //   {\n  //   case MEMO_NONE:\n  //       void;\n  //   case MEMO_TEXT:\n  //       string text<28>;\n  //   case MEMO_ID:\n  //       uint64 id;\n  //   case MEMO_HASH:\n  //       Hash hash; // the hash of what to pull from the content server\n  //   case MEMO_RETURN:\n  //       Hash retHash; // the hash of the tx you are rejecting\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Memo\", {\n    switchOn: xdr.lookup(\"MemoType\"),\n    switchName: \"type\",\n    switches: [[\"memoNone\", xdr[\"void\"]()], [\"memoText\", \"text\"], [\"memoId\", \"id\"], [\"memoHash\", \"hash\"], [\"memoReturn\", \"retHash\"]],\n    arms: {\n      text: xdr.string(28),\n      id: xdr.lookup(\"Uint64\"),\n      hash: xdr.lookup(\"Hash\"),\n      retHash: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeBounds\n  //   {\n  //       TimePoint minTime;\n  //       TimePoint maxTime; // 0 here means no maxTime\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeBounds\", [[\"minTime\", xdr.lookup(\"TimePoint\")], [\"maxTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerBounds\n  //   {\n  //       uint32 minLedger;\n  //       uint32 maxLedger; // 0 here means no maxLedger\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerBounds\", [[\"minLedger\", xdr.lookup(\"Uint32\")], [\"maxLedger\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PreconditionsV2\n  //   {\n  //       TimeBounds* timeBounds;\n  //\n  //       // Transaction only valid for ledger numbers n such that\n  //       // minLedger <= n < maxLedger (if maxLedger == 0, then\n  //       // only minLedger is checked)\n  //       LedgerBounds* ledgerBounds;\n  //\n  //       // If NULL, only valid when sourceAccount's sequence number\n  //       // is seqNum - 1.  Otherwise, valid when sourceAccount's\n  //       // sequence number n satisfies minSeqNum <= n < tx.seqNum.\n  //       // Note that after execution the account's sequence number\n  //       // is always raised to tx.seqNum, and a transaction is not\n  //       // valid if tx.seqNum is too high to ensure replay protection.\n  //       SequenceNumber* minSeqNum;\n  //\n  //       // For the transaction to be valid, the current ledger time must\n  //       // be at least minSeqAge greater than sourceAccount's seqTime.\n  //       Duration minSeqAge;\n  //\n  //       // For the transaction to be valid, the current ledger number\n  //       // must be at least minSeqLedgerGap greater than sourceAccount's\n  //       // seqLedger.\n  //       uint32 minSeqLedgerGap;\n  //\n  //       // For the transaction to be valid, there must be a signature\n  //       // corresponding to every Signer in this array, even if the\n  //       // signature is not otherwise required by the sourceAccount or\n  //       // operations.\n  //       SignerKey extraSigners<2>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PreconditionsV2\", [[\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"ledgerBounds\", xdr.option(xdr.lookup(\"LedgerBounds\"))], [\"minSeqNum\", xdr.option(xdr.lookup(\"SequenceNumber\"))], [\"minSeqAge\", xdr.lookup(\"Duration\")], [\"minSeqLedgerGap\", xdr.lookup(\"Uint32\")], [\"extraSigners\", xdr.varArray(xdr.lookup(\"SignerKey\"), 2)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum PreconditionType\n  //   {\n  //       PRECOND_NONE = 0,\n  //       PRECOND_TIME = 1,\n  //       PRECOND_V2 = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PreconditionType\", {\n    precondNone: 0,\n    precondTime: 1,\n    precondV2: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Preconditions switch (PreconditionType type)\n  //   {\n  //   case PRECOND_NONE:\n  //       void;\n  //   case PRECOND_TIME:\n  //       TimeBounds timeBounds;\n  //   case PRECOND_V2:\n  //       PreconditionsV2 v2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Preconditions\", {\n    switchOn: xdr.lookup(\"PreconditionType\"),\n    switchName: \"type\",\n    switches: [[\"precondNone\", xdr[\"void\"]()], [\"precondTime\", \"timeBounds\"], [\"precondV2\", \"v2\"]],\n    arms: {\n      timeBounds: xdr.lookup(\"TimeBounds\"),\n      v2: xdr.lookup(\"PreconditionsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerFootprint\n  //   {\n  //       LedgerKey readOnly<>;\n  //       LedgerKey readWrite<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerFootprint\", [[\"readOnly\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)], [\"readWrite\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ArchivalProofType\n  //   {\n  //       EXISTENCE = 0,\n  //       NONEXISTENCE = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ArchivalProofType\", {\n    existence: 0,\n    nonexistence: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ArchivalProofNode\n  //   {\n  //       uint32 index;\n  //       Hash hash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ArchivalProofNode\", [[\"index\", xdr.lookup(\"Uint32\")], [\"hash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef ArchivalProofNode ProofLevel<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ProofLevel\", xdr.varArray(xdr.lookup(\"ArchivalProofNode\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct NonexistenceProofBody\n  //   {\n  //       ColdArchiveBucketEntry entriesToProve<>;\n  //\n  //       // Vector of vectors, where proofLevels[level]\n  //       // contains all HashNodes that correspond with that level\n  //       ProofLevel proofLevels<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"NonexistenceProofBody\", [[\"entriesToProve\", xdr.varArray(xdr.lookup(\"ColdArchiveBucketEntry\"), 2147483647)], [\"proofLevels\", xdr.varArray(xdr.lookup(\"ProofLevel\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ExistenceProofBody\n  //   {\n  //       LedgerKey keysToProve<>;\n  //\n  //       // Bounds for each key being proved, where bound[n]\n  //       // corresponds to keysToProve[n]\n  //       ColdArchiveBucketEntry lowBoundEntries<>;\n  //       ColdArchiveBucketEntry highBoundEntries<>;\n  //\n  //       // Vector of vectors, where proofLevels[level]\n  //       // contains all HashNodes that correspond with that level\n  //       ProofLevel proofLevels<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ExistenceProofBody\", [[\"keysToProve\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)], [\"lowBoundEntries\", xdr.varArray(xdr.lookup(\"ColdArchiveBucketEntry\"), 2147483647)], [\"highBoundEntries\", xdr.varArray(xdr.lookup(\"ColdArchiveBucketEntry\"), 2147483647)], [\"proofLevels\", xdr.varArray(xdr.lookup(\"ProofLevel\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (ArchivalProofType t)\n  //       {\n  //       case EXISTENCE:\n  //           NonexistenceProofBody nonexistenceProof;\n  //       case NONEXISTENCE:\n  //           ExistenceProofBody existenceProof;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ArchivalProofBody\", {\n    switchOn: xdr.lookup(\"ArchivalProofType\"),\n    switchName: \"t\",\n    switches: [[\"existence\", \"nonexistenceProof\"], [\"nonexistence\", \"existenceProof\"]],\n    arms: {\n      nonexistenceProof: xdr.lookup(\"NonexistenceProofBody\"),\n      existenceProof: xdr.lookup(\"ExistenceProofBody\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ArchivalProof\n  //   {\n  //       uint32 epoch; // AST Subtree for this proof\n  //\n  //       union switch (ArchivalProofType t)\n  //       {\n  //       case EXISTENCE:\n  //           NonexistenceProofBody nonexistenceProof;\n  //       case NONEXISTENCE:\n  //           ExistenceProofBody existenceProof;\n  //       } body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ArchivalProof\", [[\"epoch\", xdr.lookup(\"Uint32\")], [\"body\", xdr.lookup(\"ArchivalProofBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanResources\n  //   {\n  //       // The ledger footprint of the transaction.\n  //       LedgerFootprint footprint;\n  //       // The maximum number of instructions this transaction can use\n  //       uint32 instructions;\n  //\n  //       // The maximum number of bytes this transaction can read from ledger\n  //       uint32 readBytes;\n  //       // The maximum number of bytes this transaction can write to ledger\n  //       uint32 writeBytes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanResources\", [[\"footprint\", xdr.lookup(\"LedgerFootprint\")], [\"instructions\", xdr.lookup(\"Uint32\")], [\"readBytes\", xdr.lookup(\"Uint32\")], [\"writeBytes\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanTransactionData\n  //   {\n  //       ExtensionPoint ext;\n  //       SorobanResources resources;\n  //       // Amount of the transaction `fee` allocated to the Soroban resource fees.\n  //       // The fraction of `resourceFee` corresponding to `resources` specified\n  //       // above is *not* refundable (i.e. fees for instructions, ledger I/O), as\n  //       // well as fees for the transaction size.\n  //       // The remaining part of the fee is refundable and the charged value is\n  //       // based on the actual consumption of refundable resources (events, ledger\n  //       // rent bumps).\n  //       // The `inclusionFee` used for prioritization of the transaction is defined\n  //       // as `tx.fee - resourceFee`.\n  //       int64 resourceFee;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanTransactionData\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"resources\", xdr.lookup(\"SorobanResources\")], [\"resourceFee\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionV0Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0\n  //   {\n  //       uint256 sourceAccountEd25519;\n  //       uint32 fee;\n  //       SequenceNumber seqNum;\n  //       TimeBounds* timeBounds;\n  //       Memo memo;\n  //       Operation operations<MAX_OPS_PER_TX>;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0\", [[\"sourceAccountEd25519\", xdr.lookup(\"Uint256\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionV0Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0Envelope\n  //   {\n  //       TransactionV0 tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0Envelope\", [[\"tx\", xdr.lookup(\"TransactionV0\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           SorobanTransactionData sorobanData;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"sorobanData\"]],\n    arms: {\n      sorobanData: xdr.lookup(\"SorobanTransactionData\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Transaction\n  //   {\n  //       // account used to run the transaction\n  //       MuxedAccount sourceAccount;\n  //\n  //       // the fee the sourceAccount will pay\n  //       uint32 fee;\n  //\n  //       // sequence number to consume in the account\n  //       SequenceNumber seqNum;\n  //\n  //       // validity conditions\n  //       Preconditions cond;\n  //\n  //       Memo memo;\n  //\n  //       Operation operations<MAX_OPS_PER_TX>;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           SorobanTransactionData sorobanData;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Transaction\", [[\"sourceAccount\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"cond\", xdr.lookup(\"Preconditions\")], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV1Envelope\n  //   {\n  //       Transaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV1Envelope\", [[\"tx\", xdr.lookup(\"Transaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionInnerTx\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TransactionV1Envelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransaction\n  //   {\n  //       MuxedAccount feeSource;\n  //       int64 fee;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //       innerTx;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransaction\", [[\"feeSource\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Int64\")], [\"innerTx\", xdr.lookup(\"FeeBumpTransactionInnerTx\")], [\"ext\", xdr.lookup(\"FeeBumpTransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransactionEnvelope\n  //   {\n  //       FeeBumpTransaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransactionEnvelope\", [[\"tx\", xdr.lookup(\"FeeBumpTransaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionEnvelope switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_TX_V0:\n  //       TransactionV0Envelope v0;\n  //   case ENVELOPE_TYPE_TX:\n  //       TransactionV1Envelope v1;\n  //   case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //       FeeBumpTransactionEnvelope feeBump;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionEnvelope\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTxV0\", \"v0\"], [\"envelopeTypeTx\", \"v1\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      v0: xdr.lookup(\"TransactionV0Envelope\"),\n      v1: xdr.lookup(\"TransactionV1Envelope\"),\n      feeBump: xdr.lookup(\"FeeBumpTransactionEnvelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionSignaturePayloadTaggedTransaction\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"tx\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      tx: xdr.lookup(\"Transaction\"),\n      feeBump: xdr.lookup(\"FeeBumpTransaction\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSignaturePayload\n  //   {\n  //       Hash networkId;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //       taggedTransaction;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSignaturePayload\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"taggedTransaction\", xdr.lookup(\"TransactionSignaturePayloadTaggedTransaction\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimAtomType\n  //   {\n  //       CLAIM_ATOM_TYPE_V0 = 0,\n  //       CLAIM_ATOM_TYPE_ORDER_BOOK = 1,\n  //       CLAIM_ATOM_TYPE_LIQUIDITY_POOL = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimAtomType\", {\n    claimAtomTypeV0: 0,\n    claimAtomTypeOrderBook: 1,\n    claimAtomTypeLiquidityPool: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtomV0\n  //   {\n  //       // emitted to identify the offer\n  //       uint256 sellerEd25519; // Account that owns the offer\n  //       int64 offerID;\n  //\n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //\n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtomV0\", [[\"sellerEd25519\", xdr.lookup(\"Uint256\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtom\n  //   {\n  //       // emitted to identify the offer\n  //       AccountID sellerID; // Account that owns the offer\n  //       int64 offerID;\n  //\n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //\n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtom\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimLiquidityAtom\n  //   {\n  //       PoolID liquidityPoolID;\n  //\n  //       // amount and asset taken from the pool\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //\n  //       // amount and asset sent to the pool\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimLiquidityAtom\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimAtom switch (ClaimAtomType type)\n  //   {\n  //   case CLAIM_ATOM_TYPE_V0:\n  //       ClaimOfferAtomV0 v0;\n  //   case CLAIM_ATOM_TYPE_ORDER_BOOK:\n  //       ClaimOfferAtom orderBook;\n  //   case CLAIM_ATOM_TYPE_LIQUIDITY_POOL:\n  //       ClaimLiquidityAtom liquidityPool;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimAtom\", {\n    switchOn: xdr.lookup(\"ClaimAtomType\"),\n    switchName: \"type\",\n    switches: [[\"claimAtomTypeV0\", \"v0\"], [\"claimAtomTypeOrderBook\", \"orderBook\"], [\"claimAtomTypeLiquidityPool\", \"liquidityPool\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimOfferAtomV0\"),\n      orderBook: xdr.lookup(\"ClaimOfferAtom\"),\n      liquidityPool: xdr.lookup(\"ClaimLiquidityAtom\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateAccountResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CREATE_ACCOUNT_SUCCESS = 0, // account was created\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       CREATE_ACCOUNT_MALFORMED = -1,   // invalid destination\n  //       CREATE_ACCOUNT_UNDERFUNDED = -2, // not enough funds in source account\n  //       CREATE_ACCOUNT_LOW_RESERVE =\n  //           -3, // would create an account below the min reserve\n  //       CREATE_ACCOUNT_ALREADY_EXIST = -4 // account already exists\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"CreateAccountResultCode\", {\n    createAccountSuccess: 0,\n    createAccountMalformed: -1,\n    createAccountUnderfunded: -2,\n    createAccountLowReserve: -3,\n    createAccountAlreadyExist: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateAccountResult switch (CreateAccountResultCode code)\n  //   {\n  //   case CREATE_ACCOUNT_SUCCESS:\n  //       void;\n  //   case CREATE_ACCOUNT_MALFORMED:\n  //   case CREATE_ACCOUNT_UNDERFUNDED:\n  //   case CREATE_ACCOUNT_LOW_RESERVE:\n  //   case CREATE_ACCOUNT_ALREADY_EXIST:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateAccountResult\", {\n    switchOn: xdr.lookup(\"CreateAccountResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createAccountSuccess\", xdr[\"void\"]()], [\"createAccountMalformed\", xdr[\"void\"]()], [\"createAccountUnderfunded\", xdr[\"void\"]()], [\"createAccountLowReserve\", xdr[\"void\"]()], [\"createAccountAlreadyExist\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PaymentResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PAYMENT_SUCCESS = 0, // payment successfully completed\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       PAYMENT_MALFORMED = -1,          // bad input\n  //       PAYMENT_UNDERFUNDED = -2,        // not enough funds in source account\n  //       PAYMENT_SRC_NO_TRUST = -3,       // no trust line on source account\n  //       PAYMENT_SRC_NOT_AUTHORIZED = -4, // source not authorized to transfer\n  //       PAYMENT_NO_DESTINATION = -5,     // destination account does not exist\n  //       PAYMENT_NO_TRUST = -6,       // destination missing a trust line for asset\n  //       PAYMENT_NOT_AUTHORIZED = -7, // destination not authorized to hold asset\n  //       PAYMENT_LINE_FULL = -8,      // destination would go above their limit\n  //       PAYMENT_NO_ISSUER = -9       // missing issuer on asset\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PaymentResultCode\", {\n    paymentSuccess: 0,\n    paymentMalformed: -1,\n    paymentUnderfunded: -2,\n    paymentSrcNoTrust: -3,\n    paymentSrcNotAuthorized: -4,\n    paymentNoDestination: -5,\n    paymentNoTrust: -6,\n    paymentNotAuthorized: -7,\n    paymentLineFull: -8,\n    paymentNoIssuer: -9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PaymentResult switch (PaymentResultCode code)\n  //   {\n  //   case PAYMENT_SUCCESS:\n  //       void;\n  //   case PAYMENT_MALFORMED:\n  //   case PAYMENT_UNDERFUNDED:\n  //   case PAYMENT_SRC_NO_TRUST:\n  //   case PAYMENT_SRC_NOT_AUTHORIZED:\n  //   case PAYMENT_NO_DESTINATION:\n  //   case PAYMENT_NO_TRUST:\n  //   case PAYMENT_NOT_AUTHORIZED:\n  //   case PAYMENT_LINE_FULL:\n  //   case PAYMENT_NO_ISSUER:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PaymentResult\", {\n    switchOn: xdr.lookup(\"PaymentResultCode\"),\n    switchName: \"code\",\n    switches: [[\"paymentSuccess\", xdr[\"void\"]()], [\"paymentMalformed\", xdr[\"void\"]()], [\"paymentUnderfunded\", xdr[\"void\"]()], [\"paymentSrcNoTrust\", xdr[\"void\"]()], [\"paymentSrcNotAuthorized\", xdr[\"void\"]()], [\"paymentNoDestination\", xdr[\"void\"]()], [\"paymentNoTrust\", xdr[\"void\"]()], [\"paymentNotAuthorized\", xdr[\"void\"]()], [\"paymentLineFull\", xdr[\"void\"]()], [\"paymentNoIssuer\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictReceiveResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_SUCCESS = 0, // success\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL =\n  //           -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX = -12 // could not satisfy sendmax\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PathPaymentStrictReceiveResultCode\", {\n    pathPaymentStrictReceiveSuccess: 0,\n    pathPaymentStrictReceiveMalformed: -1,\n    pathPaymentStrictReceiveUnderfunded: -2,\n    pathPaymentStrictReceiveSrcNoTrust: -3,\n    pathPaymentStrictReceiveSrcNotAuthorized: -4,\n    pathPaymentStrictReceiveNoDestination: -5,\n    pathPaymentStrictReceiveNoTrust: -6,\n    pathPaymentStrictReceiveNotAuthorized: -7,\n    pathPaymentStrictReceiveLineFull: -8,\n    pathPaymentStrictReceiveNoIssuer: -9,\n    pathPaymentStrictReceiveTooFewOffers: -10,\n    pathPaymentStrictReceiveOfferCrossSelf: -11,\n    pathPaymentStrictReceiveOverSendmax: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SimplePaymentResult\n  //   {\n  //       AccountID destination;\n  //       Asset asset;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SimplePaymentResult\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictReceiveResult switch (\n  //       PathPaymentStrictReceiveResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictReceiveResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictReceiveResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictReceiveSuccess\", \"success\"], [\"pathPaymentStrictReceiveMalformed\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveUnderfunded\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveSrcNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveSrcNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNoDestination\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveLineFull\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictReceiveTooFewOffers\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveOfferCrossSelf\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveOverSendmax\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictReceiveResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictSendResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_SUCCESS = 0, // success\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_SEND_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_SEND_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_SEND_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_SEND_LINE_FULL = -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_SEND_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN = -12 // could not satisfy destMin\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PathPaymentStrictSendResultCode\", {\n    pathPaymentStrictSendSuccess: 0,\n    pathPaymentStrictSendMalformed: -1,\n    pathPaymentStrictSendUnderfunded: -2,\n    pathPaymentStrictSendSrcNoTrust: -3,\n    pathPaymentStrictSendSrcNotAuthorized: -4,\n    pathPaymentStrictSendNoDestination: -5,\n    pathPaymentStrictSendNoTrust: -6,\n    pathPaymentStrictSendNotAuthorized: -7,\n    pathPaymentStrictSendLineFull: -8,\n    pathPaymentStrictSendNoIssuer: -9,\n    pathPaymentStrictSendTooFewOffers: -10,\n    pathPaymentStrictSendOfferCrossSelf: -11,\n    pathPaymentStrictSendUnderDestmin: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_SEND_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_SEND_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_SEND_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictSendResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictSendResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictSendSuccess\", \"success\"], [\"pathPaymentStrictSendMalformed\", xdr[\"void\"]()], [\"pathPaymentStrictSendUnderfunded\", xdr[\"void\"]()], [\"pathPaymentStrictSendSrcNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictSendSrcNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictSendNoDestination\", xdr[\"void\"]()], [\"pathPaymentStrictSendNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictSendNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictSendLineFull\", xdr[\"void\"]()], [\"pathPaymentStrictSendNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictSendTooFewOffers\", xdr[\"void\"]()], [\"pathPaymentStrictSendOfferCrossSelf\", xdr[\"void\"]()], [\"pathPaymentStrictSendUnderDestmin\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictSendResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageSellOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_SELL_OFFER_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_SELL_OFFER_MALFORMED = -1, // generated offer would be invalid\n  //       MANAGE_SELL_OFFER_SELL_NO_TRUST =\n  //           -2,                              // no trust line for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_TRUST = -3, // no trust line for what we're buying\n  //       MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_SELL_OFFER_LINE_FULL = -6, // can't receive more of what it's buying\n  //       MANAGE_SELL_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_SELL_OFFER_CROSS_SELF =\n  //           -8, // would cross an offer from the same user\n  //       MANAGE_SELL_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //\n  //       // update errors\n  //       MANAGE_SELL_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //\n  //       MANAGE_SELL_OFFER_LOW_RESERVE =\n  //           -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageSellOfferResultCode\", {\n    manageSellOfferSuccess: 0,\n    manageSellOfferMalformed: -1,\n    manageSellOfferSellNoTrust: -2,\n    manageSellOfferBuyNoTrust: -3,\n    manageSellOfferSellNotAuthorized: -4,\n    manageSellOfferBuyNotAuthorized: -5,\n    manageSellOfferLineFull: -6,\n    manageSellOfferUnderfunded: -7,\n    manageSellOfferCrossSelf: -8,\n    manageSellOfferSellNoIssuer: -9,\n    manageSellOfferBuyNoIssuer: -10,\n    manageSellOfferNotFound: -11,\n    manageSellOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageOfferEffect\n  //   {\n  //       MANAGE_OFFER_CREATED = 0,\n  //       MANAGE_OFFER_UPDATED = 1,\n  //       MANAGE_OFFER_DELETED = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageOfferEffect\", {\n    manageOfferCreated: 0,\n    manageOfferUpdated: 1,\n    manageOfferDeleted: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ManageOfferSuccessResultOffer\", {\n    switchOn: xdr.lookup(\"ManageOfferEffect\"),\n    switchName: \"effect\",\n    switches: [[\"manageOfferCreated\", \"offer\"], [\"manageOfferUpdated\", \"offer\"], [\"manageOfferDeleted\", xdr[\"void\"]()]],\n    arms: {\n      offer: xdr.lookup(\"OfferEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageOfferSuccessResult\n  //   {\n  //       // offers that got claimed while creating this offer\n  //       ClaimAtom offersClaimed<>;\n  //\n  //       union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //       offer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageOfferSuccessResult\", [[\"offersClaimed\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"offer\", xdr.lookup(\"ManageOfferSuccessResultOffer\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ManageSellOfferResult switch (ManageSellOfferResultCode code)\n  //   {\n  //   case MANAGE_SELL_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_SELL_OFFER_MALFORMED:\n  //   case MANAGE_SELL_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_LINE_FULL:\n  //   case MANAGE_SELL_OFFER_UNDERFUNDED:\n  //   case MANAGE_SELL_OFFER_CROSS_SELF:\n  //   case MANAGE_SELL_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_NOT_FOUND:\n  //   case MANAGE_SELL_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageSellOfferResult\", {\n    switchOn: xdr.lookup(\"ManageSellOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageSellOfferSuccess\", \"success\"], [\"manageSellOfferMalformed\", xdr[\"void\"]()], [\"manageSellOfferSellNoTrust\", xdr[\"void\"]()], [\"manageSellOfferBuyNoTrust\", xdr[\"void\"]()], [\"manageSellOfferSellNotAuthorized\", xdr[\"void\"]()], [\"manageSellOfferBuyNotAuthorized\", xdr[\"void\"]()], [\"manageSellOfferLineFull\", xdr[\"void\"]()], [\"manageSellOfferUnderfunded\", xdr[\"void\"]()], [\"manageSellOfferCrossSelf\", xdr[\"void\"]()], [\"manageSellOfferSellNoIssuer\", xdr[\"void\"]()], [\"manageSellOfferBuyNoIssuer\", xdr[\"void\"]()], [\"manageSellOfferNotFound\", xdr[\"void\"]()], [\"manageSellOfferLowReserve\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageBuyOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_BUY_OFFER_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_BUY_OFFER_MALFORMED = -1,     // generated offer would be invalid\n  //       MANAGE_BUY_OFFER_SELL_NO_TRUST = -2, // no trust line for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_TRUST = -3,  // no trust line for what we're buying\n  //       MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_BUY_OFFER_LINE_FULL = -6,   // can't receive more of what it's buying\n  //       MANAGE_BUY_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_BUY_OFFER_CROSS_SELF = -8, // would cross an offer from the same user\n  //       MANAGE_BUY_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //\n  //       // update errors\n  //       MANAGE_BUY_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //\n  //       MANAGE_BUY_OFFER_LOW_RESERVE = -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageBuyOfferResultCode\", {\n    manageBuyOfferSuccess: 0,\n    manageBuyOfferMalformed: -1,\n    manageBuyOfferSellNoTrust: -2,\n    manageBuyOfferBuyNoTrust: -3,\n    manageBuyOfferSellNotAuthorized: -4,\n    manageBuyOfferBuyNotAuthorized: -5,\n    manageBuyOfferLineFull: -6,\n    manageBuyOfferUnderfunded: -7,\n    manageBuyOfferCrossSelf: -8,\n    manageBuyOfferSellNoIssuer: -9,\n    manageBuyOfferBuyNoIssuer: -10,\n    manageBuyOfferNotFound: -11,\n    manageBuyOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageBuyOfferResult switch (ManageBuyOfferResultCode code)\n  //   {\n  //   case MANAGE_BUY_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_BUY_OFFER_MALFORMED:\n  //   case MANAGE_BUY_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_LINE_FULL:\n  //   case MANAGE_BUY_OFFER_UNDERFUNDED:\n  //   case MANAGE_BUY_OFFER_CROSS_SELF:\n  //   case MANAGE_BUY_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_NOT_FOUND:\n  //   case MANAGE_BUY_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageBuyOfferResult\", {\n    switchOn: xdr.lookup(\"ManageBuyOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageBuyOfferSuccess\", \"success\"], [\"manageBuyOfferMalformed\", xdr[\"void\"]()], [\"manageBuyOfferSellNoTrust\", xdr[\"void\"]()], [\"manageBuyOfferBuyNoTrust\", xdr[\"void\"]()], [\"manageBuyOfferSellNotAuthorized\", xdr[\"void\"]()], [\"manageBuyOfferBuyNotAuthorized\", xdr[\"void\"]()], [\"manageBuyOfferLineFull\", xdr[\"void\"]()], [\"manageBuyOfferUnderfunded\", xdr[\"void\"]()], [\"manageBuyOfferCrossSelf\", xdr[\"void\"]()], [\"manageBuyOfferSellNoIssuer\", xdr[\"void\"]()], [\"manageBuyOfferBuyNoIssuer\", xdr[\"void\"]()], [\"manageBuyOfferNotFound\", xdr[\"void\"]()], [\"manageBuyOfferLowReserve\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetOptionsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_OPTIONS_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       SET_OPTIONS_LOW_RESERVE = -1,      // not enough funds to add a signer\n  //       SET_OPTIONS_TOO_MANY_SIGNERS = -2, // max number of signers already reached\n  //       SET_OPTIONS_BAD_FLAGS = -3,        // invalid combination of clear/set flags\n  //       SET_OPTIONS_INVALID_INFLATION = -4,      // inflation account does not exist\n  //       SET_OPTIONS_CANT_CHANGE = -5,            // can no longer change this option\n  //       SET_OPTIONS_UNKNOWN_FLAG = -6,           // can't set an unknown flag\n  //       SET_OPTIONS_THRESHOLD_OUT_OF_RANGE = -7, // bad value for weight/threshold\n  //       SET_OPTIONS_BAD_SIGNER = -8,             // signer cannot be masterkey\n  //       SET_OPTIONS_INVALID_HOME_DOMAIN = -9,    // malformed home domain\n  //       SET_OPTIONS_AUTH_REVOCABLE_REQUIRED =\n  //           -10 // auth revocable is required for clawback\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SetOptionsResultCode\", {\n    setOptionsSuccess: 0,\n    setOptionsLowReserve: -1,\n    setOptionsTooManySigners: -2,\n    setOptionsBadFlags: -3,\n    setOptionsInvalidInflation: -4,\n    setOptionsCantChange: -5,\n    setOptionsUnknownFlag: -6,\n    setOptionsThresholdOutOfRange: -7,\n    setOptionsBadSigner: -8,\n    setOptionsInvalidHomeDomain: -9,\n    setOptionsAuthRevocableRequired: -10\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetOptionsResult switch (SetOptionsResultCode code)\n  //   {\n  //   case SET_OPTIONS_SUCCESS:\n  //       void;\n  //   case SET_OPTIONS_LOW_RESERVE:\n  //   case SET_OPTIONS_TOO_MANY_SIGNERS:\n  //   case SET_OPTIONS_BAD_FLAGS:\n  //   case SET_OPTIONS_INVALID_INFLATION:\n  //   case SET_OPTIONS_CANT_CHANGE:\n  //   case SET_OPTIONS_UNKNOWN_FLAG:\n  //   case SET_OPTIONS_THRESHOLD_OUT_OF_RANGE:\n  //   case SET_OPTIONS_BAD_SIGNER:\n  //   case SET_OPTIONS_INVALID_HOME_DOMAIN:\n  //   case SET_OPTIONS_AUTH_REVOCABLE_REQUIRED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetOptionsResult\", {\n    switchOn: xdr.lookup(\"SetOptionsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setOptionsSuccess\", xdr[\"void\"]()], [\"setOptionsLowReserve\", xdr[\"void\"]()], [\"setOptionsTooManySigners\", xdr[\"void\"]()], [\"setOptionsBadFlags\", xdr[\"void\"]()], [\"setOptionsInvalidInflation\", xdr[\"void\"]()], [\"setOptionsCantChange\", xdr[\"void\"]()], [\"setOptionsUnknownFlag\", xdr[\"void\"]()], [\"setOptionsThresholdOutOfRange\", xdr[\"void\"]()], [\"setOptionsBadSigner\", xdr[\"void\"]()], [\"setOptionsInvalidHomeDomain\", xdr[\"void\"]()], [\"setOptionsAuthRevocableRequired\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ChangeTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CHANGE_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       CHANGE_TRUST_MALFORMED = -1,     // bad input\n  //       CHANGE_TRUST_NO_ISSUER = -2,     // could not find issuer\n  //       CHANGE_TRUST_INVALID_LIMIT = -3, // cannot drop limit below balance\n  //                                        // cannot create with a limit of 0\n  //       CHANGE_TRUST_LOW_RESERVE =\n  //           -4, // not enough funds to create a new trust line,\n  //       CHANGE_TRUST_SELF_NOT_ALLOWED = -5,   // trusting self is not allowed\n  //       CHANGE_TRUST_TRUST_LINE_MISSING = -6, // Asset trustline is missing for pool\n  //       CHANGE_TRUST_CANNOT_DELETE =\n  //           -7, // Asset trustline is still referenced in a pool\n  //       CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES =\n  //           -8 // Asset trustline is deauthorized\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ChangeTrustResultCode\", {\n    changeTrustSuccess: 0,\n    changeTrustMalformed: -1,\n    changeTrustNoIssuer: -2,\n    changeTrustInvalidLimit: -3,\n    changeTrustLowReserve: -4,\n    changeTrustSelfNotAllowed: -5,\n    changeTrustTrustLineMissing: -6,\n    changeTrustCannotDelete: -7,\n    changeTrustNotAuthMaintainLiabilities: -8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustResult switch (ChangeTrustResultCode code)\n  //   {\n  //   case CHANGE_TRUST_SUCCESS:\n  //       void;\n  //   case CHANGE_TRUST_MALFORMED:\n  //   case CHANGE_TRUST_NO_ISSUER:\n  //   case CHANGE_TRUST_INVALID_LIMIT:\n  //   case CHANGE_TRUST_LOW_RESERVE:\n  //   case CHANGE_TRUST_SELF_NOT_ALLOWED:\n  //   case CHANGE_TRUST_TRUST_LINE_MISSING:\n  //   case CHANGE_TRUST_CANNOT_DELETE:\n  //   case CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustResult\", {\n    switchOn: xdr.lookup(\"ChangeTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"changeTrustSuccess\", xdr[\"void\"]()], [\"changeTrustMalformed\", xdr[\"void\"]()], [\"changeTrustNoIssuer\", xdr[\"void\"]()], [\"changeTrustInvalidLimit\", xdr[\"void\"]()], [\"changeTrustLowReserve\", xdr[\"void\"]()], [\"changeTrustSelfNotAllowed\", xdr[\"void\"]()], [\"changeTrustTrustLineMissing\", xdr[\"void\"]()], [\"changeTrustCannotDelete\", xdr[\"void\"]()], [\"changeTrustNotAuthMaintainLiabilities\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AllowTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ALLOW_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ALLOW_TRUST_MALFORMED = -1,     // asset is not ASSET_TYPE_ALPHANUM\n  //       ALLOW_TRUST_NO_TRUST_LINE = -2, // trustor does not have a trustline\n  //                                       // source account does not require trust\n  //       ALLOW_TRUST_TRUST_NOT_REQUIRED = -3,\n  //       ALLOW_TRUST_CANT_REVOKE = -4,      // source account can't revoke trust,\n  //       ALLOW_TRUST_SELF_NOT_ALLOWED = -5, // trusting self is not allowed\n  //       ALLOW_TRUST_LOW_RESERVE = -6       // claimable balances can't be created\n  //                                          // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AllowTrustResultCode\", {\n    allowTrustSuccess: 0,\n    allowTrustMalformed: -1,\n    allowTrustNoTrustLine: -2,\n    allowTrustTrustNotRequired: -3,\n    allowTrustCantRevoke: -4,\n    allowTrustSelfNotAllowed: -5,\n    allowTrustLowReserve: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AllowTrustResult switch (AllowTrustResultCode code)\n  //   {\n  //   case ALLOW_TRUST_SUCCESS:\n  //       void;\n  //   case ALLOW_TRUST_MALFORMED:\n  //   case ALLOW_TRUST_NO_TRUST_LINE:\n  //   case ALLOW_TRUST_TRUST_NOT_REQUIRED:\n  //   case ALLOW_TRUST_CANT_REVOKE:\n  //   case ALLOW_TRUST_SELF_NOT_ALLOWED:\n  //   case ALLOW_TRUST_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AllowTrustResult\", {\n    switchOn: xdr.lookup(\"AllowTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"allowTrustSuccess\", xdr[\"void\"]()], [\"allowTrustMalformed\", xdr[\"void\"]()], [\"allowTrustNoTrustLine\", xdr[\"void\"]()], [\"allowTrustTrustNotRequired\", xdr[\"void\"]()], [\"allowTrustCantRevoke\", xdr[\"void\"]()], [\"allowTrustSelfNotAllowed\", xdr[\"void\"]()], [\"allowTrustLowReserve\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountMergeResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ACCOUNT_MERGE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ACCOUNT_MERGE_MALFORMED = -1,       // can't merge onto itself\n  //       ACCOUNT_MERGE_NO_ACCOUNT = -2,      // destination does not exist\n  //       ACCOUNT_MERGE_IMMUTABLE_SET = -3,   // source account has AUTH_IMMUTABLE set\n  //       ACCOUNT_MERGE_HAS_SUB_ENTRIES = -4, // account has trust lines/offers\n  //       ACCOUNT_MERGE_SEQNUM_TOO_FAR = -5,  // sequence number is over max allowed\n  //       ACCOUNT_MERGE_DEST_FULL = -6,       // can't add source balance to\n  //                                           // destination balance\n  //       ACCOUNT_MERGE_IS_SPONSOR = -7       // can't merge account that is a sponsor\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AccountMergeResultCode\", {\n    accountMergeSuccess: 0,\n    accountMergeMalformed: -1,\n    accountMergeNoAccount: -2,\n    accountMergeImmutableSet: -3,\n    accountMergeHasSubEntries: -4,\n    accountMergeSeqnumTooFar: -5,\n    accountMergeDestFull: -6,\n    accountMergeIsSponsor: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AccountMergeResult switch (AccountMergeResultCode code)\n  //   {\n  //   case ACCOUNT_MERGE_SUCCESS:\n  //       int64 sourceAccountBalance; // how much got transferred from source account\n  //   case ACCOUNT_MERGE_MALFORMED:\n  //   case ACCOUNT_MERGE_NO_ACCOUNT:\n  //   case ACCOUNT_MERGE_IMMUTABLE_SET:\n  //   case ACCOUNT_MERGE_HAS_SUB_ENTRIES:\n  //   case ACCOUNT_MERGE_SEQNUM_TOO_FAR:\n  //   case ACCOUNT_MERGE_DEST_FULL:\n  //   case ACCOUNT_MERGE_IS_SPONSOR:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AccountMergeResult\", {\n    switchOn: xdr.lookup(\"AccountMergeResultCode\"),\n    switchName: \"code\",\n    switches: [[\"accountMergeSuccess\", \"sourceAccountBalance\"], [\"accountMergeMalformed\", xdr[\"void\"]()], [\"accountMergeNoAccount\", xdr[\"void\"]()], [\"accountMergeImmutableSet\", xdr[\"void\"]()], [\"accountMergeHasSubEntries\", xdr[\"void\"]()], [\"accountMergeSeqnumTooFar\", xdr[\"void\"]()], [\"accountMergeDestFull\", xdr[\"void\"]()], [\"accountMergeIsSponsor\", xdr[\"void\"]()]],\n    arms: {\n      sourceAccountBalance: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum InflationResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       INFLATION_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       INFLATION_NOT_TIME = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"InflationResultCode\", {\n    inflationSuccess: 0,\n    inflationNotTime: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InflationPayout // or use PaymentResultAtom to limit types?\n  //   {\n  //       AccountID destination;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InflationPayout\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union InflationResult switch (InflationResultCode code)\n  //   {\n  //   case INFLATION_SUCCESS:\n  //       InflationPayout payouts<>;\n  //   case INFLATION_NOT_TIME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"InflationResult\", {\n    switchOn: xdr.lookup(\"InflationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"inflationSuccess\", \"payouts\"], [\"inflationNotTime\", xdr[\"void\"]()]],\n    arms: {\n      payouts: xdr.varArray(xdr.lookup(\"InflationPayout\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageDataResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_DATA_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_DATA_NOT_SUPPORTED_YET =\n  //           -1, // The network hasn't moved to this protocol change yet\n  //       MANAGE_DATA_NAME_NOT_FOUND =\n  //           -2, // Trying to remove a Data Entry that isn't there\n  //       MANAGE_DATA_LOW_RESERVE = -3, // not enough funds to create a new Data Entry\n  //       MANAGE_DATA_INVALID_NAME = -4 // Name not a valid string\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageDataResultCode\", {\n    manageDataSuccess: 0,\n    manageDataNotSupportedYet: -1,\n    manageDataNameNotFound: -2,\n    manageDataLowReserve: -3,\n    manageDataInvalidName: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageDataResult switch (ManageDataResultCode code)\n  //   {\n  //   case MANAGE_DATA_SUCCESS:\n  //       void;\n  //   case MANAGE_DATA_NOT_SUPPORTED_YET:\n  //   case MANAGE_DATA_NAME_NOT_FOUND:\n  //   case MANAGE_DATA_LOW_RESERVE:\n  //   case MANAGE_DATA_INVALID_NAME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageDataResult\", {\n    switchOn: xdr.lookup(\"ManageDataResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageDataSuccess\", xdr[\"void\"]()], [\"manageDataNotSupportedYet\", xdr[\"void\"]()], [\"manageDataNameNotFound\", xdr[\"void\"]()], [\"manageDataLowReserve\", xdr[\"void\"]()], [\"manageDataInvalidName\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BumpSequenceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BUMP_SEQUENCE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       BUMP_SEQUENCE_BAD_SEQ = -1 // `bumpTo` is not within bounds\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BumpSequenceResultCode\", {\n    bumpSequenceSuccess: 0,\n    bumpSequenceBadSeq: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BumpSequenceResult switch (BumpSequenceResultCode code)\n  //   {\n  //   case BUMP_SEQUENCE_SUCCESS:\n  //       void;\n  //   case BUMP_SEQUENCE_BAD_SEQ:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BumpSequenceResult\", {\n    switchOn: xdr.lookup(\"BumpSequenceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"bumpSequenceSuccess\", xdr[\"void\"]()], [\"bumpSequenceBadSeq\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateClaimableBalanceResultCode\n  //   {\n  //       CREATE_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CREATE_CLAIMABLE_BALANCE_MALFORMED = -1,\n  //       CREATE_CLAIMABLE_BALANCE_LOW_RESERVE = -2,\n  //       CREATE_CLAIMABLE_BALANCE_NO_TRUST = -3,\n  //       CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -4,\n  //       CREATE_CLAIMABLE_BALANCE_UNDERFUNDED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"CreateClaimableBalanceResultCode\", {\n    createClaimableBalanceSuccess: 0,\n    createClaimableBalanceMalformed: -1,\n    createClaimableBalanceLowReserve: -2,\n    createClaimableBalanceNoTrust: -3,\n    createClaimableBalanceNotAuthorized: -4,\n    createClaimableBalanceUnderfunded: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateClaimableBalanceResult switch (\n  //       CreateClaimableBalanceResultCode code)\n  //   {\n  //   case CREATE_CLAIMABLE_BALANCE_SUCCESS:\n  //       ClaimableBalanceID balanceID;\n  //   case CREATE_CLAIMABLE_BALANCE_MALFORMED:\n  //   case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:\n  //   case CREATE_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //   case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"CreateClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createClaimableBalanceSuccess\", \"balanceId\"], [\"createClaimableBalanceMalformed\", xdr[\"void\"]()], [\"createClaimableBalanceLowReserve\", xdr[\"void\"]()], [\"createClaimableBalanceNoTrust\", xdr[\"void\"]()], [\"createClaimableBalanceNotAuthorized\", xdr[\"void\"]()], [\"createClaimableBalanceUnderfunded\", xdr[\"void\"]()]],\n    arms: {\n      balanceId: xdr.lookup(\"ClaimableBalanceId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimClaimableBalanceResultCode\n  //   {\n  //       CLAIM_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM = -2,\n  //       CLAIM_CLAIMABLE_BALANCE_LINE_FULL = -3,\n  //       CLAIM_CLAIMABLE_BALANCE_NO_TRUST = -4,\n  //       CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimClaimableBalanceResultCode\", {\n    claimClaimableBalanceSuccess: 0,\n    claimClaimableBalanceDoesNotExist: -1,\n    claimClaimableBalanceCannotClaim: -2,\n    claimClaimableBalanceLineFull: -3,\n    claimClaimableBalanceNoTrust: -4,\n    claimClaimableBalanceNotAuthorized: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code)\n  //   {\n  //   case CLAIM_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:\n  //   case CLAIM_CLAIMABLE_BALANCE_LINE_FULL:\n  //   case CLAIM_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClaimClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"claimClaimableBalanceSuccess\", xdr[\"void\"]()], [\"claimClaimableBalanceDoesNotExist\", xdr[\"void\"]()], [\"claimClaimableBalanceCannotClaim\", xdr[\"void\"]()], [\"claimClaimableBalanceLineFull\", xdr[\"void\"]()], [\"claimClaimableBalanceNoTrust\", xdr[\"void\"]()], [\"claimClaimableBalanceNotAuthorized\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BeginSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED = -1,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED = -2,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BeginSponsoringFutureReservesResultCode\", {\n    beginSponsoringFutureReservesSuccess: 0,\n    beginSponsoringFutureReservesMalformed: -1,\n    beginSponsoringFutureReservesAlreadySponsored: -2,\n    beginSponsoringFutureReservesRecursive: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BeginSponsoringFutureReservesResult switch (\n  //       BeginSponsoringFutureReservesResultCode code)\n  //   {\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BeginSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"BeginSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"beginSponsoringFutureReservesSuccess\", xdr[\"void\"]()], [\"beginSponsoringFutureReservesMalformed\", xdr[\"void\"]()], [\"beginSponsoringFutureReservesAlreadySponsored\", xdr[\"void\"]()], [\"beginSponsoringFutureReservesRecursive\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EndSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"EndSponsoringFutureReservesResultCode\", {\n    endSponsoringFutureReservesSuccess: 0,\n    endSponsoringFutureReservesNotSponsored: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union EndSponsoringFutureReservesResult switch (\n  //       EndSponsoringFutureReservesResultCode code)\n  //   {\n  //   case END_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"EndSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"EndSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"endSponsoringFutureReservesSuccess\", xdr[\"void\"]()], [\"endSponsoringFutureReservesNotSponsored\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       REVOKE_SPONSORSHIP_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       REVOKE_SPONSORSHIP_DOES_NOT_EXIST = -1,\n  //       REVOKE_SPONSORSHIP_NOT_SPONSOR = -2,\n  //       REVOKE_SPONSORSHIP_LOW_RESERVE = -3,\n  //       REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE = -4,\n  //       REVOKE_SPONSORSHIP_MALFORMED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"RevokeSponsorshipResultCode\", {\n    revokeSponsorshipSuccess: 0,\n    revokeSponsorshipDoesNotExist: -1,\n    revokeSponsorshipNotSponsor: -2,\n    revokeSponsorshipLowReserve: -3,\n    revokeSponsorshipOnlyTransferable: -4,\n    revokeSponsorshipMalformed: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)\n  //   {\n  //   case REVOKE_SPONSORSHIP_SUCCESS:\n  //       void;\n  //   case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:\n  //   case REVOKE_SPONSORSHIP_NOT_SPONSOR:\n  //   case REVOKE_SPONSORSHIP_LOW_RESERVE:\n  //   case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:\n  //   case REVOKE_SPONSORSHIP_MALFORMED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipResult\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipResultCode\"),\n    switchName: \"code\",\n    switches: [[\"revokeSponsorshipSuccess\", xdr[\"void\"]()], [\"revokeSponsorshipDoesNotExist\", xdr[\"void\"]()], [\"revokeSponsorshipNotSponsor\", xdr[\"void\"]()], [\"revokeSponsorshipLowReserve\", xdr[\"void\"]()], [\"revokeSponsorshipOnlyTransferable\", xdr[\"void\"]()], [\"revokeSponsorshipMalformed\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_MALFORMED = -1,\n  //       CLAWBACK_NOT_CLAWBACK_ENABLED = -2,\n  //       CLAWBACK_NO_TRUST = -3,\n  //       CLAWBACK_UNDERFUNDED = -4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClawbackResultCode\", {\n    clawbackSuccess: 0,\n    clawbackMalformed: -1,\n    clawbackNotClawbackEnabled: -2,\n    clawbackNoTrust: -3,\n    clawbackUnderfunded: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackResult switch (ClawbackResultCode code)\n  //   {\n  //   case CLAWBACK_SUCCESS:\n  //       void;\n  //   case CLAWBACK_MALFORMED:\n  //   case CLAWBACK_NOT_CLAWBACK_ENABLED:\n  //   case CLAWBACK_NO_TRUST:\n  //   case CLAWBACK_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackResult\", {\n    switchOn: xdr.lookup(\"ClawbackResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackSuccess\", xdr[\"void\"]()], [\"clawbackMalformed\", xdr[\"void\"]()], [\"clawbackNotClawbackEnabled\", xdr[\"void\"]()], [\"clawbackNoTrust\", xdr[\"void\"]()], [\"clawbackUnderfunded\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackClaimableBalanceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER = -2,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClawbackClaimableBalanceResultCode\", {\n    clawbackClaimableBalanceSuccess: 0,\n    clawbackClaimableBalanceDoesNotExist: -1,\n    clawbackClaimableBalanceNotIssuer: -2,\n    clawbackClaimableBalanceNotClawbackEnabled: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackClaimableBalanceResult switch (\n  //       ClawbackClaimableBalanceResultCode code)\n  //   {\n  //   case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClawbackClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackClaimableBalanceSuccess\", xdr[\"void\"]()], [\"clawbackClaimableBalanceDoesNotExist\", xdr[\"void\"]()], [\"clawbackClaimableBalanceNotIssuer\", xdr[\"void\"]()], [\"clawbackClaimableBalanceNotClawbackEnabled\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetTrustLineFlagsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_TRUST_LINE_FLAGS_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       SET_TRUST_LINE_FLAGS_MALFORMED = -1,\n  //       SET_TRUST_LINE_FLAGS_NO_TRUST_LINE = -2,\n  //       SET_TRUST_LINE_FLAGS_CANT_REVOKE = -3,\n  //       SET_TRUST_LINE_FLAGS_INVALID_STATE = -4,\n  //       SET_TRUST_LINE_FLAGS_LOW_RESERVE = -5 // claimable balances can't be created\n  //                                             // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SetTrustLineFlagsResultCode\", {\n    setTrustLineFlagsSuccess: 0,\n    setTrustLineFlagsMalformed: -1,\n    setTrustLineFlagsNoTrustLine: -2,\n    setTrustLineFlagsCantRevoke: -3,\n    setTrustLineFlagsInvalidState: -4,\n    setTrustLineFlagsLowReserve: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetTrustLineFlagsResult switch (SetTrustLineFlagsResultCode code)\n  //   {\n  //   case SET_TRUST_LINE_FLAGS_SUCCESS:\n  //       void;\n  //   case SET_TRUST_LINE_FLAGS_MALFORMED:\n  //   case SET_TRUST_LINE_FLAGS_NO_TRUST_LINE:\n  //   case SET_TRUST_LINE_FLAGS_CANT_REVOKE:\n  //   case SET_TRUST_LINE_FLAGS_INVALID_STATE:\n  //   case SET_TRUST_LINE_FLAGS_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetTrustLineFlagsResult\", {\n    switchOn: xdr.lookup(\"SetTrustLineFlagsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setTrustLineFlagsSuccess\", xdr[\"void\"]()], [\"setTrustLineFlagsMalformed\", xdr[\"void\"]()], [\"setTrustLineFlagsNoTrustLine\", xdr[\"void\"]()], [\"setTrustLineFlagsCantRevoke\", xdr[\"void\"]()], [\"setTrustLineFlagsInvalidState\", xdr[\"void\"]()], [\"setTrustLineFlagsLowReserve\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolDepositResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_MALFORMED = -1,      // bad input\n  //       LIQUIDITY_POOL_DEPOSIT_NO_TRUST = -2,       // no trust line for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED = -3, // not authorized for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED = -4,    // not enough balance for one of\n  //                                                   // the assets\n  //       LIQUIDITY_POOL_DEPOSIT_LINE_FULL = -5,      // pool share trust line doesn't\n  //                                                   // have sufficient limit\n  //       LIQUIDITY_POOL_DEPOSIT_BAD_PRICE = -6,      // deposit price outside bounds\n  //       LIQUIDITY_POOL_DEPOSIT_POOL_FULL = -7       // pool reserves are full\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LiquidityPoolDepositResultCode\", {\n    liquidityPoolDepositSuccess: 0,\n    liquidityPoolDepositMalformed: -1,\n    liquidityPoolDepositNoTrust: -2,\n    liquidityPoolDepositNotAuthorized: -3,\n    liquidityPoolDepositUnderfunded: -4,\n    liquidityPoolDepositLineFull: -5,\n    liquidityPoolDepositBadPrice: -6,\n    liquidityPoolDepositPoolFull: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_DEPOSIT_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_DEPOSIT_MALFORMED:\n  //   case LIQUIDITY_POOL_DEPOSIT_NO_TRUST:\n  //   case LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:\n  //   case LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_DEPOSIT_LINE_FULL:\n  //   case LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:\n  //   case LIQUIDITY_POOL_DEPOSIT_POOL_FULL:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolDepositResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolDepositResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolDepositSuccess\", xdr[\"void\"]()], [\"liquidityPoolDepositMalformed\", xdr[\"void\"]()], [\"liquidityPoolDepositNoTrust\", xdr[\"void\"]()], [\"liquidityPoolDepositNotAuthorized\", xdr[\"void\"]()], [\"liquidityPoolDepositUnderfunded\", xdr[\"void\"]()], [\"liquidityPoolDepositLineFull\", xdr[\"void\"]()], [\"liquidityPoolDepositBadPrice\", xdr[\"void\"]()], [\"liquidityPoolDepositPoolFull\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolWithdrawResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_MALFORMED = -1,    // bad input\n  //       LIQUIDITY_POOL_WITHDRAW_NO_TRUST = -2,     // no trust line for one of the\n  //                                                  // assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED = -3,  // not enough balance of the\n  //                                                  // pool share\n  //       LIQUIDITY_POOL_WITHDRAW_LINE_FULL = -4,    // would go above limit for one\n  //                                                  // of the assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM = -5 // didn't withdraw enough\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LiquidityPoolWithdrawResultCode\", {\n    liquidityPoolWithdrawSuccess: 0,\n    liquidityPoolWithdrawMalformed: -1,\n    liquidityPoolWithdrawNoTrust: -2,\n    liquidityPoolWithdrawUnderfunded: -3,\n    liquidityPoolWithdrawLineFull: -4,\n    liquidityPoolWithdrawUnderMinimum: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_WITHDRAW_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_WITHDRAW_MALFORMED:\n  //   case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolWithdrawResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolWithdrawResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolWithdrawSuccess\", xdr[\"void\"]()], [\"liquidityPoolWithdrawMalformed\", xdr[\"void\"]()], [\"liquidityPoolWithdrawNoTrust\", xdr[\"void\"]()], [\"liquidityPoolWithdrawUnderfunded\", xdr[\"void\"]()], [\"liquidityPoolWithdrawLineFull\", xdr[\"void\"]()], [\"liquidityPoolWithdrawUnderMinimum\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum InvokeHostFunctionResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       INVOKE_HOST_FUNCTION_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       INVOKE_HOST_FUNCTION_MALFORMED = -1,\n  //       INVOKE_HOST_FUNCTION_TRAPPED = -2,\n  //       INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED = -3,\n  //       INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED = -4,\n  //       INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"InvokeHostFunctionResultCode\", {\n    invokeHostFunctionSuccess: 0,\n    invokeHostFunctionMalformed: -1,\n    invokeHostFunctionTrapped: -2,\n    invokeHostFunctionResourceLimitExceeded: -3,\n    invokeHostFunctionEntryArchived: -4,\n    invokeHostFunctionInsufficientRefundableFee: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union InvokeHostFunctionResult switch (InvokeHostFunctionResultCode code)\n  //   {\n  //   case INVOKE_HOST_FUNCTION_SUCCESS:\n  //       Hash success; // sha256(InvokeHostFunctionSuccessPreImage)\n  //   case INVOKE_HOST_FUNCTION_MALFORMED:\n  //   case INVOKE_HOST_FUNCTION_TRAPPED:\n  //   case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:\n  //   case INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED:\n  //   case INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"InvokeHostFunctionResult\", {\n    switchOn: xdr.lookup(\"InvokeHostFunctionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"invokeHostFunctionSuccess\", \"success\"], [\"invokeHostFunctionMalformed\", xdr[\"void\"]()], [\"invokeHostFunctionTrapped\", xdr[\"void\"]()], [\"invokeHostFunctionResourceLimitExceeded\", xdr[\"void\"]()], [\"invokeHostFunctionEntryArchived\", xdr[\"void\"]()], [\"invokeHostFunctionInsufficientRefundableFee\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ExtendFootprintTTLResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       EXTEND_FOOTPRINT_TTL_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       EXTEND_FOOTPRINT_TTL_MALFORMED = -1,\n  //       EXTEND_FOOTPRINT_TTL_RESOURCE_LIMIT_EXCEEDED = -2,\n  //       EXTEND_FOOTPRINT_TTL_INSUFFICIENT_REFUNDABLE_FEE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ExtendFootprintTtlResultCode\", {\n    extendFootprintTtlSuccess: 0,\n    extendFootprintTtlMalformed: -1,\n    extendFootprintTtlResourceLimitExceeded: -2,\n    extendFootprintTtlInsufficientRefundableFee: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ExtendFootprintTTLResult switch (ExtendFootprintTTLResultCode code)\n  //   {\n  //   case EXTEND_FOOTPRINT_TTL_SUCCESS:\n  //       void;\n  //   case EXTEND_FOOTPRINT_TTL_MALFORMED:\n  //   case EXTEND_FOOTPRINT_TTL_RESOURCE_LIMIT_EXCEEDED:\n  //   case EXTEND_FOOTPRINT_TTL_INSUFFICIENT_REFUNDABLE_FEE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ExtendFootprintTtlResult\", {\n    switchOn: xdr.lookup(\"ExtendFootprintTtlResultCode\"),\n    switchName: \"code\",\n    switches: [[\"extendFootprintTtlSuccess\", xdr[\"void\"]()], [\"extendFootprintTtlMalformed\", xdr[\"void\"]()], [\"extendFootprintTtlResourceLimitExceeded\", xdr[\"void\"]()], [\"extendFootprintTtlInsufficientRefundableFee\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum RestoreFootprintResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       RESTORE_FOOTPRINT_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       RESTORE_FOOTPRINT_MALFORMED = -1,\n  //       RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED = -2,\n  //       RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"RestoreFootprintResultCode\", {\n    restoreFootprintSuccess: 0,\n    restoreFootprintMalformed: -1,\n    restoreFootprintResourceLimitExceeded: -2,\n    restoreFootprintInsufficientRefundableFee: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union RestoreFootprintResult switch (RestoreFootprintResultCode code)\n  //   {\n  //   case RESTORE_FOOTPRINT_SUCCESS:\n  //       void;\n  //   case RESTORE_FOOTPRINT_MALFORMED:\n  //   case RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED:\n  //   case RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RestoreFootprintResult\", {\n    switchOn: xdr.lookup(\"RestoreFootprintResultCode\"),\n    switchName: \"code\",\n    switches: [[\"restoreFootprintSuccess\", xdr[\"void\"]()], [\"restoreFootprintMalformed\", xdr[\"void\"]()], [\"restoreFootprintResourceLimitExceeded\", xdr[\"void\"]()], [\"restoreFootprintInsufficientRefundableFee\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationResultCode\n  //   {\n  //       opINNER = 0, // inner object result is valid\n  //\n  //       opBAD_AUTH = -1,            // too few valid signatures / wrong network\n  //       opNO_ACCOUNT = -2,          // source account was not found\n  //       opNOT_SUPPORTED = -3,       // operation not supported at this time\n  //       opTOO_MANY_SUBENTRIES = -4, // max number of subentries already reached\n  //       opEXCEEDED_WORK_LIMIT = -5, // operation did too much work\n  //       opTOO_MANY_SPONSORING = -6  // account is sponsoring too many entries\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"OperationResultCode\", {\n    opInner: 0,\n    opBadAuth: -1,\n    opNoAccount: -2,\n    opNotSupported: -3,\n    opTooManySubentries: -4,\n    opExceededWorkLimit: -5,\n    opTooManySponsoring: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionResult invokeHostFunctionResult;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLResult extendFootprintTTLResult;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintResult restoreFootprintResult;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResultTr\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountResult\"], [\"payment\", \"paymentResult\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveResult\"], [\"manageSellOffer\", \"manageSellOfferResult\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferResult\"], [\"setOptions\", \"setOptionsResult\"], [\"changeTrust\", \"changeTrustResult\"], [\"allowTrust\", \"allowTrustResult\"], [\"accountMerge\", \"accountMergeResult\"], [\"inflation\", \"inflationResult\"], [\"manageData\", \"manageDataResult\"], [\"bumpSequence\", \"bumpSeqResult\"], [\"manageBuyOffer\", \"manageBuyOfferResult\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendResult\"], [\"createClaimableBalance\", \"createClaimableBalanceResult\"], [\"claimClaimableBalance\", \"claimClaimableBalanceResult\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesResult\"], [\"endSponsoringFutureReserves\", \"endSponsoringFutureReservesResult\"], [\"revokeSponsorship\", \"revokeSponsorshipResult\"], [\"clawback\", \"clawbackResult\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceResult\"], [\"setTrustLineFlags\", \"setTrustLineFlagsResult\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositResult\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawResult\"], [\"invokeHostFunction\", \"invokeHostFunctionResult\"], [\"extendFootprintTtl\", \"extendFootprintTtlResult\"], [\"restoreFootprint\", \"restoreFootprintResult\"]],\n    arms: {\n      createAccountResult: xdr.lookup(\"CreateAccountResult\"),\n      paymentResult: xdr.lookup(\"PaymentResult\"),\n      pathPaymentStrictReceiveResult: xdr.lookup(\"PathPaymentStrictReceiveResult\"),\n      manageSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      createPassiveSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      setOptionsResult: xdr.lookup(\"SetOptionsResult\"),\n      changeTrustResult: xdr.lookup(\"ChangeTrustResult\"),\n      allowTrustResult: xdr.lookup(\"AllowTrustResult\"),\n      accountMergeResult: xdr.lookup(\"AccountMergeResult\"),\n      inflationResult: xdr.lookup(\"InflationResult\"),\n      manageDataResult: xdr.lookup(\"ManageDataResult\"),\n      bumpSeqResult: xdr.lookup(\"BumpSequenceResult\"),\n      manageBuyOfferResult: xdr.lookup(\"ManageBuyOfferResult\"),\n      pathPaymentStrictSendResult: xdr.lookup(\"PathPaymentStrictSendResult\"),\n      createClaimableBalanceResult: xdr.lookup(\"CreateClaimableBalanceResult\"),\n      claimClaimableBalanceResult: xdr.lookup(\"ClaimClaimableBalanceResult\"),\n      beginSponsoringFutureReservesResult: xdr.lookup(\"BeginSponsoringFutureReservesResult\"),\n      endSponsoringFutureReservesResult: xdr.lookup(\"EndSponsoringFutureReservesResult\"),\n      revokeSponsorshipResult: xdr.lookup(\"RevokeSponsorshipResult\"),\n      clawbackResult: xdr.lookup(\"ClawbackResult\"),\n      clawbackClaimableBalanceResult: xdr.lookup(\"ClawbackClaimableBalanceResult\"),\n      setTrustLineFlagsResult: xdr.lookup(\"SetTrustLineFlagsResult\"),\n      liquidityPoolDepositResult: xdr.lookup(\"LiquidityPoolDepositResult\"),\n      liquidityPoolWithdrawResult: xdr.lookup(\"LiquidityPoolWithdrawResult\"),\n      invokeHostFunctionResult: xdr.lookup(\"InvokeHostFunctionResult\"),\n      extendFootprintTtlResult: xdr.lookup(\"ExtendFootprintTtlResult\"),\n      restoreFootprintResult: xdr.lookup(\"RestoreFootprintResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union OperationResult switch (OperationResultCode code)\n  //   {\n  //   case opINNER:\n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionResult invokeHostFunctionResult;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLResult extendFootprintTTLResult;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintResult restoreFootprintResult;\n  //       }\n  //       tr;\n  //   case opBAD_AUTH:\n  //   case opNO_ACCOUNT:\n  //   case opNOT_SUPPORTED:\n  //   case opTOO_MANY_SUBENTRIES:\n  //   case opEXCEEDED_WORK_LIMIT:\n  //   case opTOO_MANY_SPONSORING:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResult\", {\n    switchOn: xdr.lookup(\"OperationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"opInner\", \"tr\"], [\"opBadAuth\", xdr[\"void\"]()], [\"opNoAccount\", xdr[\"void\"]()], [\"opNotSupported\", xdr[\"void\"]()], [\"opTooManySubentries\", xdr[\"void\"]()], [\"opExceededWorkLimit\", xdr[\"void\"]()], [\"opTooManySponsoring\", xdr[\"void\"]()]],\n    arms: {\n      tr: xdr.lookup(\"OperationResultTr\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum TransactionResultCode\n  //   {\n  //       txFEE_BUMP_INNER_SUCCESS = 1, // fee bump inner transaction succeeded\n  //       txSUCCESS = 0,                // all operations succeeded\n  //\n  //       txFAILED = -1, // one of the operations failed (none were applied)\n  //\n  //       txTOO_EARLY = -2,         // ledger closeTime before minTime\n  //       txTOO_LATE = -3,          // ledger closeTime after maxTime\n  //       txMISSING_OPERATION = -4, // no operation was specified\n  //       txBAD_SEQ = -5,           // sequence number does not match source account\n  //\n  //       txBAD_AUTH = -6,             // too few valid signatures / wrong network\n  //       txINSUFFICIENT_BALANCE = -7, // fee would bring account below reserve\n  //       txNO_ACCOUNT = -8,           // source account not found\n  //       txINSUFFICIENT_FEE = -9,     // fee is too small\n  //       txBAD_AUTH_EXTRA = -10,      // unused signatures attached to transaction\n  //       txINTERNAL_ERROR = -11,      // an unknown error occurred\n  //\n  //       txNOT_SUPPORTED = -12,          // transaction type not supported\n  //       txFEE_BUMP_INNER_FAILED = -13,  // fee bump inner transaction failed\n  //       txBAD_SPONSORSHIP = -14,        // sponsorship not confirmed\n  //       txBAD_MIN_SEQ_AGE_OR_GAP = -15, // minSeqAge or minSeqLedgerGap conditions not met\n  //       txMALFORMED = -16,              // precondition is invalid\n  //       txSOROBAN_INVALID = -17         // soroban-specific preconditions were not met\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"TransactionResultCode\", {\n    txFeeBumpInnerSuccess: 1,\n    txSuccess: 0,\n    txFailed: -1,\n    txTooEarly: -2,\n    txTooLate: -3,\n    txMissingOperation: -4,\n    txBadSeq: -5,\n    txBadAuth: -6,\n    txInsufficientBalance: -7,\n    txNoAccount: -8,\n    txInsufficientFee: -9,\n    txBadAuthExtra: -10,\n    txInternalError: -11,\n    txNotSupported: -12,\n    txFeeBumpInnerFailed: -13,\n    txBadSponsorship: -14,\n    txBadMinSeqAgeOrGap: -15,\n    txMalformed: -16,\n    txSorobanInvalid: -17\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr[\"void\"]()], [\"txTooLate\", xdr[\"void\"]()], [\"txMissingOperation\", xdr[\"void\"]()], [\"txBadSeq\", xdr[\"void\"]()], [\"txBadAuth\", xdr[\"void\"]()], [\"txInsufficientBalance\", xdr[\"void\"]()], [\"txNoAccount\", xdr[\"void\"]()], [\"txInsufficientFee\", xdr[\"void\"]()], [\"txBadAuthExtra\", xdr[\"void\"]()], [\"txInternalError\", xdr[\"void\"]()], [\"txNotSupported\", xdr[\"void\"]()], [\"txBadSponsorship\", xdr[\"void\"]()], [\"txBadMinSeqAgeOrGap\", xdr[\"void\"]()], [\"txMalformed\", xdr[\"void\"]()], [\"txSorobanInvalid\", xdr[\"void\"]()]],\n    arms: {\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResult\n  //   {\n  //       // Always 0. Here for binary compatibility.\n  //       int64 feeCharged;\n  //\n  //       union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //       result;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"InnerTransactionResultResult\")], [\"ext\", xdr.lookup(\"InnerTransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResultPair\n  //   {\n  //       Hash transactionHash;          // hash of the inner transaction\n  //       InnerTransactionResult result; // result for the inner transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"InnerTransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txFeeBumpInnerSuccess\", \"innerResultPair\"], [\"txFeeBumpInnerFailed\", \"innerResultPair\"], [\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr[\"void\"]()], [\"txTooLate\", xdr[\"void\"]()], [\"txMissingOperation\", xdr[\"void\"]()], [\"txBadSeq\", xdr[\"void\"]()], [\"txBadAuth\", xdr[\"void\"]()], [\"txInsufficientBalance\", xdr[\"void\"]()], [\"txNoAccount\", xdr[\"void\"]()], [\"txInsufficientFee\", xdr[\"void\"]()], [\"txBadAuthExtra\", xdr[\"void\"]()], [\"txInternalError\", xdr[\"void\"]()], [\"txNotSupported\", xdr[\"void\"]()], [\"txBadSponsorship\", xdr[\"void\"]()], [\"txBadMinSeqAgeOrGap\", xdr[\"void\"]()], [\"txMalformed\", xdr[\"void\"]()], [\"txSorobanInvalid\", xdr[\"void\"]()]],\n    arms: {\n      innerResultPair: xdr.lookup(\"InnerTransactionResultPair\"),\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResult\n  //   {\n  //       int64 feeCharged; // actual fee charged for the transaction\n  //\n  //       union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //       result;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"TransactionResultResult\")], [\"ext\", xdr.lookup(\"TransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Hash[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Hash\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque uint256[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint256\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned int uint32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint32\", xdr.uint());\n\n  // === xdr source ============================================================\n  //\n  //   typedef int int32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int32\", xdr[\"int\"]());\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned hyper uint64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint64\", xdr.uhyper());\n\n  // === xdr source ============================================================\n  //\n  //   typedef hyper int64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int64\", xdr.hyper());\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 TimePoint;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TimePoint\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 Duration;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Duration\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   union ExtensionPoint switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ExtensionPoint\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CryptoKeyType\n  //   {\n  //       KEY_TYPE_ED25519 = 0,\n  //       KEY_TYPE_PRE_AUTH_TX = 1,\n  //       KEY_TYPE_HASH_X = 2,\n  //       KEY_TYPE_ED25519_SIGNED_PAYLOAD = 3,\n  //       // MUXED enum values for supported type are derived from the enum values\n  //       // above by ORing them with 0x100\n  //       KEY_TYPE_MUXED_ED25519 = 0x100\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"CryptoKeyType\", {\n    keyTypeEd25519: 0,\n    keyTypePreAuthTx: 1,\n    keyTypeHashX: 2,\n    keyTypeEd25519SignedPayload: 3,\n    keyTypeMuxedEd25519: 256\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PublicKeyType\n  //   {\n  //       PUBLIC_KEY_TYPE_ED25519 = KEY_TYPE_ED25519\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PublicKeyType\", {\n    publicKeyTypeEd25519: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SignerKeyType\n  //   {\n  //       SIGNER_KEY_TYPE_ED25519 = KEY_TYPE_ED25519,\n  //       SIGNER_KEY_TYPE_PRE_AUTH_TX = KEY_TYPE_PRE_AUTH_TX,\n  //       SIGNER_KEY_TYPE_HASH_X = KEY_TYPE_HASH_X,\n  //       SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD = KEY_TYPE_ED25519_SIGNED_PAYLOAD\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SignerKeyType\", {\n    signerKeyTypeEd25519: 0,\n    signerKeyTypePreAuthTx: 1,\n    signerKeyTypeHashX: 2,\n    signerKeyTypeEd25519SignedPayload: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PublicKey switch (PublicKeyType type)\n  //   {\n  //   case PUBLIC_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PublicKey\", {\n    switchOn: xdr.lookup(\"PublicKeyType\"),\n    switchName: \"type\",\n    switches: [[\"publicKeyTypeEd25519\", \"ed25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"SignerKeyEd25519SignedPayload\", [[\"ed25519\", xdr.lookup(\"Uint256\")], [\"payload\", xdr.varOpaque(64)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SignerKey switch (SignerKeyType type)\n  //   {\n  //   case SIGNER_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case SIGNER_KEY_TYPE_PRE_AUTH_TX:\n  //       /* SHA-256 Hash of TransactionSignaturePayload structure */\n  //       uint256 preAuthTx;\n  //   case SIGNER_KEY_TYPE_HASH_X:\n  //       /* Hash of random 256 bit preimage X */\n  //       uint256 hashX;\n  //   case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:\n  //       struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       } ed25519SignedPayload;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SignerKey\", {\n    switchOn: xdr.lookup(\"SignerKeyType\"),\n    switchName: \"type\",\n    switches: [[\"signerKeyTypeEd25519\", \"ed25519\"], [\"signerKeyTypePreAuthTx\", \"preAuthTx\"], [\"signerKeyTypeHashX\", \"hashX\"], [\"signerKeyTypeEd25519SignedPayload\", \"ed25519SignedPayload\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      preAuthTx: xdr.lookup(\"Uint256\"),\n      hashX: xdr.lookup(\"Uint256\"),\n      ed25519SignedPayload: xdr.lookup(\"SignerKeyEd25519SignedPayload\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Signature<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Signature\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque SignatureHint[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"SignatureHint\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey NodeID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"NodeId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey AccountID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"AccountId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Secret\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Secret\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Public\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Public\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Key\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Key\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Mac\n  //   {\n  //       opaque mac[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Mac\", [[\"mac\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ShortHashSeed\n  //   {\n  //       opaque seed[16];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ShortHashSeed\", [[\"seed\", xdr.opaque(16)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum BinaryFuseFilterType\n  //   {\n  //       BINARY_FUSE_FILTER_8_BIT = 0,\n  //       BINARY_FUSE_FILTER_16_BIT = 1,\n  //       BINARY_FUSE_FILTER_32_BIT = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BinaryFuseFilterType\", {\n    binaryFuseFilter8Bit: 0,\n    binaryFuseFilter16Bit: 1,\n    binaryFuseFilter32Bit: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SerializedBinaryFuseFilter\n  //   {\n  //       BinaryFuseFilterType type;\n  //\n  //       // Seed used to hash input to filter\n  //       ShortHashSeed inputHashSeed;\n  //\n  //       // Seed used for internal filter hash operations\n  //       ShortHashSeed filterSeed;\n  //       uint32 segmentLength;\n  //       uint32 segementLengthMask;\n  //       uint32 segmentCount;\n  //       uint32 segmentCountLength;\n  //       uint32 fingerprintLength; // Length in terms of element count, not bytes\n  //\n  //       // Array of uint8_t, uint16_t, or uint32_t depending on filter type\n  //       opaque fingerprints<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SerializedBinaryFuseFilter\", [[\"type\", xdr.lookup(\"BinaryFuseFilterType\")], [\"inputHashSeed\", xdr.lookup(\"ShortHashSeed\")], [\"filterSeed\", xdr.lookup(\"ShortHashSeed\")], [\"segmentLength\", xdr.lookup(\"Uint32\")], [\"segementLengthMask\", xdr.lookup(\"Uint32\")], [\"segmentCount\", xdr.lookup(\"Uint32\")], [\"segmentCountLength\", xdr.lookup(\"Uint32\")], [\"fingerprintLength\", xdr.lookup(\"Uint32\")], [\"fingerprints\", xdr.varOpaque()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCValType\n  //   {\n  //       SCV_BOOL = 0,\n  //       SCV_VOID = 1,\n  //       SCV_ERROR = 2,\n  //\n  //       // 32 bits is the smallest type in WASM or XDR; no need for u8/u16.\n  //       SCV_U32 = 3,\n  //       SCV_I32 = 4,\n  //\n  //       // 64 bits is naturally supported by both WASM and XDR also.\n  //       SCV_U64 = 5,\n  //       SCV_I64 = 6,\n  //\n  //       // Time-related u64 subtypes with their own functions and formatting.\n  //       SCV_TIMEPOINT = 7,\n  //       SCV_DURATION = 8,\n  //\n  //       // 128 bits is naturally supported by Rust and we use it for Soroban\n  //       // fixed-point arithmetic prices / balances / similar \"quantities\". These\n  //       // are represented in XDR as a pair of 2 u64s.\n  //       SCV_U128 = 9,\n  //       SCV_I128 = 10,\n  //\n  //       // 256 bits is the size of sha256 output, ed25519 keys, and the EVM machine\n  //       // word, so for interop use we include this even though it requires a small\n  //       // amount of Rust guest and/or host library code.\n  //       SCV_U256 = 11,\n  //       SCV_I256 = 12,\n  //\n  //       // Bytes come in 3 flavors, 2 of which have meaningfully different\n  //       // formatting and validity-checking / domain-restriction.\n  //       SCV_BYTES = 13,\n  //       SCV_STRING = 14,\n  //       SCV_SYMBOL = 15,\n  //\n  //       // Vecs and maps are just polymorphic containers of other ScVals.\n  //       SCV_VEC = 16,\n  //       SCV_MAP = 17,\n  //\n  //       // Address is the universal identifier for contracts and classic\n  //       // accounts.\n  //       SCV_ADDRESS = 18,\n  //\n  //       // The following are the internal SCVal variants that are not\n  //       // exposed to the contracts.\n  //       SCV_CONTRACT_INSTANCE = 19,\n  //\n  //       // SCV_LEDGER_KEY_CONTRACT_INSTANCE and SCV_LEDGER_KEY_NONCE are unique\n  //       // symbolic SCVals used as the key for ledger entries for a contract's\n  //       // instance and an address' nonce, respectively.\n  //       SCV_LEDGER_KEY_CONTRACT_INSTANCE = 20,\n  //       SCV_LEDGER_KEY_NONCE = 21\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScValType\", {\n    scvBool: 0,\n    scvVoid: 1,\n    scvError: 2,\n    scvU32: 3,\n    scvI32: 4,\n    scvU64: 5,\n    scvI64: 6,\n    scvTimepoint: 7,\n    scvDuration: 8,\n    scvU128: 9,\n    scvI128: 10,\n    scvU256: 11,\n    scvI256: 12,\n    scvBytes: 13,\n    scvString: 14,\n    scvSymbol: 15,\n    scvVec: 16,\n    scvMap: 17,\n    scvAddress: 18,\n    scvContractInstance: 19,\n    scvLedgerKeyContractInstance: 20,\n    scvLedgerKeyNonce: 21\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SCErrorType\n  //   {\n  //       SCE_CONTRACT = 0,          // Contract-specific, user-defined codes.\n  //       SCE_WASM_VM = 1,           // Errors while interpreting WASM bytecode.\n  //       SCE_CONTEXT = 2,           // Errors in the contract's host context.\n  //       SCE_STORAGE = 3,           // Errors accessing host storage.\n  //       SCE_OBJECT = 4,            // Errors working with host objects.\n  //       SCE_CRYPTO = 5,            // Errors in cryptographic operations.\n  //       SCE_EVENTS = 6,            // Errors while emitting events.\n  //       SCE_BUDGET = 7,            // Errors relating to budget limits.\n  //       SCE_VALUE = 8,             // Errors working with host values or SCVals.\n  //       SCE_AUTH = 9               // Errors from the authentication subsystem.\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScErrorType\", {\n    sceContract: 0,\n    sceWasmVm: 1,\n    sceContext: 2,\n    sceStorage: 3,\n    sceObject: 4,\n    sceCrypto: 5,\n    sceEvents: 6,\n    sceBudget: 7,\n    sceValue: 8,\n    sceAuth: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SCErrorCode\n  //   {\n  //       SCEC_ARITH_DOMAIN = 0,      // Some arithmetic was undefined (overflow, divide-by-zero).\n  //       SCEC_INDEX_BOUNDS = 1,      // Something was indexed beyond its bounds.\n  //       SCEC_INVALID_INPUT = 2,     // User provided some otherwise-bad data.\n  //       SCEC_MISSING_VALUE = 3,     // Some value was required but not provided.\n  //       SCEC_EXISTING_VALUE = 4,    // Some value was provided where not allowed.\n  //       SCEC_EXCEEDED_LIMIT = 5,    // Some arbitrary limit -- gas or otherwise -- was hit.\n  //       SCEC_INVALID_ACTION = 6,    // Data was valid but action requested was not.\n  //       SCEC_INTERNAL_ERROR = 7,    // The host detected an error in its own logic.\n  //       SCEC_UNEXPECTED_TYPE = 8,   // Some type wasn't as expected.\n  //       SCEC_UNEXPECTED_SIZE = 9    // Something's size wasn't as expected.\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScErrorCode\", {\n    scecArithDomain: 0,\n    scecIndexBounds: 1,\n    scecInvalidInput: 2,\n    scecMissingValue: 3,\n    scecExistingValue: 4,\n    scecExceededLimit: 5,\n    scecInvalidAction: 6,\n    scecInternalError: 7,\n    scecUnexpectedType: 8,\n    scecUnexpectedSize: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCError switch (SCErrorType type)\n  //   {\n  //   case SCE_CONTRACT:\n  //       uint32 contractCode;\n  //   case SCE_WASM_VM:\n  //   case SCE_CONTEXT:\n  //   case SCE_STORAGE:\n  //   case SCE_OBJECT:\n  //   case SCE_CRYPTO:\n  //   case SCE_EVENTS:\n  //   case SCE_BUDGET:\n  //   case SCE_VALUE:\n  //   case SCE_AUTH:\n  //       SCErrorCode code;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScError\", {\n    switchOn: xdr.lookup(\"ScErrorType\"),\n    switchName: \"type\",\n    switches: [[\"sceContract\", \"contractCode\"], [\"sceWasmVm\", \"code\"], [\"sceContext\", \"code\"], [\"sceStorage\", \"code\"], [\"sceObject\", \"code\"], [\"sceCrypto\", \"code\"], [\"sceEvents\", \"code\"], [\"sceBudget\", \"code\"], [\"sceValue\", \"code\"], [\"sceAuth\", \"code\"]],\n    arms: {\n      contractCode: xdr.lookup(\"Uint32\"),\n      code: xdr.lookup(\"ScErrorCode\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct UInt128Parts {\n  //       uint64 hi;\n  //       uint64 lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UInt128Parts\", [[\"hi\", xdr.lookup(\"Uint64\")], [\"lo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Int128Parts {\n  //       int64 hi;\n  //       uint64 lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Int128Parts\", [[\"hi\", xdr.lookup(\"Int64\")], [\"lo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct UInt256Parts {\n  //       uint64 hi_hi;\n  //       uint64 hi_lo;\n  //       uint64 lo_hi;\n  //       uint64 lo_lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UInt256Parts\", [[\"hiHi\", xdr.lookup(\"Uint64\")], [\"hiLo\", xdr.lookup(\"Uint64\")], [\"loHi\", xdr.lookup(\"Uint64\")], [\"loLo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Int256Parts {\n  //       int64 hi_hi;\n  //       uint64 hi_lo;\n  //       uint64 lo_hi;\n  //       uint64 lo_lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Int256Parts\", [[\"hiHi\", xdr.lookup(\"Int64\")], [\"hiLo\", xdr.lookup(\"Uint64\")], [\"loHi\", xdr.lookup(\"Uint64\")], [\"loLo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractExecutableType\n  //   {\n  //       CONTRACT_EXECUTABLE_WASM = 0,\n  //       CONTRACT_EXECUTABLE_STELLAR_ASSET = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractExecutableType\", {\n    contractExecutableWasm: 0,\n    contractExecutableStellarAsset: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ContractExecutable switch (ContractExecutableType type)\n  //   {\n  //   case CONTRACT_EXECUTABLE_WASM:\n  //       Hash wasm_hash;\n  //   case CONTRACT_EXECUTABLE_STELLAR_ASSET:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ContractExecutable\", {\n    switchOn: xdr.lookup(\"ContractExecutableType\"),\n    switchName: \"type\",\n    switches: [[\"contractExecutableWasm\", \"wasmHash\"], [\"contractExecutableStellarAsset\", xdr[\"void\"]()]],\n    arms: {\n      wasmHash: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SCAddressType\n  //   {\n  //       SC_ADDRESS_TYPE_ACCOUNT = 0,\n  //       SC_ADDRESS_TYPE_CONTRACT = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScAddressType\", {\n    scAddressTypeAccount: 0,\n    scAddressTypeContract: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCAddress switch (SCAddressType type)\n  //   {\n  //   case SC_ADDRESS_TYPE_ACCOUNT:\n  //       AccountID accountId;\n  //   case SC_ADDRESS_TYPE_CONTRACT:\n  //       Hash contractId;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScAddress\", {\n    switchOn: xdr.lookup(\"ScAddressType\"),\n    switchName: \"type\",\n    switches: [[\"scAddressTypeAccount\", \"accountId\"], [\"scAddressTypeContract\", \"contractId\"]],\n    arms: {\n      accountId: xdr.lookup(\"AccountId\"),\n      contractId: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const SCSYMBOL_LIMIT = 32;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"SCSYMBOL_LIMIT\", 32);\n\n  // === xdr source ============================================================\n  //\n  //   typedef SCVal SCVec<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScVec\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   typedef SCMapEntry SCMap<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScMap\", xdr.varArray(xdr.lookup(\"ScMapEntry\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque SCBytes<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScBytes\", xdr.varOpaque());\n\n  // === xdr source ============================================================\n  //\n  //   typedef string SCString<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScString\", xdr.string());\n\n  // === xdr source ============================================================\n  //\n  //   typedef string SCSymbol<SCSYMBOL_LIMIT>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScSymbol\", xdr.string(SCSYMBOL_LIMIT));\n\n  // === xdr source ============================================================\n  //\n  //   struct SCNonceKey {\n  //       int64 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScNonceKey\", [[\"nonce\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCContractInstance {\n  //       ContractExecutable executable;\n  //       SCMap* storage;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScContractInstance\", [[\"executable\", xdr.lookup(\"ContractExecutable\")], [\"storage\", xdr.option(xdr.lookup(\"ScMap\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCVal switch (SCValType type)\n  //   {\n  //\n  //   case SCV_BOOL:\n  //       bool b;\n  //   case SCV_VOID:\n  //       void;\n  //   case SCV_ERROR:\n  //       SCError error;\n  //\n  //   case SCV_U32:\n  //       uint32 u32;\n  //   case SCV_I32:\n  //       int32 i32;\n  //\n  //   case SCV_U64:\n  //       uint64 u64;\n  //   case SCV_I64:\n  //       int64 i64;\n  //   case SCV_TIMEPOINT:\n  //       TimePoint timepoint;\n  //   case SCV_DURATION:\n  //       Duration duration;\n  //\n  //   case SCV_U128:\n  //       UInt128Parts u128;\n  //   case SCV_I128:\n  //       Int128Parts i128;\n  //\n  //   case SCV_U256:\n  //       UInt256Parts u256;\n  //   case SCV_I256:\n  //       Int256Parts i256;\n  //\n  //   case SCV_BYTES:\n  //       SCBytes bytes;\n  //   case SCV_STRING:\n  //       SCString str;\n  //   case SCV_SYMBOL:\n  //       SCSymbol sym;\n  //\n  //   // Vec and Map are recursive so need to live\n  //   // behind an option, due to xdrpp limitations.\n  //   case SCV_VEC:\n  //       SCVec *vec;\n  //   case SCV_MAP:\n  //       SCMap *map;\n  //\n  //   case SCV_ADDRESS:\n  //       SCAddress address;\n  //\n  //   // Special SCVals reserved for system-constructed contract-data\n  //   // ledger keys, not generally usable elsewhere.\n  //   case SCV_LEDGER_KEY_CONTRACT_INSTANCE:\n  //       void;\n  //   case SCV_LEDGER_KEY_NONCE:\n  //       SCNonceKey nonce_key;\n  //\n  //   case SCV_CONTRACT_INSTANCE:\n  //       SCContractInstance instance;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScVal\", {\n    switchOn: xdr.lookup(\"ScValType\"),\n    switchName: \"type\",\n    switches: [[\"scvBool\", \"b\"], [\"scvVoid\", xdr[\"void\"]()], [\"scvError\", \"error\"], [\"scvU32\", \"u32\"], [\"scvI32\", \"i32\"], [\"scvU64\", \"u64\"], [\"scvI64\", \"i64\"], [\"scvTimepoint\", \"timepoint\"], [\"scvDuration\", \"duration\"], [\"scvU128\", \"u128\"], [\"scvI128\", \"i128\"], [\"scvU256\", \"u256\"], [\"scvI256\", \"i256\"], [\"scvBytes\", \"bytes\"], [\"scvString\", \"str\"], [\"scvSymbol\", \"sym\"], [\"scvVec\", \"vec\"], [\"scvMap\", \"map\"], [\"scvAddress\", \"address\"], [\"scvLedgerKeyContractInstance\", xdr[\"void\"]()], [\"scvLedgerKeyNonce\", \"nonceKey\"], [\"scvContractInstance\", \"instance\"]],\n    arms: {\n      b: xdr.bool(),\n      error: xdr.lookup(\"ScError\"),\n      u32: xdr.lookup(\"Uint32\"),\n      i32: xdr.lookup(\"Int32\"),\n      u64: xdr.lookup(\"Uint64\"),\n      i64: xdr.lookup(\"Int64\"),\n      timepoint: xdr.lookup(\"TimePoint\"),\n      duration: xdr.lookup(\"Duration\"),\n      u128: xdr.lookup(\"UInt128Parts\"),\n      i128: xdr.lookup(\"Int128Parts\"),\n      u256: xdr.lookup(\"UInt256Parts\"),\n      i256: xdr.lookup(\"Int256Parts\"),\n      bytes: xdr.lookup(\"ScBytes\"),\n      str: xdr.lookup(\"ScString\"),\n      sym: xdr.lookup(\"ScSymbol\"),\n      vec: xdr.option(xdr.lookup(\"ScVec\")),\n      map: xdr.option(xdr.lookup(\"ScMap\")),\n      address: xdr.lookup(\"ScAddress\"),\n      nonceKey: xdr.lookup(\"ScNonceKey\"),\n      instance: xdr.lookup(\"ScContractInstance\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCMapEntry\n  //   {\n  //       SCVal key;\n  //       SCVal val;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScMapEntry\", [[\"key\", xdr.lookup(\"ScVal\")], [\"val\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCEnvMetaKind\n  //   {\n  //       SC_ENV_META_KIND_INTERFACE_VERSION = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScEnvMetaKind\", {\n    scEnvMetaKindInterfaceVersion: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct {\n  //           uint32 protocol;\n  //           uint32 preRelease;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScEnvMetaEntryInterfaceVersion\", [[\"protocol\", xdr.lookup(\"Uint32\")], [\"preRelease\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCEnvMetaEntry switch (SCEnvMetaKind kind)\n  //   {\n  //   case SC_ENV_META_KIND_INTERFACE_VERSION:\n  //       struct {\n  //           uint32 protocol;\n  //           uint32 preRelease;\n  //       } interfaceVersion;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScEnvMetaEntry\", {\n    switchOn: xdr.lookup(\"ScEnvMetaKind\"),\n    switchName: \"kind\",\n    switches: [[\"scEnvMetaKindInterfaceVersion\", \"interfaceVersion\"]],\n    arms: {\n      interfaceVersion: xdr.lookup(\"ScEnvMetaEntryInterfaceVersion\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCMetaV0\n  //   {\n  //       string key<>;\n  //       string val<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScMetaV0\", [[\"key\", xdr.string()], [\"val\", xdr.string()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCMetaKind\n  //   {\n  //       SC_META_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScMetaKind\", {\n    scMetaV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCMetaEntry switch (SCMetaKind kind)\n  //   {\n  //   case SC_META_V0:\n  //       SCMetaV0 v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScMetaEntry\", {\n    switchOn: xdr.lookup(\"ScMetaKind\"),\n    switchName: \"kind\",\n    switches: [[\"scMetaV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ScMetaV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const SC_SPEC_DOC_LIMIT = 1024;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"SC_SPEC_DOC_LIMIT\", 1024);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCSpecType\n  //   {\n  //       SC_SPEC_TYPE_VAL = 0,\n  //\n  //       // Types with no parameters.\n  //       SC_SPEC_TYPE_BOOL = 1,\n  //       SC_SPEC_TYPE_VOID = 2,\n  //       SC_SPEC_TYPE_ERROR = 3,\n  //       SC_SPEC_TYPE_U32 = 4,\n  //       SC_SPEC_TYPE_I32 = 5,\n  //       SC_SPEC_TYPE_U64 = 6,\n  //       SC_SPEC_TYPE_I64 = 7,\n  //       SC_SPEC_TYPE_TIMEPOINT = 8,\n  //       SC_SPEC_TYPE_DURATION = 9,\n  //       SC_SPEC_TYPE_U128 = 10,\n  //       SC_SPEC_TYPE_I128 = 11,\n  //       SC_SPEC_TYPE_U256 = 12,\n  //       SC_SPEC_TYPE_I256 = 13,\n  //       SC_SPEC_TYPE_BYTES = 14,\n  //       SC_SPEC_TYPE_STRING = 16,\n  //       SC_SPEC_TYPE_SYMBOL = 17,\n  //       SC_SPEC_TYPE_ADDRESS = 19,\n  //\n  //       // Types with parameters.\n  //       SC_SPEC_TYPE_OPTION = 1000,\n  //       SC_SPEC_TYPE_RESULT = 1001,\n  //       SC_SPEC_TYPE_VEC = 1002,\n  //       SC_SPEC_TYPE_MAP = 1004,\n  //       SC_SPEC_TYPE_TUPLE = 1005,\n  //       SC_SPEC_TYPE_BYTES_N = 1006,\n  //\n  //       // User defined types.\n  //       SC_SPEC_TYPE_UDT = 2000\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScSpecType\", {\n    scSpecTypeVal: 0,\n    scSpecTypeBool: 1,\n    scSpecTypeVoid: 2,\n    scSpecTypeError: 3,\n    scSpecTypeU32: 4,\n    scSpecTypeI32: 5,\n    scSpecTypeU64: 6,\n    scSpecTypeI64: 7,\n    scSpecTypeTimepoint: 8,\n    scSpecTypeDuration: 9,\n    scSpecTypeU128: 10,\n    scSpecTypeI128: 11,\n    scSpecTypeU256: 12,\n    scSpecTypeI256: 13,\n    scSpecTypeBytes: 14,\n    scSpecTypeString: 16,\n    scSpecTypeSymbol: 17,\n    scSpecTypeAddress: 19,\n    scSpecTypeOption: 1000,\n    scSpecTypeResult: 1001,\n    scSpecTypeVec: 1002,\n    scSpecTypeMap: 1004,\n    scSpecTypeTuple: 1005,\n    scSpecTypeBytesN: 1006,\n    scSpecTypeUdt: 2000\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeOption\n  //   {\n  //       SCSpecTypeDef valueType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeOption\", [[\"valueType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeResult\n  //   {\n  //       SCSpecTypeDef okType;\n  //       SCSpecTypeDef errorType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeResult\", [[\"okType\", xdr.lookup(\"ScSpecTypeDef\")], [\"errorType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeVec\n  //   {\n  //       SCSpecTypeDef elementType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeVec\", [[\"elementType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeMap\n  //   {\n  //       SCSpecTypeDef keyType;\n  //       SCSpecTypeDef valueType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeMap\", [[\"keyType\", xdr.lookup(\"ScSpecTypeDef\")], [\"valueType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeTuple\n  //   {\n  //       SCSpecTypeDef valueTypes<12>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeTuple\", [[\"valueTypes\", xdr.varArray(xdr.lookup(\"ScSpecTypeDef\"), 12)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeBytesN\n  //   {\n  //       uint32 n;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeBytesN\", [[\"n\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeUDT\n  //   {\n  //       string name<60>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeUdt\", [[\"name\", xdr.string(60)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCSpecTypeDef switch (SCSpecType type)\n  //   {\n  //   case SC_SPEC_TYPE_VAL:\n  //   case SC_SPEC_TYPE_BOOL:\n  //   case SC_SPEC_TYPE_VOID:\n  //   case SC_SPEC_TYPE_ERROR:\n  //   case SC_SPEC_TYPE_U32:\n  //   case SC_SPEC_TYPE_I32:\n  //   case SC_SPEC_TYPE_U64:\n  //   case SC_SPEC_TYPE_I64:\n  //   case SC_SPEC_TYPE_TIMEPOINT:\n  //   case SC_SPEC_TYPE_DURATION:\n  //   case SC_SPEC_TYPE_U128:\n  //   case SC_SPEC_TYPE_I128:\n  //   case SC_SPEC_TYPE_U256:\n  //   case SC_SPEC_TYPE_I256:\n  //   case SC_SPEC_TYPE_BYTES:\n  //   case SC_SPEC_TYPE_STRING:\n  //   case SC_SPEC_TYPE_SYMBOL:\n  //   case SC_SPEC_TYPE_ADDRESS:\n  //       void;\n  //   case SC_SPEC_TYPE_OPTION:\n  //       SCSpecTypeOption option;\n  //   case SC_SPEC_TYPE_RESULT:\n  //       SCSpecTypeResult result;\n  //   case SC_SPEC_TYPE_VEC:\n  //       SCSpecTypeVec vec;\n  //   case SC_SPEC_TYPE_MAP:\n  //       SCSpecTypeMap map;\n  //   case SC_SPEC_TYPE_TUPLE:\n  //       SCSpecTypeTuple tuple;\n  //   case SC_SPEC_TYPE_BYTES_N:\n  //       SCSpecTypeBytesN bytesN;\n  //   case SC_SPEC_TYPE_UDT:\n  //       SCSpecTypeUDT udt;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScSpecTypeDef\", {\n    switchOn: xdr.lookup(\"ScSpecType\"),\n    switchName: \"type\",\n    switches: [[\"scSpecTypeVal\", xdr[\"void\"]()], [\"scSpecTypeBool\", xdr[\"void\"]()], [\"scSpecTypeVoid\", xdr[\"void\"]()], [\"scSpecTypeError\", xdr[\"void\"]()], [\"scSpecTypeU32\", xdr[\"void\"]()], [\"scSpecTypeI32\", xdr[\"void\"]()], [\"scSpecTypeU64\", xdr[\"void\"]()], [\"scSpecTypeI64\", xdr[\"void\"]()], [\"scSpecTypeTimepoint\", xdr[\"void\"]()], [\"scSpecTypeDuration\", xdr[\"void\"]()], [\"scSpecTypeU128\", xdr[\"void\"]()], [\"scSpecTypeI128\", xdr[\"void\"]()], [\"scSpecTypeU256\", xdr[\"void\"]()], [\"scSpecTypeI256\", xdr[\"void\"]()], [\"scSpecTypeBytes\", xdr[\"void\"]()], [\"scSpecTypeString\", xdr[\"void\"]()], [\"scSpecTypeSymbol\", xdr[\"void\"]()], [\"scSpecTypeAddress\", xdr[\"void\"]()], [\"scSpecTypeOption\", \"option\"], [\"scSpecTypeResult\", \"result\"], [\"scSpecTypeVec\", \"vec\"], [\"scSpecTypeMap\", \"map\"], [\"scSpecTypeTuple\", \"tuple\"], [\"scSpecTypeBytesN\", \"bytesN\"], [\"scSpecTypeUdt\", \"udt\"]],\n    arms: {\n      option: xdr.lookup(\"ScSpecTypeOption\"),\n      result: xdr.lookup(\"ScSpecTypeResult\"),\n      vec: xdr.lookup(\"ScSpecTypeVec\"),\n      map: xdr.lookup(\"ScSpecTypeMap\"),\n      tuple: xdr.lookup(\"ScSpecTypeTuple\"),\n      bytesN: xdr.lookup(\"ScSpecTypeBytesN\"),\n      udt: xdr.lookup(\"ScSpecTypeUdt\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTStructFieldV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<30>;\n  //       SCSpecTypeDef type;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtStructFieldV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(30)], [\"type\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTStructV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTStructFieldV0 fields<40>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtStructV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"fields\", xdr.varArray(xdr.lookup(\"ScSpecUdtStructFieldV0\"), 40)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTUnionCaseVoidV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtUnionCaseVoidV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTUnionCaseTupleV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //       SCSpecTypeDef type<12>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtUnionCaseTupleV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)], [\"type\", xdr.varArray(xdr.lookup(\"ScSpecTypeDef\"), 12)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCSpecUDTUnionCaseV0Kind\n  //   {\n  //       SC_SPEC_UDT_UNION_CASE_VOID_V0 = 0,\n  //       SC_SPEC_UDT_UNION_CASE_TUPLE_V0 = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScSpecUdtUnionCaseV0Kind\", {\n    scSpecUdtUnionCaseVoidV0: 0,\n    scSpecUdtUnionCaseTupleV0: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCSpecUDTUnionCaseV0 switch (SCSpecUDTUnionCaseV0Kind kind)\n  //   {\n  //   case SC_SPEC_UDT_UNION_CASE_VOID_V0:\n  //       SCSpecUDTUnionCaseVoidV0 voidCase;\n  //   case SC_SPEC_UDT_UNION_CASE_TUPLE_V0:\n  //       SCSpecUDTUnionCaseTupleV0 tupleCase;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScSpecUdtUnionCaseV0\", {\n    switchOn: xdr.lookup(\"ScSpecUdtUnionCaseV0Kind\"),\n    switchName: \"kind\",\n    switches: [[\"scSpecUdtUnionCaseVoidV0\", \"voidCase\"], [\"scSpecUdtUnionCaseTupleV0\", \"tupleCase\"]],\n    arms: {\n      voidCase: xdr.lookup(\"ScSpecUdtUnionCaseVoidV0\"),\n      tupleCase: xdr.lookup(\"ScSpecUdtUnionCaseTupleV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTUnionV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTUnionCaseV0 cases<50>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtUnionV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"cases\", xdr.varArray(xdr.lookup(\"ScSpecUdtUnionCaseV0\"), 50)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTEnumCaseV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //       uint32 value;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtEnumCaseV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)], [\"value\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTEnumV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTEnumCaseV0 cases<50>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtEnumV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"cases\", xdr.varArray(xdr.lookup(\"ScSpecUdtEnumCaseV0\"), 50)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTErrorEnumCaseV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //       uint32 value;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtErrorEnumCaseV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)], [\"value\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTErrorEnumV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTErrorEnumCaseV0 cases<50>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtErrorEnumV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"cases\", xdr.varArray(xdr.lookup(\"ScSpecUdtErrorEnumCaseV0\"), 50)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecFunctionInputV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<30>;\n  //       SCSpecTypeDef type;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecFunctionInputV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(30)], [\"type\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecFunctionV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       SCSymbol name;\n  //       SCSpecFunctionInputV0 inputs<10>;\n  //       SCSpecTypeDef outputs<1>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecFunctionV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.lookup(\"ScSymbol\")], [\"inputs\", xdr.varArray(xdr.lookup(\"ScSpecFunctionInputV0\"), 10)], [\"outputs\", xdr.varArray(xdr.lookup(\"ScSpecTypeDef\"), 1)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCSpecEntryKind\n  //   {\n  //       SC_SPEC_ENTRY_FUNCTION_V0 = 0,\n  //       SC_SPEC_ENTRY_UDT_STRUCT_V0 = 1,\n  //       SC_SPEC_ENTRY_UDT_UNION_V0 = 2,\n  //       SC_SPEC_ENTRY_UDT_ENUM_V0 = 3,\n  //       SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0 = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScSpecEntryKind\", {\n    scSpecEntryFunctionV0: 0,\n    scSpecEntryUdtStructV0: 1,\n    scSpecEntryUdtUnionV0: 2,\n    scSpecEntryUdtEnumV0: 3,\n    scSpecEntryUdtErrorEnumV0: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCSpecEntry switch (SCSpecEntryKind kind)\n  //   {\n  //   case SC_SPEC_ENTRY_FUNCTION_V0:\n  //       SCSpecFunctionV0 functionV0;\n  //   case SC_SPEC_ENTRY_UDT_STRUCT_V0:\n  //       SCSpecUDTStructV0 udtStructV0;\n  //   case SC_SPEC_ENTRY_UDT_UNION_V0:\n  //       SCSpecUDTUnionV0 udtUnionV0;\n  //   case SC_SPEC_ENTRY_UDT_ENUM_V0:\n  //       SCSpecUDTEnumV0 udtEnumV0;\n  //   case SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0:\n  //       SCSpecUDTErrorEnumV0 udtErrorEnumV0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScSpecEntry\", {\n    switchOn: xdr.lookup(\"ScSpecEntryKind\"),\n    switchName: \"kind\",\n    switches: [[\"scSpecEntryFunctionV0\", \"functionV0\"], [\"scSpecEntryUdtStructV0\", \"udtStructV0\"], [\"scSpecEntryUdtUnionV0\", \"udtUnionV0\"], [\"scSpecEntryUdtEnumV0\", \"udtEnumV0\"], [\"scSpecEntryUdtErrorEnumV0\", \"udtErrorEnumV0\"]],\n    arms: {\n      functionV0: xdr.lookup(\"ScSpecFunctionV0\"),\n      udtStructV0: xdr.lookup(\"ScSpecUdtStructV0\"),\n      udtUnionV0: xdr.lookup(\"ScSpecUdtUnionV0\"),\n      udtEnumV0: xdr.lookup(\"ScSpecUdtEnumV0\"),\n      udtErrorEnumV0: xdr.lookup(\"ScSpecUdtErrorEnumV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractExecutionLanesV0\n  //   {\n  //       // maximum number of Soroban transactions per ledger\n  //       uint32 ledgerMaxTxCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractExecutionLanesV0\", [[\"ledgerMaxTxCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractComputeV0\n  //   {\n  //       // Maximum instructions per ledger\n  //       int64 ledgerMaxInstructions;\n  //       // Maximum instructions per transaction\n  //       int64 txMaxInstructions;\n  //       // Cost of 10000 instructions\n  //       int64 feeRatePerInstructionsIncrement;\n  //\n  //       // Memory limit per transaction. Unlike instructions, there is no fee\n  //       // for memory, just the limit.\n  //       uint32 txMemoryLimit;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractComputeV0\", [[\"ledgerMaxInstructions\", xdr.lookup(\"Int64\")], [\"txMaxInstructions\", xdr.lookup(\"Int64\")], [\"feeRatePerInstructionsIncrement\", xdr.lookup(\"Int64\")], [\"txMemoryLimit\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractLedgerCostV0\n  //   {\n  //       // Maximum number of ledger entry read operations per ledger\n  //       uint32 ledgerMaxReadLedgerEntries;\n  //       // Maximum number of bytes that can be read per ledger\n  //       uint32 ledgerMaxReadBytes;\n  //       // Maximum number of ledger entry write operations per ledger\n  //       uint32 ledgerMaxWriteLedgerEntries;\n  //       // Maximum number of bytes that can be written per ledger\n  //       uint32 ledgerMaxWriteBytes;\n  //\n  //       // Maximum number of ledger entry read operations per transaction\n  //       uint32 txMaxReadLedgerEntries;\n  //       // Maximum number of bytes that can be read per transaction\n  //       uint32 txMaxReadBytes;\n  //       // Maximum number of ledger entry write operations per transaction\n  //       uint32 txMaxWriteLedgerEntries;\n  //       // Maximum number of bytes that can be written per transaction\n  //       uint32 txMaxWriteBytes;\n  //\n  //       int64 feeReadLedgerEntry;  // Fee per ledger entry read\n  //       int64 feeWriteLedgerEntry; // Fee per ledger entry write\n  //\n  //       int64 feeRead1KB;  // Fee for reading 1KB\n  //\n  //       // The following parameters determine the write fee per 1KB.\n  //       // Write fee grows linearly until bucket list reaches this size\n  //       int64 bucketListTargetSizeBytes;\n  //       // Fee per 1KB write when the bucket list is empty\n  //       int64 writeFee1KBBucketListLow;\n  //       // Fee per 1KB write when the bucket list has reached `bucketListTargetSizeBytes`\n  //       int64 writeFee1KBBucketListHigh;\n  //       // Write fee multiplier for any additional data past the first `bucketListTargetSizeBytes`\n  //       uint32 bucketListWriteFeeGrowthFactor;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractLedgerCostV0\", [[\"ledgerMaxReadLedgerEntries\", xdr.lookup(\"Uint32\")], [\"ledgerMaxReadBytes\", xdr.lookup(\"Uint32\")], [\"ledgerMaxWriteLedgerEntries\", xdr.lookup(\"Uint32\")], [\"ledgerMaxWriteBytes\", xdr.lookup(\"Uint32\")], [\"txMaxReadLedgerEntries\", xdr.lookup(\"Uint32\")], [\"txMaxReadBytes\", xdr.lookup(\"Uint32\")], [\"txMaxWriteLedgerEntries\", xdr.lookup(\"Uint32\")], [\"txMaxWriteBytes\", xdr.lookup(\"Uint32\")], [\"feeReadLedgerEntry\", xdr.lookup(\"Int64\")], [\"feeWriteLedgerEntry\", xdr.lookup(\"Int64\")], [\"feeRead1Kb\", xdr.lookup(\"Int64\")], [\"bucketListTargetSizeBytes\", xdr.lookup(\"Int64\")], [\"writeFee1KbBucketListLow\", xdr.lookup(\"Int64\")], [\"writeFee1KbBucketListHigh\", xdr.lookup(\"Int64\")], [\"bucketListWriteFeeGrowthFactor\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractHistoricalDataV0\n  //   {\n  //       int64 feeHistorical1KB; // Fee for storing 1KB in archives\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractHistoricalDataV0\", [[\"feeHistorical1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractEventsV0\n  //   {\n  //       // Maximum size of events that a contract call can emit.\n  //       uint32 txMaxContractEventsSizeBytes;\n  //       // Fee for generating 1KB of contract events.\n  //       int64 feeContractEvents1KB;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractEventsV0\", [[\"txMaxContractEventsSizeBytes\", xdr.lookup(\"Uint32\")], [\"feeContractEvents1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractBandwidthV0\n  //   {\n  //       // Maximum sum of all transaction sizes in the ledger in bytes\n  //       uint32 ledgerMaxTxsSizeBytes;\n  //       // Maximum size in bytes for a transaction\n  //       uint32 txMaxSizeBytes;\n  //\n  //       // Fee for 1 KB of transaction size\n  //       int64 feeTxSize1KB;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractBandwidthV0\", [[\"ledgerMaxTxsSizeBytes\", xdr.lookup(\"Uint32\")], [\"txMaxSizeBytes\", xdr.lookup(\"Uint32\")], [\"feeTxSize1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractCostType {\n  //       // Cost of running 1 wasm instruction\n  //       WasmInsnExec = 0,\n  //       // Cost of allocating a slice of memory (in bytes)\n  //       MemAlloc = 1,\n  //       // Cost of copying a slice of bytes into a pre-allocated memory\n  //       MemCpy = 2,\n  //       // Cost of comparing two slices of memory\n  //       MemCmp = 3,\n  //       // Cost of a host function dispatch, not including the actual work done by\n  //       // the function nor the cost of VM invocation machinary\n  //       DispatchHostFunction = 4,\n  //       // Cost of visiting a host object from the host object storage. Exists to\n  //       // make sure some baseline cost coverage, i.e. repeatly visiting objects\n  //       // by the guest will always incur some charges.\n  //       VisitObject = 5,\n  //       // Cost of serializing an xdr object to bytes\n  //       ValSer = 6,\n  //       // Cost of deserializing an xdr object from bytes\n  //       ValDeser = 7,\n  //       // Cost of computing the sha256 hash from bytes\n  //       ComputeSha256Hash = 8,\n  //       // Cost of computing the ed25519 pubkey from bytes\n  //       ComputeEd25519PubKey = 9,\n  //       // Cost of verifying ed25519 signature of a payload.\n  //       VerifyEd25519Sig = 10,\n  //       // Cost of instantiation a VM from wasm bytes code.\n  //       VmInstantiation = 11,\n  //       // Cost of instantiation a VM from a cached state.\n  //       VmCachedInstantiation = 12,\n  //       // Cost of invoking a function on the VM. If the function is a host function,\n  //       // additional cost will be covered by `DispatchHostFunction`.\n  //       InvokeVmFunction = 13,\n  //       // Cost of computing a keccak256 hash from bytes.\n  //       ComputeKeccak256Hash = 14,\n  //       // Cost of decoding an ECDSA signature computed from a 256-bit prime modulus\n  //       // curve (e.g. secp256k1 and secp256r1)\n  //       DecodeEcdsaCurve256Sig = 15,\n  //       // Cost of recovering an ECDSA secp256k1 key from a signature.\n  //       RecoverEcdsaSecp256k1Key = 16,\n  //       // Cost of int256 addition (`+`) and subtraction (`-`) operations\n  //       Int256AddSub = 17,\n  //       // Cost of int256 multiplication (`*`) operation\n  //       Int256Mul = 18,\n  //       // Cost of int256 division (`/`) operation\n  //       Int256Div = 19,\n  //       // Cost of int256 power (`exp`) operation\n  //       Int256Pow = 20,\n  //       // Cost of int256 shift (`shl`, `shr`) operation\n  //       Int256Shift = 21,\n  //       // Cost of drawing random bytes using a ChaCha20 PRNG\n  //       ChaCha20DrawBytes = 22,\n  //\n  //       // Cost of parsing wasm bytes that only encode instructions.\n  //       ParseWasmInstructions = 23,\n  //       // Cost of parsing a known number of wasm functions.\n  //       ParseWasmFunctions = 24,\n  //       // Cost of parsing a known number of wasm globals.\n  //       ParseWasmGlobals = 25,\n  //       // Cost of parsing a known number of wasm table entries.\n  //       ParseWasmTableEntries = 26,\n  //       // Cost of parsing a known number of wasm types.\n  //       ParseWasmTypes = 27,\n  //       // Cost of parsing a known number of wasm data segments.\n  //       ParseWasmDataSegments = 28,\n  //       // Cost of parsing a known number of wasm element segments.\n  //       ParseWasmElemSegments = 29,\n  //       // Cost of parsing a known number of wasm imports.\n  //       ParseWasmImports = 30,\n  //       // Cost of parsing a known number of wasm exports.\n  //       ParseWasmExports = 31,\n  //       // Cost of parsing a known number of data segment bytes.\n  //       ParseWasmDataSegmentBytes = 32,\n  //\n  //       // Cost of instantiating wasm bytes that only encode instructions.\n  //       InstantiateWasmInstructions = 33,\n  //       // Cost of instantiating a known number of wasm functions.\n  //       InstantiateWasmFunctions = 34,\n  //       // Cost of instantiating a known number of wasm globals.\n  //       InstantiateWasmGlobals = 35,\n  //       // Cost of instantiating a known number of wasm table entries.\n  //       InstantiateWasmTableEntries = 36,\n  //       // Cost of instantiating a known number of wasm types.\n  //       InstantiateWasmTypes = 37,\n  //       // Cost of instantiating a known number of wasm data segments.\n  //       InstantiateWasmDataSegments = 38,\n  //       // Cost of instantiating a known number of wasm element segments.\n  //       InstantiateWasmElemSegments = 39,\n  //       // Cost of instantiating a known number of wasm imports.\n  //       InstantiateWasmImports = 40,\n  //       // Cost of instantiating a known number of wasm exports.\n  //       InstantiateWasmExports = 41,\n  //       // Cost of instantiating a known number of data segment bytes.\n  //       InstantiateWasmDataSegmentBytes = 42,\n  //\n  //       // Cost of decoding a bytes array representing an uncompressed SEC-1 encoded\n  //       // point on a 256-bit elliptic curve\n  //       Sec1DecodePointUncompressed = 43,\n  //       // Cost of verifying an ECDSA Secp256r1 signature\n  //       VerifyEcdsaSecp256r1Sig = 44,\n  //\n  //       // Cost of encoding a BLS12-381 Fp (base field element)\n  //       Bls12381EncodeFp = 45,\n  //       // Cost of decoding a BLS12-381 Fp (base field element)\n  //       Bls12381DecodeFp = 46,\n  //       // Cost of checking a G1 point lies on the curve\n  //       Bls12381G1CheckPointOnCurve = 47,\n  //       // Cost of checking a G1 point belongs to the correct subgroup\n  //       Bls12381G1CheckPointInSubgroup = 48,\n  //       // Cost of checking a G2 point lies on the curve\n  //       Bls12381G2CheckPointOnCurve = 49,\n  //       // Cost of checking a G2 point belongs to the correct subgroup\n  //       Bls12381G2CheckPointInSubgroup = 50,\n  //       // Cost of converting a BLS12-381 G1 point from projective to affine coordinates\n  //       Bls12381G1ProjectiveToAffine = 51,\n  //       // Cost of converting a BLS12-381 G2 point from projective to affine coordinates\n  //       Bls12381G2ProjectiveToAffine = 52,\n  //       // Cost of performing BLS12-381 G1 point addition\n  //       Bls12381G1Add = 53,\n  //       // Cost of performing BLS12-381 G1 scalar multiplication\n  //       Bls12381G1Mul = 54,\n  //       // Cost of performing BLS12-381 G1 multi-scalar multiplication (MSM)\n  //       Bls12381G1Msm = 55,\n  //       // Cost of mapping a BLS12-381 Fp field element to a G1 point\n  //       Bls12381MapFpToG1 = 56,\n  //       // Cost of hashing to a BLS12-381 G1 point\n  //       Bls12381HashToG1 = 57,\n  //       // Cost of performing BLS12-381 G2 point addition\n  //       Bls12381G2Add = 58,\n  //       // Cost of performing BLS12-381 G2 scalar multiplication\n  //       Bls12381G2Mul = 59,\n  //       // Cost of performing BLS12-381 G2 multi-scalar multiplication (MSM)\n  //       Bls12381G2Msm = 60,\n  //       // Cost of mapping a BLS12-381 Fp2 field element to a G2 point\n  //       Bls12381MapFp2ToG2 = 61,\n  //       // Cost of hashing to a BLS12-381 G2 point\n  //       Bls12381HashToG2 = 62,\n  //       // Cost of performing BLS12-381 pairing operation\n  //       Bls12381Pairing = 63,\n  //       // Cost of converting a BLS12-381 scalar element from U256\n  //       Bls12381FrFromU256 = 64,\n  //       // Cost of converting a BLS12-381 scalar element to U256\n  //       Bls12381FrToU256 = 65,\n  //       // Cost of performing BLS12-381 scalar element addition/subtraction\n  //       Bls12381FrAddSub = 66,\n  //       // Cost of performing BLS12-381 scalar element multiplication\n  //       Bls12381FrMul = 67,\n  //       // Cost of performing BLS12-381 scalar element exponentiation\n  //       Bls12381FrPow = 68,\n  //       // Cost of performing BLS12-381 scalar element inversion\n  //       Bls12381FrInv = 69\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractCostType\", {\n    wasmInsnExec: 0,\n    memAlloc: 1,\n    memCpy: 2,\n    memCmp: 3,\n    dispatchHostFunction: 4,\n    visitObject: 5,\n    valSer: 6,\n    valDeser: 7,\n    computeSha256Hash: 8,\n    computeEd25519PubKey: 9,\n    verifyEd25519Sig: 10,\n    vmInstantiation: 11,\n    vmCachedInstantiation: 12,\n    invokeVmFunction: 13,\n    computeKeccak256Hash: 14,\n    decodeEcdsaCurve256Sig: 15,\n    recoverEcdsaSecp256k1Key: 16,\n    int256AddSub: 17,\n    int256Mul: 18,\n    int256Div: 19,\n    int256Pow: 20,\n    int256Shift: 21,\n    chaCha20DrawBytes: 22,\n    parseWasmInstructions: 23,\n    parseWasmFunctions: 24,\n    parseWasmGlobals: 25,\n    parseWasmTableEntries: 26,\n    parseWasmTypes: 27,\n    parseWasmDataSegments: 28,\n    parseWasmElemSegments: 29,\n    parseWasmImports: 30,\n    parseWasmExports: 31,\n    parseWasmDataSegmentBytes: 32,\n    instantiateWasmInstructions: 33,\n    instantiateWasmFunctions: 34,\n    instantiateWasmGlobals: 35,\n    instantiateWasmTableEntries: 36,\n    instantiateWasmTypes: 37,\n    instantiateWasmDataSegments: 38,\n    instantiateWasmElemSegments: 39,\n    instantiateWasmImports: 40,\n    instantiateWasmExports: 41,\n    instantiateWasmDataSegmentBytes: 42,\n    sec1DecodePointUncompressed: 43,\n    verifyEcdsaSecp256r1Sig: 44,\n    bls12381EncodeFp: 45,\n    bls12381DecodeFp: 46,\n    bls12381G1CheckPointOnCurve: 47,\n    bls12381G1CheckPointInSubgroup: 48,\n    bls12381G2CheckPointOnCurve: 49,\n    bls12381G2CheckPointInSubgroup: 50,\n    bls12381G1ProjectiveToAffine: 51,\n    bls12381G2ProjectiveToAffine: 52,\n    bls12381G1Add: 53,\n    bls12381G1Mul: 54,\n    bls12381G1Msm: 55,\n    bls12381MapFpToG1: 56,\n    bls12381HashToG1: 57,\n    bls12381G2Add: 58,\n    bls12381G2Mul: 59,\n    bls12381G2Msm: 60,\n    bls12381MapFp2ToG2: 61,\n    bls12381HashToG2: 62,\n    bls12381Pairing: 63,\n    bls12381FrFromU256: 64,\n    bls12381FrToU256: 65,\n    bls12381FrAddSub: 66,\n    bls12381FrMul: 67,\n    bls12381FrPow: 68,\n    bls12381FrInv: 69\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractCostParamEntry {\n  //       // use `ext` to add more terms (e.g. higher order polynomials) in the future\n  //       ExtensionPoint ext;\n  //\n  //       int64 constTerm;\n  //       int64 linearTerm;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCostParamEntry\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"constTerm\", xdr.lookup(\"Int64\")], [\"linearTerm\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct StateArchivalSettings {\n  //       uint32 maxEntryTTL;\n  //       uint32 minTemporaryTTL;\n  //       uint32 minPersistentTTL;\n  //\n  //       // rent_fee = wfee_rate_average / rent_rate_denominator_for_type\n  //       int64 persistentRentRateDenominator;\n  //       int64 tempRentRateDenominator;\n  //\n  //       // max number of entries that emit archival meta in a single ledger\n  //       uint32 maxEntriesToArchive;\n  //\n  //       // Number of snapshots to use when calculating average BucketList size\n  //       uint32 bucketListSizeWindowSampleSize;\n  //\n  //       // How often to sample the BucketList size for the average, in ledgers\n  //       uint32 bucketListWindowSamplePeriod;\n  //\n  //       // Maximum number of bytes that we scan for eviction per ledger\n  //       uint32 evictionScanSize;\n  //\n  //       // Lowest BucketList level to be scanned to evict entries\n  //       uint32 startingEvictionScanLevel;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"StateArchivalSettings\", [[\"maxEntryTtl\", xdr.lookup(\"Uint32\")], [\"minTemporaryTtl\", xdr.lookup(\"Uint32\")], [\"minPersistentTtl\", xdr.lookup(\"Uint32\")], [\"persistentRentRateDenominator\", xdr.lookup(\"Int64\")], [\"tempRentRateDenominator\", xdr.lookup(\"Int64\")], [\"maxEntriesToArchive\", xdr.lookup(\"Uint32\")], [\"bucketListSizeWindowSampleSize\", xdr.lookup(\"Uint32\")], [\"bucketListWindowSamplePeriod\", xdr.lookup(\"Uint32\")], [\"evictionScanSize\", xdr.lookup(\"Uint32\")], [\"startingEvictionScanLevel\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct EvictionIterator {\n  //       uint32 bucketListLevel;\n  //       bool isCurrBucket;\n  //       uint64 bucketFileOffset;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"EvictionIterator\", [[\"bucketListLevel\", xdr.lookup(\"Uint32\")], [\"isCurrBucket\", xdr.bool()], [\"bucketFileOffset\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const CONTRACT_COST_COUNT_LIMIT = 1024;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"CONTRACT_COST_COUNT_LIMIT\", 1024);\n\n  // === xdr source ============================================================\n  //\n  //   typedef ContractCostParamEntry ContractCostParams<CONTRACT_COST_COUNT_LIMIT>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ContractCostParams\", xdr.varArray(xdr.lookup(\"ContractCostParamEntry\"), xdr.lookup(\"CONTRACT_COST_COUNT_LIMIT\")));\n\n  // === xdr source ============================================================\n  //\n  //   enum ConfigSettingID\n  //   {\n  //       CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES = 0,\n  //       CONFIG_SETTING_CONTRACT_COMPUTE_V0 = 1,\n  //       CONFIG_SETTING_CONTRACT_LEDGER_COST_V0 = 2,\n  //       CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0 = 3,\n  //       CONFIG_SETTING_CONTRACT_EVENTS_V0 = 4,\n  //       CONFIG_SETTING_CONTRACT_BANDWIDTH_V0 = 5,\n  //       CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS = 6,\n  //       CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES = 7,\n  //       CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES = 8,\n  //       CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES = 9,\n  //       CONFIG_SETTING_STATE_ARCHIVAL = 10,\n  //       CONFIG_SETTING_CONTRACT_EXECUTION_LANES = 11,\n  //       CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW = 12,\n  //       CONFIG_SETTING_EVICTION_ITERATOR = 13\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ConfigSettingId\", {\n    configSettingContractMaxSizeBytes: 0,\n    configSettingContractComputeV0: 1,\n    configSettingContractLedgerCostV0: 2,\n    configSettingContractHistoricalDataV0: 3,\n    configSettingContractEventsV0: 4,\n    configSettingContractBandwidthV0: 5,\n    configSettingContractCostParamsCpuInstructions: 6,\n    configSettingContractCostParamsMemoryBytes: 7,\n    configSettingContractDataKeySizeBytes: 8,\n    configSettingContractDataEntrySizeBytes: 9,\n    configSettingStateArchival: 10,\n    configSettingContractExecutionLanes: 11,\n    configSettingBucketlistSizeWindow: 12,\n    configSettingEvictionIterator: 13\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ConfigSettingEntry switch (ConfigSettingID configSettingID)\n  //   {\n  //   case CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES:\n  //       uint32 contractMaxSizeBytes;\n  //   case CONFIG_SETTING_CONTRACT_COMPUTE_V0:\n  //       ConfigSettingContractComputeV0 contractCompute;\n  //   case CONFIG_SETTING_CONTRACT_LEDGER_COST_V0:\n  //       ConfigSettingContractLedgerCostV0 contractLedgerCost;\n  //   case CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0:\n  //       ConfigSettingContractHistoricalDataV0 contractHistoricalData;\n  //   case CONFIG_SETTING_CONTRACT_EVENTS_V0:\n  //       ConfigSettingContractEventsV0 contractEvents;\n  //   case CONFIG_SETTING_CONTRACT_BANDWIDTH_V0:\n  //       ConfigSettingContractBandwidthV0 contractBandwidth;\n  //   case CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS:\n  //       ContractCostParams contractCostParamsCpuInsns;\n  //   case CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES:\n  //       ContractCostParams contractCostParamsMemBytes;\n  //   case CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES:\n  //       uint32 contractDataKeySizeBytes;\n  //   case CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES:\n  //       uint32 contractDataEntrySizeBytes;\n  //   case CONFIG_SETTING_STATE_ARCHIVAL:\n  //       StateArchivalSettings stateArchivalSettings;\n  //   case CONFIG_SETTING_CONTRACT_EXECUTION_LANES:\n  //       ConfigSettingContractExecutionLanesV0 contractExecutionLanes;\n  //   case CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW:\n  //       uint64 bucketListSizeWindow<>;\n  //   case CONFIG_SETTING_EVICTION_ITERATOR:\n  //       EvictionIterator evictionIterator;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ConfigSettingEntry\", {\n    switchOn: xdr.lookup(\"ConfigSettingId\"),\n    switchName: \"configSettingId\",\n    switches: [[\"configSettingContractMaxSizeBytes\", \"contractMaxSizeBytes\"], [\"configSettingContractComputeV0\", \"contractCompute\"], [\"configSettingContractLedgerCostV0\", \"contractLedgerCost\"], [\"configSettingContractHistoricalDataV0\", \"contractHistoricalData\"], [\"configSettingContractEventsV0\", \"contractEvents\"], [\"configSettingContractBandwidthV0\", \"contractBandwidth\"], [\"configSettingContractCostParamsCpuInstructions\", \"contractCostParamsCpuInsns\"], [\"configSettingContractCostParamsMemoryBytes\", \"contractCostParamsMemBytes\"], [\"configSettingContractDataKeySizeBytes\", \"contractDataKeySizeBytes\"], [\"configSettingContractDataEntrySizeBytes\", \"contractDataEntrySizeBytes\"], [\"configSettingStateArchival\", \"stateArchivalSettings\"], [\"configSettingContractExecutionLanes\", \"contractExecutionLanes\"], [\"configSettingBucketlistSizeWindow\", \"bucketListSizeWindow\"], [\"configSettingEvictionIterator\", \"evictionIterator\"]],\n    arms: {\n      contractMaxSizeBytes: xdr.lookup(\"Uint32\"),\n      contractCompute: xdr.lookup(\"ConfigSettingContractComputeV0\"),\n      contractLedgerCost: xdr.lookup(\"ConfigSettingContractLedgerCostV0\"),\n      contractHistoricalData: xdr.lookup(\"ConfigSettingContractHistoricalDataV0\"),\n      contractEvents: xdr.lookup(\"ConfigSettingContractEventsV0\"),\n      contractBandwidth: xdr.lookup(\"ConfigSettingContractBandwidthV0\"),\n      contractCostParamsCpuInsns: xdr.lookup(\"ContractCostParams\"),\n      contractCostParamsMemBytes: xdr.lookup(\"ContractCostParams\"),\n      contractDataKeySizeBytes: xdr.lookup(\"Uint32\"),\n      contractDataEntrySizeBytes: xdr.lookup(\"Uint32\"),\n      stateArchivalSettings: xdr.lookup(\"StateArchivalSettings\"),\n      contractExecutionLanes: xdr.lookup(\"ConfigSettingContractExecutionLanesV0\"),\n      bucketListSizeWindow: xdr.varArray(xdr.lookup(\"Uint64\"), 2147483647),\n      evictionIterator: xdr.lookup(\"EvictionIterator\")\n    }\n  });\n});\nvar _default = exports[\"default\"] = types;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/generated/curr_generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LiquidityPoolFeeV18 = void 0;\nexports.getLiquidityPoolId = getLiquidityPoolId;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n// LiquidityPoolFeeV18 is the default liquidity pool fee in protocol v18. It defaults to 30 base points (0.3%).\nvar LiquidityPoolFeeV18 = exports.LiquidityPoolFeeV18 = 30;\n\n/**\n * getLiquidityPoolId computes the Pool ID for the given assets, fee and pool type.\n *\n * @see [stellar-core getPoolID](https://github.com/stellar/stellar-core/blob/9f3a48c6a8f1aa77b6043a055d0638661f718080/src/ledger/test/LedgerTxnTests.cpp#L3746-L3751)\n *\n * @export\n * @param {string} liquidityPoolType – A string representing the liquidity pool type.\n * @param {object} liquidityPoolParameters        – The liquidity pool parameters.\n * @param {Asset}  liquidityPoolParameters.assetA – The first asset in the Pool, it must respect the rule assetA < assetB.\n * @param {Asset}  liquidityPoolParameters.assetB – The second asset in the Pool, it must respect the rule assetA < assetB.\n * @param {number} liquidityPoolParameters.fee    – The liquidity pool fee. For now the only fee supported is `30`.\n *\n * @return {Buffer} the raw Pool ID buffer, which can be stringfied with `toString('hex')`\n */\nfunction getLiquidityPoolId(liquidityPoolType) {\n  var liquidityPoolParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (liquidityPoolType !== 'constant_product') {\n    throw new Error('liquidityPoolType is invalid');\n  }\n  var assetA = liquidityPoolParameters.assetA,\n    assetB = liquidityPoolParameters.assetB,\n    fee = liquidityPoolParameters.fee;\n  if (!assetA || !(assetA instanceof _asset.Asset)) {\n    throw new Error('assetA is invalid');\n  }\n  if (!assetB || !(assetB instanceof _asset.Asset)) {\n    throw new Error('assetB is invalid');\n  }\n  if (!fee || fee !== LiquidityPoolFeeV18) {\n    throw new Error('fee is invalid');\n  }\n  if (_asset.Asset.compare(assetA, assetB) !== -1) {\n    throw new Error('Assets are not in lexicographic order');\n  }\n  var lpTypeData = _xdr[\"default\"].LiquidityPoolType.liquidityPoolConstantProduct().toXDR();\n  var lpParamsData = new _xdr[\"default\"].LiquidityPoolConstantProductParameters({\n    assetA: assetA.toXDRObject(),\n    assetB: assetB.toXDRObject(),\n    fee: fee\n  }).toXDR();\n  var payload = Buffer.concat([lpTypeData, lpParamsData]);\n  return (0, _hashing.hash)(payload);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9nZXRfbGlxdWlkaXR5X3Bvb2xfaWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQixrQ0FBa0MsbUJBQU8sQ0FBQyxvSEFBTztBQUNqRCxhQUFhLG1CQUFPLENBQUMsd0hBQVM7QUFDOUIsZUFBZSxtQkFBTyxDQUFDLDRIQUFXO0FBQ2xDLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQSwwQkFBMEIsMkJBQTJCOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL2dldF9saXF1aWRpdHlfcG9vbF9pZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTGlxdWlkaXR5UG9vbEZlZVYxOCA9IHZvaWQgMDtcbmV4cG9ydHMuZ2V0TGlxdWlkaXR5UG9vbElkID0gZ2V0TGlxdWlkaXR5UG9vbElkO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3hkclwiKSk7XG52YXIgX2Fzc2V0ID0gcmVxdWlyZShcIi4vYXNzZXRcIik7XG52YXIgX2hhc2hpbmcgPSByZXF1aXJlKFwiLi9oYXNoaW5nXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8vIExpcXVpZGl0eVBvb2xGZWVWMTggaXMgdGhlIGRlZmF1bHQgbGlxdWlkaXR5IHBvb2wgZmVlIGluIHByb3RvY29sIHYxOC4gSXQgZGVmYXVsdHMgdG8gMzAgYmFzZSBwb2ludHMgKDAuMyUpLlxudmFyIExpcXVpZGl0eVBvb2xGZWVWMTggPSBleHBvcnRzLkxpcXVpZGl0eVBvb2xGZWVWMTggPSAzMDtcblxuLyoqXG4gKiBnZXRMaXF1aWRpdHlQb29sSWQgY29tcHV0ZXMgdGhlIFBvb2wgSUQgZm9yIHRoZSBnaXZlbiBhc3NldHMsIGZlZSBhbmQgcG9vbCB0eXBlLlxuICpcbiAqIEBzZWUgW3N0ZWxsYXItY29yZSBnZXRQb29sSURdKGh0dHBzOi8vZ2l0aHViLmNvbS9zdGVsbGFyL3N0ZWxsYXItY29yZS9ibG9iLzlmM2E0OGM2YThmMWFhNzdiNjA0M2EwNTVkMDYzODY2MWY3MTgwODAvc3JjL2xlZGdlci90ZXN0L0xlZGdlclR4blRlc3RzLmNwcCNMMzc0Ni1MMzc1MSlcbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0ge3N0cmluZ30gbGlxdWlkaXR5UG9vbFR5cGUg4oCTIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbGlxdWlkaXR5IHBvb2wgdHlwZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBsaXF1aWRpdHlQb29sUGFyYW1ldGVycyAgICAgICAg4oCTIFRoZSBsaXF1aWRpdHkgcG9vbCBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHtBc3NldH0gIGxpcXVpZGl0eVBvb2xQYXJhbWV0ZXJzLmFzc2V0QSDigJMgVGhlIGZpcnN0IGFzc2V0IGluIHRoZSBQb29sLCBpdCBtdXN0IHJlc3BlY3QgdGhlIHJ1bGUgYXNzZXRBIDwgYXNzZXRCLlxuICogQHBhcmFtIHtBc3NldH0gIGxpcXVpZGl0eVBvb2xQYXJhbWV0ZXJzLmFzc2V0QiDigJMgVGhlIHNlY29uZCBhc3NldCBpbiB0aGUgUG9vbCwgaXQgbXVzdCByZXNwZWN0IHRoZSBydWxlIGFzc2V0QSA8IGFzc2V0Qi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaXF1aWRpdHlQb29sUGFyYW1ldGVycy5mZWUgICAg4oCTIFRoZSBsaXF1aWRpdHkgcG9vbCBmZWUuIEZvciBub3cgdGhlIG9ubHkgZmVlIHN1cHBvcnRlZCBpcyBgMzBgLlxuICpcbiAqIEByZXR1cm4ge0J1ZmZlcn0gdGhlIHJhdyBQb29sIElEIGJ1ZmZlciwgd2hpY2ggY2FuIGJlIHN0cmluZ2ZpZWQgd2l0aCBgdG9TdHJpbmcoJ2hleCcpYFxuICovXG5mdW5jdGlvbiBnZXRMaXF1aWRpdHlQb29sSWQobGlxdWlkaXR5UG9vbFR5cGUpIHtcbiAgdmFyIGxpcXVpZGl0eVBvb2xQYXJhbWV0ZXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgaWYgKGxpcXVpZGl0eVBvb2xUeXBlICE9PSAnY29uc3RhbnRfcHJvZHVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2xpcXVpZGl0eVBvb2xUeXBlIGlzIGludmFsaWQnKTtcbiAgfVxuICB2YXIgYXNzZXRBID0gbGlxdWlkaXR5UG9vbFBhcmFtZXRlcnMuYXNzZXRBLFxuICAgIGFzc2V0QiA9IGxpcXVpZGl0eVBvb2xQYXJhbWV0ZXJzLmFzc2V0QixcbiAgICBmZWUgPSBsaXF1aWRpdHlQb29sUGFyYW1ldGVycy5mZWU7XG4gIGlmICghYXNzZXRBIHx8ICEoYXNzZXRBIGluc3RhbmNlb2YgX2Fzc2V0LkFzc2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYXNzZXRBIGlzIGludmFsaWQnKTtcbiAgfVxuICBpZiAoIWFzc2V0QiB8fCAhKGFzc2V0QiBpbnN0YW5jZW9mIF9hc3NldC5Bc3NldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc2V0QiBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgaWYgKCFmZWUgfHwgZmVlICE9PSBMaXF1aWRpdHlQb29sRmVlVjE4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdmZWUgaXMgaW52YWxpZCcpO1xuICB9XG4gIGlmIChfYXNzZXQuQXNzZXQuY29tcGFyZShhc3NldEEsIGFzc2V0QikgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBc3NldHMgYXJlIG5vdCBpbiBsZXhpY29ncmFwaGljIG9yZGVyJyk7XG4gIH1cbiAgdmFyIGxwVHlwZURhdGEgPSBfeGRyW1wiZGVmYXVsdFwiXS5MaXF1aWRpdHlQb29sVHlwZS5saXF1aWRpdHlQb29sQ29uc3RhbnRQcm9kdWN0KCkudG9YRFIoKTtcbiAgdmFyIGxwUGFyYW1zRGF0YSA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5MaXF1aWRpdHlQb29sQ29uc3RhbnRQcm9kdWN0UGFyYW1ldGVycyh7XG4gICAgYXNzZXRBOiBhc3NldEEudG9YRFJPYmplY3QoKSxcbiAgICBhc3NldEI6IGFzc2V0Qi50b1hEUk9iamVjdCgpLFxuICAgIGZlZTogZmVlXG4gIH0pLnRvWERSKCk7XG4gIHZhciBwYXlsb2FkID0gQnVmZmVyLmNvbmNhdChbbHBUeXBlRGF0YSwgbHBQYXJhbXNEYXRhXSk7XG4gIHJldHVybiAoMCwgX2hhc2hpbmcuaGFzaCkocGF5bG9hZCk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.hash = hash;\nvar _sha = __webpack_require__(/*! sha.js */ \"(ssr)/./node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/index.js\");\nfunction hash(data) {\n  var hasher = new _sha.sha256();\n  hasher.update(data, 'utf8');\n  return hasher.digest();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9oYXNoaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLFlBQVk7QUFDWixXQUFXLG1CQUFPLENBQUMscUZBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9oYXNoaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5oYXNoID0gaGFzaDtcbnZhciBfc2hhID0gcmVxdWlyZShcInNoYS5qc1wiKTtcbmZ1bmN0aW9uIGhhc2goZGF0YSkge1xuICB2YXIgaGFzaGVyID0gbmV3IF9zaGEuc2hhMjU2KCk7XG4gIGhhc2hlci51cGRhdGUoZGF0YSwgJ3V0ZjgnKTtcbiAgcmV0dXJuIGhhc2hlci5kaWdlc3QoKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/index.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/index.js ***!
  \*********************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _exportNames = {\n  xdr: true,\n  cereal: true,\n  hash: true,\n  sign: true,\n  verify: true,\n  FastSigning: true,\n  getLiquidityPoolId: true,\n  LiquidityPoolFeeV18: true,\n  Keypair: true,\n  UnsignedHyper: true,\n  Hyper: true,\n  TransactionBase: true,\n  Transaction: true,\n  FeeBumpTransaction: true,\n  TransactionBuilder: true,\n  TimeoutInfinite: true,\n  BASE_FEE: true,\n  Asset: true,\n  LiquidityPoolAsset: true,\n  LiquidityPoolId: true,\n  Operation: true,\n  AuthRequiredFlag: true,\n  AuthRevocableFlag: true,\n  AuthImmutableFlag: true,\n  AuthClawbackEnabledFlag: true,\n  Account: true,\n  MuxedAccount: true,\n  Claimant: true,\n  Networks: true,\n  StrKey: true,\n  SignerKey: true,\n  Soroban: true,\n  decodeAddressToMuxedAccount: true,\n  encodeMuxedAccountToAddress: true,\n  extractBaseAddress: true,\n  encodeMuxedAccount: true,\n  Contract: true,\n  Address: true\n};\nObject.defineProperty(exports, \"Account\", ({\n  enumerable: true,\n  get: function get() {\n    return _account.Account;\n  }\n}));\nObject.defineProperty(exports, \"Address\", ({\n  enumerable: true,\n  get: function get() {\n    return _address.Address;\n  }\n}));\nObject.defineProperty(exports, \"Asset\", ({\n  enumerable: true,\n  get: function get() {\n    return _asset.Asset;\n  }\n}));\nObject.defineProperty(exports, \"AuthClawbackEnabledFlag\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthClawbackEnabledFlag;\n  }\n}));\nObject.defineProperty(exports, \"AuthImmutableFlag\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthImmutableFlag;\n  }\n}));\nObject.defineProperty(exports, \"AuthRequiredFlag\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthRequiredFlag;\n  }\n}));\nObject.defineProperty(exports, \"AuthRevocableFlag\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthRevocableFlag;\n  }\n}));\nObject.defineProperty(exports, \"BASE_FEE\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction_builder.BASE_FEE;\n  }\n}));\nObject.defineProperty(exports, \"Claimant\", ({\n  enumerable: true,\n  get: function get() {\n    return _claimant.Claimant;\n  }\n}));\nObject.defineProperty(exports, \"Contract\", ({\n  enumerable: true,\n  get: function get() {\n    return _contract.Contract;\n  }\n}));\nObject.defineProperty(exports, \"FastSigning\", ({\n  enumerable: true,\n  get: function get() {\n    return _signing.FastSigning;\n  }\n}));\nObject.defineProperty(exports, \"FeeBumpTransaction\", ({\n  enumerable: true,\n  get: function get() {\n    return _fee_bump_transaction.FeeBumpTransaction;\n  }\n}));\nObject.defineProperty(exports, \"Hyper\", ({\n  enumerable: true,\n  get: function get() {\n    return _jsXdr.Hyper;\n  }\n}));\nObject.defineProperty(exports, \"Keypair\", ({\n  enumerable: true,\n  get: function get() {\n    return _keypair.Keypair;\n  }\n}));\nObject.defineProperty(exports, \"LiquidityPoolAsset\", ({\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_asset.LiquidityPoolAsset;\n  }\n}));\nObject.defineProperty(exports, \"LiquidityPoolFeeV18\", ({\n  enumerable: true,\n  get: function get() {\n    return _get_liquidity_pool_id.LiquidityPoolFeeV18;\n  }\n}));\nObject.defineProperty(exports, \"LiquidityPoolId\", ({\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_id.LiquidityPoolId;\n  }\n}));\nObject.defineProperty(exports, \"MuxedAccount\", ({\n  enumerable: true,\n  get: function get() {\n    return _muxed_account.MuxedAccount;\n  }\n}));\nObject.defineProperty(exports, \"Networks\", ({\n  enumerable: true,\n  get: function get() {\n    return _network.Networks;\n  }\n}));\nObject.defineProperty(exports, \"Operation\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.Operation;\n  }\n}));\nObject.defineProperty(exports, \"SignerKey\", ({\n  enumerable: true,\n  get: function get() {\n    return _signerkey.SignerKey;\n  }\n}));\nObject.defineProperty(exports, \"Soroban\", ({\n  enumerable: true,\n  get: function get() {\n    return _soroban.Soroban;\n  }\n}));\nObject.defineProperty(exports, \"StrKey\", ({\n  enumerable: true,\n  get: function get() {\n    return _strkey.StrKey;\n  }\n}));\nObject.defineProperty(exports, \"TimeoutInfinite\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction_builder.TimeoutInfinite;\n  }\n}));\nObject.defineProperty(exports, \"Transaction\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction.Transaction;\n  }\n}));\nObject.defineProperty(exports, \"TransactionBase\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction_base.TransactionBase;\n  }\n}));\nObject.defineProperty(exports, \"TransactionBuilder\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction_builder.TransactionBuilder;\n  }\n}));\nObject.defineProperty(exports, \"UnsignedHyper\", ({\n  enumerable: true,\n  get: function get() {\n    return _jsXdr.UnsignedHyper;\n  }\n}));\nObject.defineProperty(exports, \"cereal\", ({\n  enumerable: true,\n  get: function get() {\n    return _jsxdr[\"default\"];\n  }\n}));\nObject.defineProperty(exports, \"decodeAddressToMuxedAccount\", ({\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.decodeAddressToMuxedAccount;\n  }\n}));\nexports[\"default\"] = void 0;\nObject.defineProperty(exports, \"encodeMuxedAccount\", ({\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.encodeMuxedAccount;\n  }\n}));\nObject.defineProperty(exports, \"encodeMuxedAccountToAddress\", ({\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.encodeMuxedAccountToAddress;\n  }\n}));\nObject.defineProperty(exports, \"extractBaseAddress\", ({\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.extractBaseAddress;\n  }\n}));\nObject.defineProperty(exports, \"getLiquidityPoolId\", ({\n  enumerable: true,\n  get: function get() {\n    return _get_liquidity_pool_id.getLiquidityPoolId;\n  }\n}));\nObject.defineProperty(exports, \"hash\", ({\n  enumerable: true,\n  get: function get() {\n    return _hashing.hash;\n  }\n}));\nObject.defineProperty(exports, \"sign\", ({\n  enumerable: true,\n  get: function get() {\n    return _signing.sign;\n  }\n}));\nObject.defineProperty(exports, \"verify\", ({\n  enumerable: true,\n  get: function get() {\n    return _signing.verify;\n  }\n}));\nObject.defineProperty(exports, \"xdr\", ({\n  enumerable: true,\n  get: function get() {\n    return _xdr[\"default\"];\n  }\n}));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _jsxdr = _interopRequireDefault(__webpack_require__(/*! ./jsxdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/jsxdr.js\"));\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _signing = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signing.js\");\nvar _get_liquidity_pool_id = __webpack_require__(/*! ./get_liquidity_pool_id */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js\");\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar _transaction_base = __webpack_require__(/*! ./transaction_base */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_base.js\");\nvar _transaction = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction.js\");\nvar _fee_bump_transaction = __webpack_require__(/*! ./fee_bump_transaction */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js\");\nvar _transaction_builder = __webpack_require__(/*! ./transaction_builder */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_builder.js\");\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _liquidity_pool_asset = __webpack_require__(/*! ./liquidity_pool_asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js\");\nvar _liquidity_pool_id = __webpack_require__(/*! ./liquidity_pool_id */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js\");\nvar _operation = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operation.js\");\nvar _memo = __webpack_require__(/*! ./memo */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/memo.js\");\nObject.keys(_memo).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _memo[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _memo[key];\n    }\n  });\n});\nvar _account = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/account.js\");\nvar _muxed_account = __webpack_require__(/*! ./muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/muxed_account.js\");\nvar _claimant = __webpack_require__(/*! ./claimant */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/claimant.js\");\nvar _network = __webpack_require__(/*! ./network */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/network.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _signerkey = __webpack_require__(/*! ./signerkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signerkey.js\");\nvar _soroban = __webpack_require__(/*! ./soroban */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/soroban.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nvar _contract = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/contract.js\");\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/address.js\");\nvar _numbers = __webpack_require__(/*! ./numbers */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/index.js\");\nObject.keys(_numbers).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _numbers[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _numbers[key];\n    }\n  });\n});\nvar _scval = __webpack_require__(/*! ./scval */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/scval.js\");\nObject.keys(_scval).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _scval[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _scval[key];\n    }\n  });\n});\nvar _events = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/events.js\");\nObject.keys(_events).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _events[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _events[key];\n    }\n  });\n});\nvar _sorobandata_builder = __webpack_require__(/*! ./sorobandata_builder */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/sorobandata_builder.js\");\nObject.keys(_sorobandata_builder).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _sorobandata_builder[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _sorobandata_builder[key];\n    }\n  });\n});\nvar _auth = __webpack_require__(/*! ./auth */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/auth.js\");\nObject.keys(_auth).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _auth[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _auth[key];\n    }\n  });\n});\nvar _invocation = __webpack_require__(/*! ./invocation */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/invocation.js\");\nObject.keys(_invocation).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _invocation[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _invocation[key];\n    }\n  });\n});\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/* eslint-disable import/no-import-module-exports */\n//\n// Soroban\n//\nvar _default = exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/invocation.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/invocation.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.buildInvocationTree = buildInvocationTree;\nexports.walkInvocationTree = walkInvocationTree;\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/address.js\");\nvar _scval = __webpack_require__(/*! ./scval */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/scval.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * @typedef CreateInvocation\n *\n * @prop {'wasm'|'sac'} type  a type indicating if this creation was a custom\n *    contract or a wrapping of an existing Stellar asset\n * @prop {string} [token] when `type=='sac'`, the canonical {@link Asset} that\n *    is being wrapped by this Stellar Asset Contract\n * @prop {object} [wasm]  when `type=='wasm'`, add'l creation parameters\n *\n * @prop {string} wasm.hash     hex hash of WASM bytecode backing this contract\n * @prop {string} wasm.address  contract address of this deployment\n * @prop {string} wasm.salt     hex salt that the user consumed when creating\n *    this contract (encoded in the resulting address)\n * @prop {any[]}  [wasm.constructorArgs] a list of natively-represented values\n *    (see {@link scValToNative}) that are passed to the constructor when\n *    creating this contract\n */\n\n/**\n * @typedef ExecuteInvocation\n *\n * @prop {string} source    the strkey of the contract (C...) being invoked\n * @prop {string} function  the name of the function being invoked\n * @prop {any[]}  args      the natively-represented parameters to the function\n *    invocation (see {@link scValToNative} for rules on how they're\n *    represented a JS types)\n */\n\n/**\n * @typedef InvocationTree\n * @prop {'execute' | 'create'} type  the type of invocation occurring, either\n *    contract creation or host function execution\n * @prop {CreateInvocation | ExecuteInvocation} args  the parameters to the\n *    invocation, depending on the type\n * @prop {InvocationTree[]} invocations   any sub-invocations that (may) occur\n *    as a result of this invocation (i.e. a tree of call stacks)\n */\n\n/**\n * Turns a raw invocation tree into a human-readable format.\n *\n * This is designed to make the invocation tree easier to understand in order to\n * inform users about the side-effects of their contract calls. This will help\n * make informed decisions about whether or not a particular invocation will\n * result in what you expect it to.\n *\n * @param {xdr.SorobanAuthorizedInvocation} root  the raw XDR of the invocation,\n *    likely acquired from transaction simulation. this is either from the\n *    {@link Operation.invokeHostFunction} itself (the `func` field), or from\n *    the authorization entries ({@link xdr.SorobanAuthorizationEntry}, the\n *    `rootInvocation` field)\n *\n * @returns {InvocationTree}  a human-readable version of the invocation tree\n *\n * @example\n * Here, we show a browser modal after simulating an arbitrary transaction,\n * `tx`, which we assume has an `Operation.invokeHostFunction` inside of it:\n *\n * ```typescript\n * import { Server, buildInvocationTree } from '@stellar/stellar-sdk';\n *\n * const s = new Server(\"fill in accordingly\");\n *\n * s.simulateTransaction(tx).then(\n *  (resp: SorobanRpc.SimulateTransactionResponse) => {\n *    if (SorobanRpc.isSuccessfulSim(resp) && ) {\n *      // bold assumption: there's a valid result with an auth entry\n *      alert(\n *        \"You are authorizing the following invocation:\\n\" +\n *        JSON.stringify(\n *          buildInvocationTree(resp.result!.auth[0].rootInvocation()),\n *          null,\n *          2\n *        )\n *      );\n *    }\n *  }\n * );\n * ```\n */\nfunction buildInvocationTree(root) {\n  var fn = root[\"function\"]();\n\n  /** @type {InvocationTree} */\n  var output = {};\n\n  /** @type {xdr.CreateContractArgs|xdr.CreateContractArgsV2|xdr.InvokeContractArgs} */\n  var inner = fn.value();\n  switch (fn[\"switch\"]().value) {\n    // sorobanAuthorizedFunctionTypeContractFn\n    case 0:\n      output.type = 'execute';\n      output.args = {\n        source: _address.Address.fromScAddress(inner.contractAddress()).toString(),\n        \"function\": inner.functionName(),\n        args: inner.args().map(function (arg) {\n          return (0, _scval.scValToNative)(arg);\n        })\n      };\n      break;\n\n    // sorobanAuthorizedFunctionTypeCreateContractHostFn\n    // sorobanAuthorizedFunctionTypeCreateContractV2HostFn\n    case 1: // fallthrough: just no ctor args in V1\n    case 2:\n      {\n        var createV2 = fn[\"switch\"]().value === 2;\n        output.type = 'create';\n        output.args = {};\n\n        // If the executable is a WASM, the preimage MUST be an address. If it's a\n        // token, the preimage MUST be an asset. This is a cheeky way to check\n        // that, because wasm=0, token=1 and address=0, asset=1 in the XDR switch\n        // values.\n        //\n        // The first part may not be true in V2, but we'd need to update this code\n        // anyway so it can still be an error.\n        var _ref = [inner.executable(), inner.contractIdPreimage()],\n          exec = _ref[0],\n          preimage = _ref[1];\n        if (!!exec[\"switch\"]().value !== !!preimage[\"switch\"]().value) {\n          throw new Error(\"creation function appears invalid: \".concat(JSON.stringify(inner), \" (should be wasm+address or token+asset)\"));\n        }\n        switch (exec[\"switch\"]().value) {\n          // contractExecutableWasm\n          case 0:\n            {\n              /** @type {xdr.ContractIdPreimageFromAddress} */\n              var details = preimage.fromAddress();\n              output.args.type = 'wasm';\n              output.args.wasm = _objectSpread({\n                salt: details.salt().toString('hex'),\n                hash: exec.wasmHash().toString('hex'),\n                address: _address.Address.fromScAddress(details.address()).toString()\n              }, createV2 && {\n                constructorArgs: inner.constructorArgs().map(function (arg) {\n                  return (0, _scval.scValToNative)(arg);\n                })\n              });\n              break;\n            }\n\n          // contractExecutableStellarAsset\n          case 1:\n            output.args.type = 'sac';\n            output.args.asset = _asset.Asset.fromOperation(preimage.fromAsset()).toString();\n            break;\n          default:\n            throw new Error(\"unknown creation type: \".concat(JSON.stringify(exec)));\n        }\n        break;\n      }\n    default:\n      throw new Error(\"unknown invocation type (\".concat(fn[\"switch\"](), \"): \").concat(JSON.stringify(fn)));\n  }\n  output.invocations = root.subInvocations().map(function (i) {\n    return buildInvocationTree(i);\n  });\n  return output;\n}\n\n/**\n * @callback InvocationWalker\n *\n * @param {xdr.SorobanAuthorizedInvocation} node  the currently explored node\n * @param {number} depth  the depth of the tree this node is occurring at (the\n *    root starts at a depth of 1)\n * @param {xdr.SorobanAuthorizedInvocation} [parent]  this `node`s parent node,\n *    if any (i.e. this doesn't exist at the root)\n *\n * @returns {boolean|null|void}   returning exactly `false` is a hint to stop\n *    exploring, other values are ignored\n */\n\n/**\n * Executes a callback function on each node in the tree until stopped.\n *\n * Nodes are walked in a depth-first order. Returning `false` from the callback\n * stops further depth exploration at that node, but it does not stop the walk\n * in a \"global\" view.\n *\n * @param {xdr.SorobanAuthorizedInvocation} root  the tree to explore\n * @param {InvocationWalker} callback  the callback to execute for each node\n * @returns {void}\n */\nfunction walkInvocationTree(root, callback) {\n  walkHelper(root, 1, callback);\n}\nfunction walkHelper(node, depth, callback, parent) {\n  if (callback(node, depth, parent) === false /* allow void rv */) {\n    return;\n  }\n  node.subInvocations().forEach(function (i) {\n    return walkHelper(i, depth + 1, callback, node);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9pbnZvY2F0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIsYUFBYSxtQkFBTyxDQUFDLHdIQUFTO0FBQzlCLGVBQWUsbUJBQU8sQ0FBQyw0SEFBVztBQUNsQyxhQUFhLG1CQUFPLENBQUMsd0hBQVM7QUFDOUIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MseUJBQXlCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3BQLDRCQUE0QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHNEQUFzRCw4QkFBOEIsbUpBQW1KLHFFQUFxRSxLQUFLO0FBQzVhLG9DQUFvQyxvRUFBb0UsMERBQTBEO0FBQ2xLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBLFVBQVUsY0FBYztBQUN4QjtBQUNBLFVBQVUsUUFBUSwyQ0FBMkMsYUFBYTtBQUMxRTtBQUNBLFVBQVUsUUFBUTtBQUNsQjtBQUNBLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCO0FBQ0EsVUFBVSxRQUFRO0FBQ2xCLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsdUJBQXVCLHFCQUFxQjtBQUM1QztBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLHNCQUFzQjtBQUNoQztBQUNBLFVBQVUsc0NBQXNDO0FBQ2hEO0FBQ0EsVUFBVSxrQkFBa0I7QUFDNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUM7QUFDQSxPQUFPLG9DQUFvQztBQUMzQyxrQ0FBa0Msb0NBQW9DO0FBQ3RFO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhCQUE4QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLGdCQUFnQjtBQUM3Qjs7QUFFQSxhQUFhLHdFQUF3RTtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQ0FBbUM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUM7QUFDQTtBQUNBLGFBQWEscUJBQXFCO0FBQ2xDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxXQUFXLGtCQUFrQjtBQUM3QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvaW52b2NhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYnVpbGRJbnZvY2F0aW9uVHJlZSA9IGJ1aWxkSW52b2NhdGlvblRyZWU7XG5leHBvcnRzLndhbGtJbnZvY2F0aW9uVHJlZSA9IHdhbGtJbnZvY2F0aW9uVHJlZTtcbnZhciBfYXNzZXQgPSByZXF1aXJlKFwiLi9hc3NldFwiKTtcbnZhciBfYWRkcmVzcyA9IHJlcXVpcmUoXCIuL2FkZHJlc3NcIik7XG52YXIgX3NjdmFsID0gcmVxdWlyZShcIi4vc2N2YWxcIik7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7IHJldHVybiAociA9IF90b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHsgdmFsdWU6IHQsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3JdID0gdCwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQHR5cGVkZWYgQ3JlYXRlSW52b2NhdGlvblxuICpcbiAqIEBwcm9wIHsnd2FzbSd8J3NhYyd9IHR5cGUgIGEgdHlwZSBpbmRpY2F0aW5nIGlmIHRoaXMgY3JlYXRpb24gd2FzIGEgY3VzdG9tXG4gKiAgICBjb250cmFjdCBvciBhIHdyYXBwaW5nIG9mIGFuIGV4aXN0aW5nIFN0ZWxsYXIgYXNzZXRcbiAqIEBwcm9wIHtzdHJpbmd9IFt0b2tlbl0gd2hlbiBgdHlwZT09J3NhYydgLCB0aGUgY2Fub25pY2FsIHtAbGluayBBc3NldH0gdGhhdFxuICogICAgaXMgYmVpbmcgd3JhcHBlZCBieSB0aGlzIFN0ZWxsYXIgQXNzZXQgQ29udHJhY3RcbiAqIEBwcm9wIHtvYmplY3R9IFt3YXNtXSAgd2hlbiBgdHlwZT09J3dhc20nYCwgYWRkJ2wgY3JlYXRpb24gcGFyYW1ldGVyc1xuICpcbiAqIEBwcm9wIHtzdHJpbmd9IHdhc20uaGFzaCAgICAgaGV4IGhhc2ggb2YgV0FTTSBieXRlY29kZSBiYWNraW5nIHRoaXMgY29udHJhY3RcbiAqIEBwcm9wIHtzdHJpbmd9IHdhc20uYWRkcmVzcyAgY29udHJhY3QgYWRkcmVzcyBvZiB0aGlzIGRlcGxveW1lbnRcbiAqIEBwcm9wIHtzdHJpbmd9IHdhc20uc2FsdCAgICAgaGV4IHNhbHQgdGhhdCB0aGUgdXNlciBjb25zdW1lZCB3aGVuIGNyZWF0aW5nXG4gKiAgICB0aGlzIGNvbnRyYWN0IChlbmNvZGVkIGluIHRoZSByZXN1bHRpbmcgYWRkcmVzcylcbiAqIEBwcm9wIHthbnlbXX0gIFt3YXNtLmNvbnN0cnVjdG9yQXJnc10gYSBsaXN0IG9mIG5hdGl2ZWx5LXJlcHJlc2VudGVkIHZhbHVlc1xuICogICAgKHNlZSB7QGxpbmsgc2NWYWxUb05hdGl2ZX0pIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3Igd2hlblxuICogICAgY3JlYXRpbmcgdGhpcyBjb250cmFjdFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgRXhlY3V0ZUludm9jYXRpb25cbiAqXG4gKiBAcHJvcCB7c3RyaW5nfSBzb3VyY2UgICAgdGhlIHN0cmtleSBvZiB0aGUgY29udHJhY3QgKEMuLi4pIGJlaW5nIGludm9rZWRcbiAqIEBwcm9wIHtzdHJpbmd9IGZ1bmN0aW9uICB0aGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gYmVpbmcgaW52b2tlZFxuICogQHByb3Age2FueVtdfSAgYXJncyAgICAgIHRoZSBuYXRpdmVseS1yZXByZXNlbnRlZCBwYXJhbWV0ZXJzIHRvIHRoZSBmdW5jdGlvblxuICogICAgaW52b2NhdGlvbiAoc2VlIHtAbGluayBzY1ZhbFRvTmF0aXZlfSBmb3IgcnVsZXMgb24gaG93IHRoZXkncmVcbiAqICAgIHJlcHJlc2VudGVkIGEgSlMgdHlwZXMpXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBJbnZvY2F0aW9uVHJlZVxuICogQHByb3AgeydleGVjdXRlJyB8ICdjcmVhdGUnfSB0eXBlICB0aGUgdHlwZSBvZiBpbnZvY2F0aW9uIG9jY3VycmluZywgZWl0aGVyXG4gKiAgICBjb250cmFjdCBjcmVhdGlvbiBvciBob3N0IGZ1bmN0aW9uIGV4ZWN1dGlvblxuICogQHByb3Age0NyZWF0ZUludm9jYXRpb24gfCBFeGVjdXRlSW52b2NhdGlvbn0gYXJncyAgdGhlIHBhcmFtZXRlcnMgdG8gdGhlXG4gKiAgICBpbnZvY2F0aW9uLCBkZXBlbmRpbmcgb24gdGhlIHR5cGVcbiAqIEBwcm9wIHtJbnZvY2F0aW9uVHJlZVtdfSBpbnZvY2F0aW9ucyAgIGFueSBzdWItaW52b2NhdGlvbnMgdGhhdCAobWF5KSBvY2N1clxuICogICAgYXMgYSByZXN1bHQgb2YgdGhpcyBpbnZvY2F0aW9uIChpLmUuIGEgdHJlZSBvZiBjYWxsIHN0YWNrcylcbiAqL1xuXG4vKipcbiAqIFR1cm5zIGEgcmF3IGludm9jYXRpb24gdHJlZSBpbnRvIGEgaHVtYW4tcmVhZGFibGUgZm9ybWF0LlxuICpcbiAqIFRoaXMgaXMgZGVzaWduZWQgdG8gbWFrZSB0aGUgaW52b2NhdGlvbiB0cmVlIGVhc2llciB0byB1bmRlcnN0YW5kIGluIG9yZGVyIHRvXG4gKiBpbmZvcm0gdXNlcnMgYWJvdXQgdGhlIHNpZGUtZWZmZWN0cyBvZiB0aGVpciBjb250cmFjdCBjYWxscy4gVGhpcyB3aWxsIGhlbHBcbiAqIG1ha2UgaW5mb3JtZWQgZGVjaXNpb25zIGFib3V0IHdoZXRoZXIgb3Igbm90IGEgcGFydGljdWxhciBpbnZvY2F0aW9uIHdpbGxcbiAqIHJlc3VsdCBpbiB3aGF0IHlvdSBleHBlY3QgaXQgdG8uXG4gKlxuICogQHBhcmFtIHt4ZHIuU29yb2JhbkF1dGhvcml6ZWRJbnZvY2F0aW9ufSByb290ICB0aGUgcmF3IFhEUiBvZiB0aGUgaW52b2NhdGlvbixcbiAqICAgIGxpa2VseSBhY3F1aXJlZCBmcm9tIHRyYW5zYWN0aW9uIHNpbXVsYXRpb24uIHRoaXMgaXMgZWl0aGVyIGZyb20gdGhlXG4gKiAgICB7QGxpbmsgT3BlcmF0aW9uLmludm9rZUhvc3RGdW5jdGlvbn0gaXRzZWxmICh0aGUgYGZ1bmNgIGZpZWxkKSwgb3IgZnJvbVxuICogICAgdGhlIGF1dGhvcml6YXRpb24gZW50cmllcyAoe0BsaW5rIHhkci5Tb3JvYmFuQXV0aG9yaXphdGlvbkVudHJ5fSwgdGhlXG4gKiAgICBgcm9vdEludm9jYXRpb25gIGZpZWxkKVxuICpcbiAqIEByZXR1cm5zIHtJbnZvY2F0aW9uVHJlZX0gIGEgaHVtYW4tcmVhZGFibGUgdmVyc2lvbiBvZiB0aGUgaW52b2NhdGlvbiB0cmVlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUsIHdlIHNob3cgYSBicm93c2VyIG1vZGFsIGFmdGVyIHNpbXVsYXRpbmcgYW4gYXJiaXRyYXJ5IHRyYW5zYWN0aW9uLFxuICogYHR4YCwgd2hpY2ggd2UgYXNzdW1lIGhhcyBhbiBgT3BlcmF0aW9uLmludm9rZUhvc3RGdW5jdGlvbmAgaW5zaWRlIG9mIGl0OlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNlcnZlciwgYnVpbGRJbnZvY2F0aW9uVHJlZSB9IGZyb20gJ0BzdGVsbGFyL3N0ZWxsYXItc2RrJztcbiAqXG4gKiBjb25zdCBzID0gbmV3IFNlcnZlcihcImZpbGwgaW4gYWNjb3JkaW5nbHlcIik7XG4gKlxuICogcy5zaW11bGF0ZVRyYW5zYWN0aW9uKHR4KS50aGVuKFxuICogIChyZXNwOiBTb3JvYmFuUnBjLlNpbXVsYXRlVHJhbnNhY3Rpb25SZXNwb25zZSkgPT4ge1xuICogICAgaWYgKFNvcm9iYW5ScGMuaXNTdWNjZXNzZnVsU2ltKHJlc3ApICYmICkge1xuICogICAgICAvLyBib2xkIGFzc3VtcHRpb246IHRoZXJlJ3MgYSB2YWxpZCByZXN1bHQgd2l0aCBhbiBhdXRoIGVudHJ5XG4gKiAgICAgIGFsZXJ0KFxuICogICAgICAgIFwiWW91IGFyZSBhdXRob3JpemluZyB0aGUgZm9sbG93aW5nIGludm9jYXRpb246XFxuXCIgK1xuICogICAgICAgIEpTT04uc3RyaW5naWZ5KFxuICogICAgICAgICAgYnVpbGRJbnZvY2F0aW9uVHJlZShyZXNwLnJlc3VsdCEuYXV0aFswXS5yb290SW52b2NhdGlvbigpKSxcbiAqICAgICAgICAgIG51bGwsXG4gKiAgICAgICAgICAyXG4gKiAgICAgICAgKVxuICogICAgICApO1xuICogICAgfVxuICogIH1cbiAqICk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gYnVpbGRJbnZvY2F0aW9uVHJlZShyb290KSB7XG4gIHZhciBmbiA9IHJvb3RbXCJmdW5jdGlvblwiXSgpO1xuXG4gIC8qKiBAdHlwZSB7SW52b2NhdGlvblRyZWV9ICovXG4gIHZhciBvdXRwdXQgPSB7fTtcblxuICAvKiogQHR5cGUge3hkci5DcmVhdGVDb250cmFjdEFyZ3N8eGRyLkNyZWF0ZUNvbnRyYWN0QXJnc1YyfHhkci5JbnZva2VDb250cmFjdEFyZ3N9ICovXG4gIHZhciBpbm5lciA9IGZuLnZhbHVlKCk7XG4gIHN3aXRjaCAoZm5bXCJzd2l0Y2hcIl0oKS52YWx1ZSkge1xuICAgIC8vIHNvcm9iYW5BdXRob3JpemVkRnVuY3Rpb25UeXBlQ29udHJhY3RGblxuICAgIGNhc2UgMDpcbiAgICAgIG91dHB1dC50eXBlID0gJ2V4ZWN1dGUnO1xuICAgICAgb3V0cHV0LmFyZ3MgPSB7XG4gICAgICAgIHNvdXJjZTogX2FkZHJlc3MuQWRkcmVzcy5mcm9tU2NBZGRyZXNzKGlubmVyLmNvbnRyYWN0QWRkcmVzcygpKS50b1N0cmluZygpLFxuICAgICAgICBcImZ1bmN0aW9uXCI6IGlubmVyLmZ1bmN0aW9uTmFtZSgpLFxuICAgICAgICBhcmdzOiBpbm5lci5hcmdzKCkubWFwKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICByZXR1cm4gKDAsIF9zY3ZhbC5zY1ZhbFRvTmF0aXZlKShhcmcpO1xuICAgICAgICB9KVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgLy8gc29yb2JhbkF1dGhvcml6ZWRGdW5jdGlvblR5cGVDcmVhdGVDb250cmFjdEhvc3RGblxuICAgIC8vIHNvcm9iYW5BdXRob3JpemVkRnVuY3Rpb25UeXBlQ3JlYXRlQ29udHJhY3RWMkhvc3RGblxuICAgIGNhc2UgMTogLy8gZmFsbHRocm91Z2g6IGp1c3Qgbm8gY3RvciBhcmdzIGluIFYxXG4gICAgY2FzZSAyOlxuICAgICAge1xuICAgICAgICB2YXIgY3JlYXRlVjIgPSBmbltcInN3aXRjaFwiXSgpLnZhbHVlID09PSAyO1xuICAgICAgICBvdXRwdXQudHlwZSA9ICdjcmVhdGUnO1xuICAgICAgICBvdXRwdXQuYXJncyA9IHt9O1xuXG4gICAgICAgIC8vIElmIHRoZSBleGVjdXRhYmxlIGlzIGEgV0FTTSwgdGhlIHByZWltYWdlIE1VU1QgYmUgYW4gYWRkcmVzcy4gSWYgaXQncyBhXG4gICAgICAgIC8vIHRva2VuLCB0aGUgcHJlaW1hZ2UgTVVTVCBiZSBhbiBhc3NldC4gVGhpcyBpcyBhIGNoZWVreSB3YXkgdG8gY2hlY2tcbiAgICAgICAgLy8gdGhhdCwgYmVjYXVzZSB3YXNtPTAsIHRva2VuPTEgYW5kIGFkZHJlc3M9MCwgYXNzZXQ9MSBpbiB0aGUgWERSIHN3aXRjaFxuICAgICAgICAvLyB2YWx1ZXMuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZSBmaXJzdCBwYXJ0IG1heSBub3QgYmUgdHJ1ZSBpbiBWMiwgYnV0IHdlJ2QgbmVlZCB0byB1cGRhdGUgdGhpcyBjb2RlXG4gICAgICAgIC8vIGFueXdheSBzbyBpdCBjYW4gc3RpbGwgYmUgYW4gZXJyb3IuXG4gICAgICAgIHZhciBfcmVmID0gW2lubmVyLmV4ZWN1dGFibGUoKSwgaW5uZXIuY29udHJhY3RJZFByZWltYWdlKCldLFxuICAgICAgICAgIGV4ZWMgPSBfcmVmWzBdLFxuICAgICAgICAgIHByZWltYWdlID0gX3JlZlsxXTtcbiAgICAgICAgaWYgKCEhZXhlY1tcInN3aXRjaFwiXSgpLnZhbHVlICE9PSAhIXByZWltYWdlW1wic3dpdGNoXCJdKCkudmFsdWUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjcmVhdGlvbiBmdW5jdGlvbiBhcHBlYXJzIGludmFsaWQ6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShpbm5lciksIFwiIChzaG91bGQgYmUgd2FzbSthZGRyZXNzIG9yIHRva2VuK2Fzc2V0KVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChleGVjW1wic3dpdGNoXCJdKCkudmFsdWUpIHtcbiAgICAgICAgICAvLyBjb250cmFjdEV4ZWN1dGFibGVXYXNtXG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvKiogQHR5cGUge3hkci5Db250cmFjdElkUHJlaW1hZ2VGcm9tQWRkcmVzc30gKi9cbiAgICAgICAgICAgICAgdmFyIGRldGFpbHMgPSBwcmVpbWFnZS5mcm9tQWRkcmVzcygpO1xuICAgICAgICAgICAgICBvdXRwdXQuYXJncy50eXBlID0gJ3dhc20nO1xuICAgICAgICAgICAgICBvdXRwdXQuYXJncy53YXNtID0gX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgICAgICAgc2FsdDogZGV0YWlscy5zYWx0KCkudG9TdHJpbmcoJ2hleCcpLFxuICAgICAgICAgICAgICAgIGhhc2g6IGV4ZWMud2FzbUhhc2goKS50b1N0cmluZygnaGV4JyksXG4gICAgICAgICAgICAgICAgYWRkcmVzczogX2FkZHJlc3MuQWRkcmVzcy5mcm9tU2NBZGRyZXNzKGRldGFpbHMuYWRkcmVzcygpKS50b1N0cmluZygpXG4gICAgICAgICAgICAgIH0sIGNyZWF0ZVYyICYmIHtcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvckFyZ3M6IGlubmVyLmNvbnN0cnVjdG9yQXJncygpLm1hcChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF9zY3ZhbC5zY1ZhbFRvTmF0aXZlKShhcmcpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGNvbnRyYWN0RXhlY3V0YWJsZVN0ZWxsYXJBc3NldFxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIG91dHB1dC5hcmdzLnR5cGUgPSAnc2FjJztcbiAgICAgICAgICAgIG91dHB1dC5hcmdzLmFzc2V0ID0gX2Fzc2V0LkFzc2V0LmZyb21PcGVyYXRpb24ocHJlaW1hZ2UuZnJvbUFzc2V0KCkpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBjcmVhdGlvbiB0eXBlOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZXhlYykpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBpbnZvY2F0aW9uIHR5cGUgKFwiLmNvbmNhdChmbltcInN3aXRjaFwiXSgpLCBcIik6IFwiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZm4pKSk7XG4gIH1cbiAgb3V0cHV0Lmludm9jYXRpb25zID0gcm9vdC5zdWJJbnZvY2F0aW9ucygpLm1hcChmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBidWlsZEludm9jYXRpb25UcmVlKGkpO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLyoqXG4gKiBAY2FsbGJhY2sgSW52b2NhdGlvbldhbGtlclxuICpcbiAqIEBwYXJhbSB7eGRyLlNvcm9iYW5BdXRob3JpemVkSW52b2NhdGlvbn0gbm9kZSAgdGhlIGN1cnJlbnRseSBleHBsb3JlZCBub2RlXG4gKiBAcGFyYW0ge251bWJlcn0gZGVwdGggIHRoZSBkZXB0aCBvZiB0aGUgdHJlZSB0aGlzIG5vZGUgaXMgb2NjdXJyaW5nIGF0ICh0aGVcbiAqICAgIHJvb3Qgc3RhcnRzIGF0IGEgZGVwdGggb2YgMSlcbiAqIEBwYXJhbSB7eGRyLlNvcm9iYW5BdXRob3JpemVkSW52b2NhdGlvbn0gW3BhcmVudF0gIHRoaXMgYG5vZGVgcyBwYXJlbnQgbm9kZSxcbiAqICAgIGlmIGFueSAoaS5lLiB0aGlzIGRvZXNuJ3QgZXhpc3QgYXQgdGhlIHJvb3QpXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW58bnVsbHx2b2lkfSAgIHJldHVybmluZyBleGFjdGx5IGBmYWxzZWAgaXMgYSBoaW50IHRvIHN0b3BcbiAqICAgIGV4cGxvcmluZywgb3RoZXIgdmFsdWVzIGFyZSBpZ25vcmVkXG4gKi9cblxuLyoqXG4gKiBFeGVjdXRlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIG9uIGVhY2ggbm9kZSBpbiB0aGUgdHJlZSB1bnRpbCBzdG9wcGVkLlxuICpcbiAqIE5vZGVzIGFyZSB3YWxrZWQgaW4gYSBkZXB0aC1maXJzdCBvcmRlci4gUmV0dXJuaW5nIGBmYWxzZWAgZnJvbSB0aGUgY2FsbGJhY2tcbiAqIHN0b3BzIGZ1cnRoZXIgZGVwdGggZXhwbG9yYXRpb24gYXQgdGhhdCBub2RlLCBidXQgaXQgZG9lcyBub3Qgc3RvcCB0aGUgd2Fsa1xuICogaW4gYSBcImdsb2JhbFwiIHZpZXcuXG4gKlxuICogQHBhcmFtIHt4ZHIuU29yb2JhbkF1dGhvcml6ZWRJbnZvY2F0aW9ufSByb290ICB0aGUgdHJlZSB0byBleHBsb3JlXG4gKiBAcGFyYW0ge0ludm9jYXRpb25XYWxrZXJ9IGNhbGxiYWNrICB0aGUgY2FsbGJhY2sgdG8gZXhlY3V0ZSBmb3IgZWFjaCBub2RlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2Fsa0ludm9jYXRpb25UcmVlKHJvb3QsIGNhbGxiYWNrKSB7XG4gIHdhbGtIZWxwZXIocm9vdCwgMSwgY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gd2Fsa0hlbHBlcihub2RlLCBkZXB0aCwgY2FsbGJhY2ssIHBhcmVudCkge1xuICBpZiAoY2FsbGJhY2sobm9kZSwgZGVwdGgsIHBhcmVudCkgPT09IGZhbHNlIC8qIGFsbG93IHZvaWQgcnYgKi8pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbm9kZS5zdWJJbnZvY2F0aW9ucygpLmZvckVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gd2Fsa0hlbHBlcihpLCBkZXB0aCArIDEsIGNhbGxiYWNrLCBub2RlKTtcbiAgfSk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/invocation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/jsxdr.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/jsxdr.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar cereal = {\n  XdrWriter: _jsXdr.XdrWriter,\n  XdrReader: _jsXdr.XdrReader\n};\nvar _default = exports[\"default\"] = cereal;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9qc3hkci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsYUFBYSxtQkFBTyxDQUFDLG1IQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0JBQWtCIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL2pzeGRyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2pzWGRyID0gcmVxdWlyZShcIkBzdGVsbGFyL2pzLXhkclwiKTtcbnZhciBjZXJlYWwgPSB7XG4gIFhkcldyaXRlcjogX2pzWGRyLlhkcldyaXRlcixcbiAgWGRyUmVhZGVyOiBfanNYZHIuWGRyUmVhZGVyXG59O1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBjZXJlYWw7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/jsxdr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Keypair = void 0;\nvar _tweetnacl = _interopRequireDefault(__webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl/nacl-fast.js\"));\nvar _signing = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signing.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint no-bitwise: [\"error\", {\"allow\": [\"^\"]}] */\n/**\n * `Keypair` represents public (and secret) keys of the account.\n *\n * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other\n * public-key signature systems.\n *\n * Use more convenient methods to create `Keypair` object:\n * * `{@link Keypair.fromPublicKey}`\n * * `{@link Keypair.fromSecret}`\n * * `{@link Keypair.random}`\n *\n * @constructor\n * @param {object} keys At least one of keys must be provided.\n * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)\n * @param {Buffer} [keys.publicKey] Raw public key\n * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)\n */\nvar Keypair = exports.Keypair = /*#__PURE__*/function () {\n  function Keypair(keys) {\n    _classCallCheck(this, Keypair);\n    if (keys.type !== 'ed25519') {\n      throw new Error('Invalid keys type');\n    }\n    this.type = keys.type;\n    if (keys.secretKey) {\n      keys.secretKey = Buffer.from(keys.secretKey);\n      if (keys.secretKey.length !== 32) {\n        throw new Error('secretKey length is invalid');\n      }\n      this._secretSeed = keys.secretKey;\n      this._publicKey = (0, _signing.generate)(keys.secretKey);\n      this._secretKey = Buffer.concat([keys.secretKey, this._publicKey]);\n      if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) {\n        throw new Error('secretKey does not match publicKey');\n      }\n    } else {\n      this._publicKey = Buffer.from(keys.publicKey);\n      if (this._publicKey.length !== 32) {\n        throw new Error('publicKey length is invalid');\n      }\n    }\n  }\n\n  /**\n   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending\n   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.\n   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)\n   * @returns {Keypair}\n   */\n  return _createClass(Keypair, [{\n    key: \"xdrAccountId\",\n    value: function xdrAccountId() {\n      return new _xdr[\"default\"].AccountId.publicKeyTypeEd25519(this._publicKey);\n    }\n  }, {\n    key: \"xdrPublicKey\",\n    value: function xdrPublicKey() {\n      return new _xdr[\"default\"].PublicKey.publicKeyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Creates a {@link xdr.MuxedAccount} object from the public key.\n     *\n     * You will get a different type of muxed account depending on whether or not\n     * you pass an ID.\n     *\n     * @param  {string} [id] - stringified integer indicating the underlying muxed\n     *     ID of the new account object\n     *\n     * @return {xdr.MuxedAccount}\n     */\n  }, {\n    key: \"xdrMuxedAccount\",\n    value: function xdrMuxedAccount(id) {\n      if (typeof id !== 'undefined') {\n        if (typeof id !== 'string') {\n          throw new TypeError(\"expected string for ID, got \".concat(_typeof(id)));\n        }\n        return _xdr[\"default\"].MuxedAccount.keyTypeMuxedEd25519(new _xdr[\"default\"].MuxedAccountMed25519({\n          id: _xdr[\"default\"].Uint64.fromString(id),\n          ed25519: this._publicKey\n        }));\n      }\n      return new _xdr[\"default\"].MuxedAccount.keyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Returns raw public key\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"rawPublicKey\",\n    value: function rawPublicKey() {\n      return this._publicKey;\n    }\n  }, {\n    key: \"signatureHint\",\n    value: function signatureHint() {\n      var a = this.xdrAccountId().toXDR();\n      return a.slice(a.length - 4);\n    }\n\n    /**\n     * Returns public key associated with this `Keypair` object.\n     * @returns {string}\n     */\n  }, {\n    key: \"publicKey\",\n    value: function publicKey() {\n      return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);\n    }\n\n    /**\n     * Returns secret key associated with this `Keypair` object\n     * @returns {string}\n     */\n  }, {\n    key: \"secret\",\n    value: function secret() {\n      if (!this._secretSeed) {\n        throw new Error('no secret key available');\n      }\n      if (this.type === 'ed25519') {\n        return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);\n      }\n      throw new Error('Invalid Keypair type');\n    }\n\n    /**\n     * Returns raw secret key.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"rawSecretKey\",\n    value: function rawSecretKey() {\n      return this._secretSeed;\n    }\n\n    /**\n     * Returns `true` if this `Keypair` object contains secret key and can sign.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"canSign\",\n    value: function canSign() {\n      return !!this._secretKey;\n    }\n\n    /**\n     * Signs data.\n     * @param {Buffer} data Data to sign\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"sign\",\n    value: function sign(data) {\n      if (!this.canSign()) {\n        throw new Error('cannot sign: no secret key available');\n      }\n      return (0, _signing.sign)(data, this._secretKey);\n    }\n\n    /**\n     * Verifies if `signature` for `data` is valid.\n     * @param {Buffer} data Signed data\n     * @param {Buffer} signature Signature\n     * @returns {boolean}\n     */\n  }, {\n    key: \"verify\",\n    value: function verify(data, signature) {\n      return (0, _signing.verify)(data, signature, this._publicKey);\n    }\n\n    /**\n     * Returns the decorated signature (hint+sig) for arbitrary data.\n     *\n     * @param  {Buffer} data  arbitrary data to sign\n     * @return {xdr.DecoratedSignature}   the raw signature structure which can be\n     *     added directly to a transaction envelope\n     *\n     * @see TransactionBase.addDecoratedSignature\n     */\n  }, {\n    key: \"signDecorated\",\n    value: function signDecorated(data) {\n      var signature = this.sign(data);\n      var hint = this.signatureHint();\n      return new _xdr[\"default\"].DecoratedSignature({\n        hint: hint,\n        signature: signature\n      });\n    }\n\n    /**\n     * Returns the raw decorated signature (hint+sig) for a signed payload signer.\n     *\n     *  The hint is defined as the last 4 bytes of the signer key XORed with last\n     *  4 bytes of the payload (zero-left-padded if necessary).\n     *\n     * @param  {Buffer} data    data to both sign and treat as the payload\n     * @return {xdr.DecoratedSignature}\n     *\n     * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0040.md#signature-hint\n     * @see TransactionBase.addDecoratedSignature\n     */\n  }, {\n    key: \"signPayloadDecorated\",\n    value: function signPayloadDecorated(data) {\n      var signature = this.sign(data);\n      var keyHint = this.signatureHint();\n      var hint = Buffer.from(data.slice(-4));\n      if (hint.length < 4) {\n        // append zeroes as needed\n        hint = Buffer.concat([hint, Buffer.alloc(4 - data.length, 0)]);\n      }\n      return new _xdr[\"default\"].DecoratedSignature({\n        hint: hint.map(function (_byte, i) {\n          return _byte ^ keyHint[i];\n        }),\n        signature: signature\n      });\n    }\n  }], [{\n    key: \"fromSecret\",\n    value: function fromSecret(secret) {\n      var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);\n      return this.fromRawEd25519Seed(rawSecret);\n    }\n\n    /**\n     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.\n     *\n     * @param {Buffer} rawSeed Raw 32-byte ed25519 secret key seed\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"fromRawEd25519Seed\",\n    value: function fromRawEd25519Seed(rawSeed) {\n      return new this({\n        type: 'ed25519',\n        secretKey: rawSeed\n      });\n    }\n\n    /**\n     * Returns `Keypair` object representing network master key.\n     * @param {string} networkPassphrase passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"master\",\n    value: function master(networkPassphrase) {\n      if (!networkPassphrase) {\n        throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');\n      }\n      return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));\n    }\n\n    /**\n     * Creates a new `Keypair` object from public key.\n     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"fromPublicKey\",\n    value: function fromPublicKey(publicKey) {\n      publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);\n      if (publicKey.length !== 32) {\n        throw new Error('Invalid Stellar public key');\n      }\n      return new this({\n        type: 'ed25519',\n        publicKey: publicKey\n      });\n    }\n\n    /**\n     * Create a random `Keypair` object.\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"random\",\n    value: function random() {\n      var secret = _tweetnacl[\"default\"].randomBytes(32);\n      return this.fromRawEd25519Seed(secret);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LiquidityPoolAsset = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _get_liquidity_pool_id = __webpack_require__(/*! ./get_liquidity_pool_id */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * LiquidityPoolAsset class represents a liquidity pool trustline change.\n *\n * @constructor\n * @param {Asset} assetA – The first asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {Asset} assetB – The second asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {number} fee – The liquidity pool fee. For now the only fee supported is `30`.\n */\nvar LiquidityPoolAsset = exports.LiquidityPoolAsset = /*#__PURE__*/function () {\n  function LiquidityPoolAsset(assetA, assetB, fee) {\n    _classCallCheck(this, LiquidityPoolAsset);\n    if (!assetA || !(assetA instanceof _asset.Asset)) {\n      throw new Error('assetA is invalid');\n    }\n    if (!assetB || !(assetB instanceof _asset.Asset)) {\n      throw new Error('assetB is invalid');\n    }\n    if (_asset.Asset.compare(assetA, assetB) !== -1) {\n      throw new Error('Assets are not in lexicographic order');\n    }\n    if (!fee || fee !== _get_liquidity_pool_id.LiquidityPoolFeeV18) {\n      throw new Error('fee is invalid');\n    }\n    this.assetA = assetA;\n    this.assetB = assetB;\n    this.fee = fee;\n  }\n\n  /**\n   * Returns a liquidity pool asset object from its XDR ChangeTrustAsset object\n   * representation.\n   * @param {xdr.ChangeTrustAsset} ctAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolAsset}\n   */\n  return _createClass(LiquidityPoolAsset, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the `xdr.ChangeTrustAsset` object for this liquidity pool asset.\n     *\n     * Note: To convert from an {@link Asset `Asset`} to `xdr.ChangeTrustAsset`\n     * please refer to the\n     * {@link Asset.toChangeTrustXDRObject `Asset.toChangeTrustXDRObject`} method.\n     *\n     * @returns {xdr.ChangeTrustAsset} XDR ChangeTrustAsset object.\n     */\n    function toXDRObject() {\n      var lpConstantProductParamsXdr = new _xdr[\"default\"].LiquidityPoolConstantProductParameters({\n        assetA: this.assetA.toXDRObject(),\n        assetB: this.assetB.toXDRObject(),\n        fee: this.fee\n      });\n      var lpParamsXdr = new _xdr[\"default\"].LiquidityPoolParameters('liquidityPoolConstantProduct', lpConstantProductParamsXdr);\n      return new _xdr[\"default\"].ChangeTrustAsset('assetTypePoolShare', lpParamsXdr);\n    }\n\n    /**\n     * @returns {LiquidityPoolParameters} Liquidity pool parameters.\n     */\n  }, {\n    key: \"getLiquidityPoolParameters\",\n    value: function getLiquidityPoolParameters() {\n      return _objectSpread(_objectSpread({}, this), {}, {\n        assetA: this.assetA,\n        assetB: this.assetB,\n        fee: this.fee\n      });\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n  }, {\n    key: \"getAssetType\",\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolAsset} other the LiquidityPoolAsset to compare\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.assetA.equals(other.assetA) && this.assetB.equals(other.assetB) && this.fee === other.fee;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var poolId = (0, _get_liquidity_pool_id.getLiquidityPoolId)('constant_product', this.getLiquidityPoolParameters()).toString('hex');\n      return \"liquidity_pool:\".concat(poolId);\n    }\n  }], [{\n    key: \"fromOperation\",\n    value: function fromOperation(ctAssetXdr) {\n      var assetType = ctAssetXdr[\"switch\"]();\n      if (assetType === _xdr[\"default\"].AssetType.assetTypePoolShare()) {\n        var liquidityPoolParameters = ctAssetXdr.liquidityPool().constantProduct();\n        return new this(_asset.Asset.fromOperation(liquidityPoolParameters.assetA()), _asset.Asset.fromOperation(liquidityPoolParameters.assetB()), liquidityPoolParameters.fee());\n      }\n      throw new Error(\"Invalid asset type: \".concat(assetType.name));\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LiquidityPoolId = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * LiquidityPoolId class represents the asset referenced by a trustline to a\n * liquidity pool.\n *\n * @constructor\n * @param {string} liquidityPoolId - The ID of the liquidity pool in string 'hex'.\n */\nvar LiquidityPoolId = exports.LiquidityPoolId = /*#__PURE__*/function () {\n  function LiquidityPoolId(liquidityPoolId) {\n    _classCallCheck(this, LiquidityPoolId);\n    if (!liquidityPoolId) {\n      throw new Error('liquidityPoolId cannot be empty');\n    }\n    if (!/^[a-f0-9]{64}$/.test(liquidityPoolId)) {\n      throw new Error('Liquidity pool ID is not a valid hash');\n    }\n    this.liquidityPoolId = liquidityPoolId;\n  }\n\n  /**\n   * Returns a liquidity pool ID object from its xdr.TrustLineAsset representation.\n   * @param {xdr.TrustLineAsset} tlAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolId}\n   */\n  return _createClass(LiquidityPoolId, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the `xdr.TrustLineAsset` object for this liquidity pool ID.\n     *\n     * Note: To convert from {@link Asset `Asset`} to `xdr.TrustLineAsset` please\n     * refer to the\n     * {@link Asset.toTrustLineXDRObject `Asset.toTrustLineXDRObject`} method.\n     *\n     * @returns {xdr.TrustLineAsset} XDR LiquidityPoolId object\n     */\n    function toXDRObject() {\n      var xdrPoolId = _xdr[\"default\"].PoolId.fromXDR(this.liquidityPoolId, 'hex');\n      return new _xdr[\"default\"].TrustLineAsset('assetTypePoolShare', xdrPoolId);\n    }\n\n    /**\n     * @returns {string} Liquidity pool ID.\n     */\n  }, {\n    key: \"getLiquidityPoolId\",\n    value: function getLiquidityPoolId() {\n      return String(this.liquidityPoolId);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n  }, {\n    key: \"getAssetType\",\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolId} asset LiquidityPoolId to compare.\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(asset) {\n      return this.liquidityPoolId === asset.getLiquidityPoolId();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"liquidity_pool:\".concat(this.liquidityPoolId);\n    }\n  }], [{\n    key: \"fromOperation\",\n    value: function fromOperation(tlAssetXdr) {\n      var assetType = tlAssetXdr[\"switch\"]();\n      if (assetType === _xdr[\"default\"].AssetType.assetTypePoolShare()) {\n        var liquidityPoolId = tlAssetXdr.liquidityPoolId().toString('hex');\n        return new this(liquidityPoolId);\n      }\n      throw new Error(\"Invalid asset type: \".concat(assetType.name));\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9saXF1aWRpdHlfcG9vbF9pZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix1QkFBdUI7QUFDdkIsa0NBQWtDLG1CQUFPLENBQUMsb0hBQU87QUFDakQscUNBQXFDLGlDQUFpQztBQUN0RSxzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixHQUFHO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLG9CQUFvQjtBQUNqQyxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIscUJBQXFCO0FBQ25EO0FBQ0EsUUFBUSwrREFBK0Q7QUFDdkU7QUFDQSxpQkFBaUIsb0JBQW9CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLCtCQUErQjtBQUNoRDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL2xpcXVpZGl0eV9wb29sX2lkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5MaXF1aWRpdHlQb29sSWQgPSB2b2lkIDA7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4veGRyXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG4vKipcbiAqIExpcXVpZGl0eVBvb2xJZCBjbGFzcyByZXByZXNlbnRzIHRoZSBhc3NldCByZWZlcmVuY2VkIGJ5IGEgdHJ1c3RsaW5lIHRvIGFcbiAqIGxpcXVpZGl0eSBwb29sLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGxpcXVpZGl0eVBvb2xJZCAtIFRoZSBJRCBvZiB0aGUgbGlxdWlkaXR5IHBvb2wgaW4gc3RyaW5nICdoZXgnLlxuICovXG52YXIgTGlxdWlkaXR5UG9vbElkID0gZXhwb3J0cy5MaXF1aWRpdHlQb29sSWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMaXF1aWRpdHlQb29sSWQobGlxdWlkaXR5UG9vbElkKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpcXVpZGl0eVBvb2xJZCk7XG4gICAgaWYgKCFsaXF1aWRpdHlQb29sSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbGlxdWlkaXR5UG9vbElkIGNhbm5vdCBiZSBlbXB0eScpO1xuICAgIH1cbiAgICBpZiAoIS9eW2EtZjAtOV17NjR9JC8udGVzdChsaXF1aWRpdHlQb29sSWQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xpcXVpZGl0eSBwb29sIElEIGlzIG5vdCBhIHZhbGlkIGhhc2gnKTtcbiAgICB9XG4gICAgdGhpcy5saXF1aWRpdHlQb29sSWQgPSBsaXF1aWRpdHlQb29sSWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpcXVpZGl0eSBwb29sIElEIG9iamVjdCBmcm9tIGl0cyB4ZHIuVHJ1c3RMaW5lQXNzZXQgcmVwcmVzZW50YXRpb24uXG4gICAqIEBwYXJhbSB7eGRyLlRydXN0TGluZUFzc2V0fSB0bEFzc2V0WGRyIC0gVGhlIGFzc2V0IFhEUiBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtMaXF1aWRpdHlQb29sSWR9XG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKExpcXVpZGl0eVBvb2xJZCwgW3tcbiAgICBrZXk6IFwidG9YRFJPYmplY3RcIixcbiAgICB2YWx1ZTpcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBgeGRyLlRydXN0TGluZUFzc2V0YCBvYmplY3QgZm9yIHRoaXMgbGlxdWlkaXR5IHBvb2wgSUQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUbyBjb252ZXJ0IGZyb20ge0BsaW5rIEFzc2V0IGBBc3NldGB9IHRvIGB4ZHIuVHJ1c3RMaW5lQXNzZXRgIHBsZWFzZVxuICAgICAqIHJlZmVyIHRvIHRoZVxuICAgICAqIHtAbGluayBBc3NldC50b1RydXN0TGluZVhEUk9iamVjdCBgQXNzZXQudG9UcnVzdExpbmVYRFJPYmplY3RgfSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7eGRyLlRydXN0TGluZUFzc2V0fSBYRFIgTGlxdWlkaXR5UG9vbElkIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvWERST2JqZWN0KCkge1xuICAgICAgdmFyIHhkclBvb2xJZCA9IF94ZHJbXCJkZWZhdWx0XCJdLlBvb2xJZC5mcm9tWERSKHRoaXMubGlxdWlkaXR5UG9vbElkLCAnaGV4Jyk7XG4gICAgICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLlRydXN0TGluZUFzc2V0KCdhc3NldFR5cGVQb29sU2hhcmUnLCB4ZHJQb29sSWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IExpcXVpZGl0eSBwb29sIElELlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldExpcXVpZGl0eVBvb2xJZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaXF1aWRpdHlQb29sSWQoKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKHRoaXMubGlxdWlkaXR5UG9vbElkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2VlIFtBc3NldHMgY29uY2VwdF0oaHR0cHM6Ly9kZXZlbG9wZXJzLnN0ZWxsYXIub3JnL2RvY3MvZ2xvc3NhcnkvYXNzZXRzLylcbiAgICAgKiBAcmV0dXJucyB7QXNzZXRUeXBlLmxpcXVpZGl0eVBvb2xTaGFyZXN9IGFzc2V0IHR5cGUuIENhbiBvbmx5IGJlIGBsaXF1aWRpdHlfcG9vbF9zaGFyZXNgLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldEFzc2V0VHlwZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBc3NldFR5cGUoKSB7XG4gICAgICByZXR1cm4gJ2xpcXVpZGl0eV9wb29sX3NoYXJlcyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtMaXF1aWRpdHlQb29sSWR9IGFzc2V0IExpcXVpZGl0eVBvb2xJZCB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhpcyBhc3NldCBlcXVhbHMgdGhlIGdpdmVuIGFzc2V0LlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImVxdWFsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbHMoYXNzZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpcXVpZGl0eVBvb2xJZCA9PT0gYXNzZXQuZ2V0TGlxdWlkaXR5UG9vbElkKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwibGlxdWlkaXR5X3Bvb2w6XCIuY29uY2F0KHRoaXMubGlxdWlkaXR5UG9vbElkKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJmcm9tT3BlcmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21PcGVyYXRpb24odGxBc3NldFhkcikge1xuICAgICAgdmFyIGFzc2V0VHlwZSA9IHRsQXNzZXRYZHJbXCJzd2l0Y2hcIl0oKTtcbiAgICAgIGlmIChhc3NldFR5cGUgPT09IF94ZHJbXCJkZWZhdWx0XCJdLkFzc2V0VHlwZS5hc3NldFR5cGVQb29sU2hhcmUoKSkge1xuICAgICAgICB2YXIgbGlxdWlkaXR5UG9vbElkID0gdGxBc3NldFhkci5saXF1aWRpdHlQb29sSWQoKS50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhsaXF1aWRpdHlQb29sSWQpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhc3NldCB0eXBlOiBcIi5jb25jYXQoYXNzZXRUeXBlLm5hbWUpKTtcbiAgICB9XG4gIH1dKTtcbn0oKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/memo.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/memo.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MemoText = exports.MemoReturn = exports.MemoNone = exports.MemoID = exports.MemoHash = exports.Memo = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./util/bignumber */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Type of {@link Memo}.\n */\nvar MemoNone = exports.MemoNone = 'none';\n/**\n * Type of {@link Memo}.\n */\nvar MemoID = exports.MemoID = 'id';\n/**\n * Type of {@link Memo}.\n */\nvar MemoText = exports.MemoText = 'text';\n/**\n * Type of {@link Memo}.\n */\nvar MemoHash = exports.MemoHash = 'hash';\n/**\n * Type of {@link Memo}.\n */\nvar MemoReturn = exports.MemoReturn = 'return';\n\n/**\n * `Memo` represents memos attached to transactions.\n *\n * @param {string} type - `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`\n * @param {*} value - `string` for `MemoID`, `MemoText`, buffer of hex string for `MemoHash` or `MemoReturn`\n * @see [Transactions concept](https://developers.stellar.org/docs/glossary/transactions/)\n * @class Memo\n */\nvar Memo = exports.Memo = /*#__PURE__*/function () {\n  function Memo(type) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    _classCallCheck(this, Memo);\n    this._type = type;\n    this._value = value;\n    switch (this._type) {\n      case MemoNone:\n        break;\n      case MemoID:\n        Memo._validateIdValue(value);\n        break;\n      case MemoText:\n        Memo._validateTextValue(value);\n        break;\n      case MemoHash:\n      case MemoReturn:\n        Memo._validateHashValue(value);\n        // We want MemoHash and MemoReturn to have Buffer as a value\n        if (typeof value === 'string') {\n          this._value = Buffer.from(value, 'hex');\n        }\n        break;\n      default:\n        throw new Error('Invalid memo type');\n    }\n  }\n\n  /**\n   * Contains memo type: `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`\n   */\n  return _createClass(Memo, [{\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      throw new Error('Memo is immutable');\n    }\n\n    /**\n     * Contains memo value:\n     * * `null` for `MemoNone`,\n     * * `string` for `MemoID`,\n     * * `Buffer` for `MemoText` after decoding using `fromXDRObject`, original value otherwise,\n     * * `Buffer` for `MemoHash`, `MemoReturn`.\n     */\n  }, {\n    key: \"value\",\n    get: function get() {\n      switch (this._type) {\n        case MemoNone:\n          return null;\n        case MemoID:\n        case MemoText:\n          return this._value;\n        case MemoHash:\n        case MemoReturn:\n          return Buffer.from(this._value);\n        default:\n          throw new Error('Invalid memo type');\n      }\n    },\n    set: function set(value) {\n      throw new Error('Memo is immutable');\n    }\n  }, {\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns XDR memo object.\n     * @returns {xdr.Memo}\n     */\n    function toXDRObject() {\n      switch (this._type) {\n        case MemoNone:\n          return _xdr[\"default\"].Memo.memoNone();\n        case MemoID:\n          return _xdr[\"default\"].Memo.memoId(_jsXdr.UnsignedHyper.fromString(this._value));\n        case MemoText:\n          return _xdr[\"default\"].Memo.memoText(this._value);\n        case MemoHash:\n          return _xdr[\"default\"].Memo.memoHash(this._value);\n        case MemoReturn:\n          return _xdr[\"default\"].Memo.memoReturn(this._value);\n        default:\n          return null;\n      }\n    }\n\n    /**\n     * Returns {@link Memo} from XDR memo object.\n     * @param {xdr.Memo} object XDR memo object\n     * @returns {Memo}\n     */\n  }], [{\n    key: \"_validateIdValue\",\n    value: function _validateIdValue(value) {\n      var error = new Error(\"Expects a int64 as a string. Got \".concat(value));\n      if (typeof value !== 'string') {\n        throw error;\n      }\n      var number;\n      try {\n        number = new _bignumber[\"default\"](value);\n      } catch (e) {\n        throw error;\n      }\n\n      // Infinity\n      if (!number.isFinite()) {\n        throw error;\n      }\n\n      // NaN\n      if (number.isNaN()) {\n        throw error;\n      }\n    }\n  }, {\n    key: \"_validateTextValue\",\n    value: function _validateTextValue(value) {\n      if (!_xdr[\"default\"].Memo.armTypeForArm('text').isValid(value)) {\n        throw new Error('Expects string, array or buffer, max 28 bytes');\n      }\n    }\n  }, {\n    key: \"_validateHashValue\",\n    value: function _validateHashValue(value) {\n      var error = new Error(\"Expects a 32 byte hash value or hex encoded string. Got \".concat(value));\n      if (value === null || typeof value === 'undefined') {\n        throw error;\n      }\n      var valueBuffer;\n      if (typeof value === 'string') {\n        if (!/^[0-9A-Fa-f]{64}$/g.test(value)) {\n          throw error;\n        }\n        valueBuffer = Buffer.from(value, 'hex');\n      } else if (Buffer.isBuffer(value)) {\n        valueBuffer = Buffer.from(value);\n      } else {\n        throw error;\n      }\n      if (!valueBuffer.length || valueBuffer.length !== 32) {\n        throw error;\n      }\n    }\n\n    /**\n     * Returns an empty memo (`MemoNone`).\n     * @returns {Memo}\n     */\n  }, {\n    key: \"none\",\n    value: function none() {\n      return new Memo(MemoNone);\n    }\n\n    /**\n     * Creates and returns a `MemoText` memo.\n     * @param {string} text - memo text\n     * @returns {Memo}\n     */\n  }, {\n    key: \"text\",\n    value: function text(_text) {\n      return new Memo(MemoText, _text);\n    }\n\n    /**\n     * Creates and returns a `MemoID` memo.\n     * @param {string} id - 64-bit number represented as a string\n     * @returns {Memo}\n     */\n  }, {\n    key: \"id\",\n    value: function id(_id) {\n      return new Memo(MemoID, _id);\n    }\n\n    /**\n     * Creates and returns a `MemoHash` memo.\n     * @param {array|string} hash - 32 byte hash or hex encoded string\n     * @returns {Memo}\n     */\n  }, {\n    key: \"hash\",\n    value: function hash(_hash) {\n      return new Memo(MemoHash, _hash);\n    }\n\n    /**\n     * Creates and returns a `MemoReturn` memo.\n     * @param {array|string} hash - 32 byte hash or hex encoded string\n     * @returns {Memo}\n     */\n  }, {\n    key: \"return\",\n    value: function _return(hash) {\n      return new Memo(MemoReturn, hash);\n    }\n  }, {\n    key: \"fromXDRObject\",\n    value: function fromXDRObject(object) {\n      switch (object.arm()) {\n        case 'id':\n          return Memo.id(object.value().toString());\n        case 'text':\n          return Memo.text(object.value());\n        case 'hash':\n          return Memo.hash(object.value());\n        case 'retHash':\n          return Memo[\"return\"](object.value());\n        default:\n          break;\n      }\n      if (typeof object.value() === 'undefined') {\n        return Memo.none();\n      }\n      throw new Error('Unknown type');\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9tZW1vLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdCQUFnQixHQUFHLGtCQUFrQixHQUFHLGdCQUFnQixHQUFHLGNBQWMsR0FBRyxnQkFBZ0IsR0FBRyxZQUFZO0FBQzNHLGFBQWEsbUJBQU8sQ0FBQyxtSEFBaUI7QUFDdEMsd0NBQXdDLG1CQUFPLENBQUMsMElBQWtCO0FBQ2xFLGtDQUFrQyxtQkFBTyxDQUFDLG9IQUFPO0FBQ2pELHFDQUFxQyxpQ0FBaUM7QUFDdEUsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQSxhQUFhLGNBQWM7QUFDM0I7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0EsaUJBQWlCLGtCQUFrQjs7QUFFbkM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsR0FBRztBQUNkO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFlBQVk7QUFDNUIsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQjtBQUNqQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLEdBQUc7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0IsaUJBQWlCO0FBQ2pCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0IsaUJBQWlCO0FBQ2pCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvbWVtby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTWVtb1RleHQgPSBleHBvcnRzLk1lbW9SZXR1cm4gPSBleHBvcnRzLk1lbW9Ob25lID0gZXhwb3J0cy5NZW1vSUQgPSBleHBvcnRzLk1lbW9IYXNoID0gZXhwb3J0cy5NZW1vID0gdm9pZCAwO1xudmFyIF9qc1hkciA9IHJlcXVpcmUoXCJAc3RlbGxhci9qcy14ZHJcIik7XG52YXIgX2JpZ251bWJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9iaWdudW1iZXJcIikpO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBUeXBlIG9mIHtAbGluayBNZW1vfS5cbiAqL1xudmFyIE1lbW9Ob25lID0gZXhwb3J0cy5NZW1vTm9uZSA9ICdub25lJztcbi8qKlxuICogVHlwZSBvZiB7QGxpbmsgTWVtb30uXG4gKi9cbnZhciBNZW1vSUQgPSBleHBvcnRzLk1lbW9JRCA9ICdpZCc7XG4vKipcbiAqIFR5cGUgb2Yge0BsaW5rIE1lbW99LlxuICovXG52YXIgTWVtb1RleHQgPSBleHBvcnRzLk1lbW9UZXh0ID0gJ3RleHQnO1xuLyoqXG4gKiBUeXBlIG9mIHtAbGluayBNZW1vfS5cbiAqL1xudmFyIE1lbW9IYXNoID0gZXhwb3J0cy5NZW1vSGFzaCA9ICdoYXNoJztcbi8qKlxuICogVHlwZSBvZiB7QGxpbmsgTWVtb30uXG4gKi9cbnZhciBNZW1vUmV0dXJuID0gZXhwb3J0cy5NZW1vUmV0dXJuID0gJ3JldHVybic7XG5cbi8qKlxuICogYE1lbW9gIHJlcHJlc2VudHMgbWVtb3MgYXR0YWNoZWQgdG8gdHJhbnNhY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gYE1lbW9Ob25lYCwgYE1lbW9JRGAsIGBNZW1vVGV4dGAsIGBNZW1vSGFzaGAgb3IgYE1lbW9SZXR1cm5gXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gYHN0cmluZ2AgZm9yIGBNZW1vSURgLCBgTWVtb1RleHRgLCBidWZmZXIgb2YgaGV4IHN0cmluZyBmb3IgYE1lbW9IYXNoYCBvciBgTWVtb1JldHVybmBcbiAqIEBzZWUgW1RyYW5zYWN0aW9ucyBjb25jZXB0XShodHRwczovL2RldmVsb3BlcnMuc3RlbGxhci5vcmcvZG9jcy9nbG9zc2FyeS90cmFuc2FjdGlvbnMvKVxuICogQGNsYXNzIE1lbW9cbiAqL1xudmFyIE1lbW8gPSBleHBvcnRzLk1lbW8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNZW1vKHR5cGUpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbW8pO1xuICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgc3dpdGNoICh0aGlzLl90eXBlKSB7XG4gICAgICBjYXNlIE1lbW9Ob25lOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTWVtb0lEOlxuICAgICAgICBNZW1vLl92YWxpZGF0ZUlkVmFsdWUodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTWVtb1RleHQ6XG4gICAgICAgIE1lbW8uX3ZhbGlkYXRlVGV4dFZhbHVlKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE1lbW9IYXNoOlxuICAgICAgY2FzZSBNZW1vUmV0dXJuOlxuICAgICAgICBNZW1vLl92YWxpZGF0ZUhhc2hWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIC8vIFdlIHdhbnQgTWVtb0hhc2ggYW5kIE1lbW9SZXR1cm4gdG8gaGF2ZSBCdWZmZXIgYXMgYSB2YWx1ZVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuX3ZhbHVlID0gQnVmZmVyLmZyb20odmFsdWUsICdoZXgnKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZW1vIHR5cGUnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29udGFpbnMgbWVtbyB0eXBlOiBgTWVtb05vbmVgLCBgTWVtb0lEYCwgYE1lbW9UZXh0YCwgYE1lbW9IYXNoYCBvciBgTWVtb1JldHVybmBcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoTWVtbywgW3tcbiAgICBrZXk6IFwidHlwZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lbW8gaXMgaW1tdXRhYmxlJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udGFpbnMgbWVtbyB2YWx1ZTpcbiAgICAgKiAqIGBudWxsYCBmb3IgYE1lbW9Ob25lYCxcbiAgICAgKiAqIGBzdHJpbmdgIGZvciBgTWVtb0lEYCxcbiAgICAgKiAqIGBCdWZmZXJgIGZvciBgTWVtb1RleHRgIGFmdGVyIGRlY29kaW5nIHVzaW5nIGBmcm9tWERST2JqZWN0YCwgb3JpZ2luYWwgdmFsdWUgb3RoZXJ3aXNlLFxuICAgICAqICogYEJ1ZmZlcmAgZm9yIGBNZW1vSGFzaGAsIGBNZW1vUmV0dXJuYC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ2YWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgc3dpdGNoICh0aGlzLl90eXBlKSB7XG4gICAgICAgIGNhc2UgTWVtb05vbmU6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNhc2UgTWVtb0lEOlxuICAgICAgICBjYXNlIE1lbW9UZXh0OlxuICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICAgICAgY2FzZSBNZW1vSGFzaDpcbiAgICAgICAgY2FzZSBNZW1vUmV0dXJuOlxuICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLl92YWx1ZSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1lbW8gdHlwZScpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWVtbyBpcyBpbW11dGFibGUnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9YRFJPYmplY3RcIixcbiAgICB2YWx1ZTpcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIFhEUiBtZW1vIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7eGRyLk1lbW99XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9YRFJPYmplY3QoKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3R5cGUpIHtcbiAgICAgICAgY2FzZSBNZW1vTm9uZTpcbiAgICAgICAgICByZXR1cm4gX3hkcltcImRlZmF1bHRcIl0uTWVtby5tZW1vTm9uZSgpO1xuICAgICAgICBjYXNlIE1lbW9JRDpcbiAgICAgICAgICByZXR1cm4gX3hkcltcImRlZmF1bHRcIl0uTWVtby5tZW1vSWQoX2pzWGRyLlVuc2lnbmVkSHlwZXIuZnJvbVN0cmluZyh0aGlzLl92YWx1ZSkpO1xuICAgICAgICBjYXNlIE1lbW9UZXh0OlxuICAgICAgICAgIHJldHVybiBfeGRyW1wiZGVmYXVsdFwiXS5NZW1vLm1lbW9UZXh0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgY2FzZSBNZW1vSGFzaDpcbiAgICAgICAgICByZXR1cm4gX3hkcltcImRlZmF1bHRcIl0uTWVtby5tZW1vSGFzaCh0aGlzLl92YWx1ZSk7XG4gICAgICAgIGNhc2UgTWVtb1JldHVybjpcbiAgICAgICAgICByZXR1cm4gX3hkcltcImRlZmF1bHRcIl0uTWVtby5tZW1vUmV0dXJuKHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHtAbGluayBNZW1vfSBmcm9tIFhEUiBtZW1vIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3hkci5NZW1vfSBvYmplY3QgWERSIG1lbW8gb2JqZWN0XG4gICAgICogQHJldHVybnMge01lbW99XG4gICAgICovXG4gIH1dLCBbe1xuICAgIGtleTogXCJfdmFsaWRhdGVJZFZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF92YWxpZGF0ZUlkVmFsdWUodmFsdWUpIHtcbiAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIkV4cGVjdHMgYSBpbnQ2NCBhcyBhIHN0cmluZy4gR290IFwiLmNvbmNhdCh2YWx1ZSkpO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICB2YXIgbnVtYmVyO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbnVtYmVyID0gbmV3IF9iaWdudW1iZXJbXCJkZWZhdWx0XCJdKHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIC8vIEluZmluaXR5XG4gICAgICBpZiAoIW51bWJlci5pc0Zpbml0ZSgpKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICAvLyBOYU5cbiAgICAgIGlmIChudW1iZXIuaXNOYU4oKSkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3ZhbGlkYXRlVGV4dFZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF92YWxpZGF0ZVRleHRWYWx1ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFfeGRyW1wiZGVmYXVsdFwiXS5NZW1vLmFybVR5cGVGb3JBcm0oJ3RleHQnKS5pc1ZhbGlkKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdHMgc3RyaW5nLCBhcnJheSBvciBidWZmZXIsIG1heCAyOCBieXRlcycpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfdmFsaWRhdGVIYXNoVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ZhbGlkYXRlSGFzaFZhbHVlKHZhbHVlKSB7XG4gICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXCJFeHBlY3RzIGEgMzIgYnl0ZSBoYXNoIHZhbHVlIG9yIGhleCBlbmNvZGVkIHN0cmluZy4gR290IFwiLmNvbmNhdCh2YWx1ZSkpO1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWVCdWZmZXI7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoIS9eWzAtOUEtRmEtZl17NjR9JC9nLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVCdWZmZXIgPSBCdWZmZXIuZnJvbSh2YWx1ZSwgJ2hleCcpO1xuICAgICAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlQnVmZmVyID0gQnVmZmVyLmZyb20odmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICBpZiAoIXZhbHVlQnVmZmVyLmxlbmd0aCB8fCB2YWx1ZUJ1ZmZlci5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gZW1wdHkgbWVtbyAoYE1lbW9Ob25lYCkuXG4gICAgICogQHJldHVybnMge01lbW99XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwibm9uZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBub25lKCkge1xuICAgICAgcmV0dXJuIG5ldyBNZW1vKE1lbW9Ob25lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgYE1lbW9UZXh0YCBtZW1vLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gbWVtbyB0ZXh0XG4gICAgICogQHJldHVybnMge01lbW99XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0ZXh0KF90ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IE1lbW8oTWVtb1RleHQsIF90ZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgYE1lbW9JRGAgbWVtby5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSA2NC1iaXQgbnVtYmVyIHJlcHJlc2VudGVkIGFzIGEgc3RyaW5nXG4gICAgICogQHJldHVybnMge01lbW99XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiaWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaWQoX2lkKSB7XG4gICAgICByZXR1cm4gbmV3IE1lbW8oTWVtb0lELCBfaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBgTWVtb0hhc2hgIG1lbW8uXG4gICAgICogQHBhcmFtIHthcnJheXxzdHJpbmd9IGhhc2ggLSAzMiBieXRlIGhhc2ggb3IgaGV4IGVuY29kZWQgc3RyaW5nXG4gICAgICogQHJldHVybnMge01lbW99XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNoKF9oYXNoKSB7XG4gICAgICByZXR1cm4gbmV3IE1lbW8oTWVtb0hhc2gsIF9oYXNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgYE1lbW9SZXR1cm5gIG1lbW8uXG4gICAgICogQHBhcmFtIHthcnJheXxzdHJpbmd9IGhhc2ggLSAzMiBieXRlIGhhc2ggb3IgaGV4IGVuY29kZWQgc3RyaW5nXG4gICAgICogQHJldHVybnMge01lbW99XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwicmV0dXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXR1cm4oaGFzaCkge1xuICAgICAgcmV0dXJuIG5ldyBNZW1vKE1lbW9SZXR1cm4sIGhhc2gpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmcm9tWERST2JqZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21YRFJPYmplY3Qob2JqZWN0KSB7XG4gICAgICBzd2l0Y2ggKG9iamVjdC5hcm0oKSkge1xuICAgICAgICBjYXNlICdpZCc6XG4gICAgICAgICAgcmV0dXJuIE1lbW8uaWQob2JqZWN0LnZhbHVlKCkudG9TdHJpbmcoKSk7XG4gICAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICAgIHJldHVybiBNZW1vLnRleHQob2JqZWN0LnZhbHVlKCkpO1xuICAgICAgICBjYXNlICdoYXNoJzpcbiAgICAgICAgICByZXR1cm4gTWVtby5oYXNoKG9iamVjdC52YWx1ZSgpKTtcbiAgICAgICAgY2FzZSAncmV0SGFzaCc6XG4gICAgICAgICAgcmV0dXJuIE1lbW9bXCJyZXR1cm5cIl0ob2JqZWN0LnZhbHVlKCkpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvYmplY3QudmFsdWUoKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIE1lbW8ubm9uZSgpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGUnKTtcbiAgICB9XG4gIH1dKTtcbn0oKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/memo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/muxed_account.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/muxed_account.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MuxedAccount = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _account = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/account.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Represents a muxed account for transactions and operations.\n *\n * A muxed (or *multiplexed*) account (defined rigorously in\n * [CAP-27](https://stellar.org/protocol/cap-27) and briefly in\n * [SEP-23](https://stellar.org/protocol/sep-23)) is one that resolves a single\n * Stellar `G...`` account to many different underlying IDs.\n *\n * For example, you may have a single Stellar address for accounting purposes:\n *   GA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJVSGZ\n *\n * Yet would like to use it for 4 different family members:\n *   1: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAGZFQ\n *   2: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAALIWQ\n *   3: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAPYHQ\n *   4: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAQLQQ\n *\n * This object makes it easy to create muxed accounts from regular accounts,\n * duplicate them, get/set the underlying IDs, etc. without mucking around with\n * the raw XDR.\n *\n * Because muxed accounts are purely an off-chain convention, they all share the\n * sequence number tied to their underlying G... account. Thus, this object\n * *requires* an {@link Account} instance to be passed in, so that muxed\n * instances of an account can collectively modify the sequence number whenever\n * a muxed account is used as the source of a @{link Transaction} with {@link\n * TransactionBuilder}.\n *\n * @constructor\n *\n * @param {Account}   account - the @{link Account} instance representing the\n *                              underlying G... address\n * @param {string}    id      - a stringified uint64 value that represents the\n *                              ID of the muxed account\n *\n * @link https://developers.stellar.org/docs/glossary/muxed-accounts/\n */\nvar MuxedAccount = exports.MuxedAccount = /*#__PURE__*/function () {\n  function MuxedAccount(baseAccount, id) {\n    _classCallCheck(this, MuxedAccount);\n    var accountId = baseAccount.accountId();\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    this.account = baseAccount;\n    this._muxedXdr = (0, _decode_encode_muxed_account.encodeMuxedAccount)(accountId, id);\n    this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n    this._id = id;\n  }\n\n  /**\n   * Parses an M-address into a MuxedAccount object.\n   *\n   * @param  {string} mAddress    - an M-address to transform\n   * @param  {string} sequenceNum - the sequence number of the underlying {@link\n   *     Account}, to use for the underlying base account (@link\n   *     MuxedAccount.baseAccount). If you're using the SDK, you can use\n   *     `server.loadAccount` to fetch this if you don't know it.\n   *\n   * @return {MuxedAccount}\n   */\n  return _createClass(MuxedAccount, [{\n    key: \"baseAccount\",\n    value:\n    /**\n     * @return {Account} the underlying account object shared among all muxed\n     *     accounts with this Stellar address\n     */\n    function baseAccount() {\n      return this.account;\n    }\n\n    /**\n     * @return {string} the M-address representing this account's (G-address, ID)\n     */\n  }, {\n    key: \"accountId\",\n    value: function accountId() {\n      return this._mAddress;\n    }\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n  }, {\n    key: \"setId\",\n    value: function setId(id) {\n      if (typeof id !== 'string') {\n        throw new Error('id should be a string representing a number (uint64)');\n      }\n      this._muxedXdr.med25519().id(_xdr[\"default\"].Uint64.fromString(id));\n      this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n      this._id = id;\n      return this;\n    }\n\n    /**\n     * Accesses the underlying account's sequence number.\n     * @return {string}  strigified sequence number for the underlying account\n     */\n  }, {\n    key: \"sequenceNumber\",\n    value: function sequenceNumber() {\n      return this.account.sequenceNumber();\n    }\n\n    /**\n     * Increments the underlying account's sequence number by one.\n     * @return {void}\n     */\n  }, {\n    key: \"incrementSequenceNumber\",\n    value: function incrementSequenceNumber() {\n      return this.account.incrementSequenceNumber();\n    }\n\n    /**\n     * @return {xdr.MuxedAccount} the XDR object representing this muxed account's\n     *     G-address and uint64 ID\n     */\n  }, {\n    key: \"toXDRObject\",\n    value: function toXDRObject() {\n      return this._muxedXdr;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(otherMuxedAccount) {\n      return this.accountId() === otherMuxedAccount.accountId();\n    }\n  }], [{\n    key: \"fromAddress\",\n    value: function fromAddress(mAddress, sequenceNum) {\n      var muxedAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(mAddress);\n      var gAddress = (0, _decode_encode_muxed_account.extractBaseAddress)(mAddress);\n      var id = muxedAccount.med25519().id().toString();\n      return new MuxedAccount(new _account.Account(gAddress, sequenceNum), id);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/muxed_account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/network.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/network.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Networks = void 0;\n/**\n * Contains passphrases for common networks:\n * * `Networks.PUBLIC`: `Public Global Stellar Network ; September 2015`\n * * `Networks.TESTNET`: `Test SDF Network ; September 2015`\n * * `Networks.FUTURENET`: `Test SDF Future Network ; October 2022`\n * * `Networks.STANDALONE`: `Standalone Network ; February 2017`\n *\n * @type {{PUBLIC: string, TESTNET: string, FUTURENET: string, STANDALONE: string }}\n */\nvar Networks = exports.Networks = {\n  PUBLIC: 'Public Global Stellar Network ; September 2015',\n  TESTNET: 'Test SDF Network ; September 2015',\n  FUTURENET: 'Test SDF Future Network ; October 2022',\n  SANDBOX: 'Local Sandbox Stellar Network ; September 2022',\n  STANDALONE: 'Standalone Network ; February 2017'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9uZXR3b3JrLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EseURBQXlEO0FBQ3pELDZDQUE2QztBQUM3QyxzREFBc0Q7QUFDdEQsa0RBQWtEO0FBQ2xEO0FBQ0EsV0FBVztBQUNYO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0IsMkNBQTJDO0FBQzNDLCtCQUErQjtBQUMvQix3Q0FBd0M7QUFDeEMsNENBQTRDO0FBQzVDLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9uZXR3b3JrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5OZXR3b3JrcyA9IHZvaWQgMDtcbi8qKlxuICogQ29udGFpbnMgcGFzc3BocmFzZXMgZm9yIGNvbW1vbiBuZXR3b3JrczpcbiAqICogYE5ldHdvcmtzLlBVQkxJQ2A6IGBQdWJsaWMgR2xvYmFsIFN0ZWxsYXIgTmV0d29yayA7IFNlcHRlbWJlciAyMDE1YFxuICogKiBgTmV0d29ya3MuVEVTVE5FVGA6IGBUZXN0IFNERiBOZXR3b3JrIDsgU2VwdGVtYmVyIDIwMTVgXG4gKiAqIGBOZXR3b3Jrcy5GVVRVUkVORVRgOiBgVGVzdCBTREYgRnV0dXJlIE5ldHdvcmsgOyBPY3RvYmVyIDIwMjJgXG4gKiAqIGBOZXR3b3Jrcy5TVEFOREFMT05FYDogYFN0YW5kYWxvbmUgTmV0d29yayA7IEZlYnJ1YXJ5IDIwMTdgXG4gKlxuICogQHR5cGUge3tQVUJMSUM6IHN0cmluZywgVEVTVE5FVDogc3RyaW5nLCBGVVRVUkVORVQ6IHN0cmluZywgU1RBTkRBTE9ORTogc3RyaW5nIH19XG4gKi9cbnZhciBOZXR3b3JrcyA9IGV4cG9ydHMuTmV0d29ya3MgPSB7XG4gIFBVQkxJQzogJ1B1YmxpYyBHbG9iYWwgU3RlbGxhciBOZXR3b3JrIDsgU2VwdGVtYmVyIDIwMTUnLFxuICBURVNUTkVUOiAnVGVzdCBTREYgTmV0d29yayA7IFNlcHRlbWJlciAyMDE1JyxcbiAgRlVUVVJFTkVUOiAnVGVzdCBTREYgRnV0dXJlIE5ldHdvcmsgOyBPY3RvYmVyIDIwMjInLFxuICBTQU5EQk9YOiAnTG9jYWwgU2FuZGJveCBTdGVsbGFyIE5ldHdvcmsgOyBTZXB0ZW1iZXIgMjAyMicsXG4gIFNUQU5EQUxPTkU6ICdTdGFuZGFsb25lIE5ldHdvcmsgOyBGZWJydWFyeSAyMDE3J1xufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/network.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/index.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/index.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"Int128\", ({\n  enumerable: true,\n  get: function get() {\n    return _int.Int128;\n  }\n}));\nObject.defineProperty(exports, \"Int256\", ({\n  enumerable: true,\n  get: function get() {\n    return _int2.Int256;\n  }\n}));\nObject.defineProperty(exports, \"ScInt\", ({\n  enumerable: true,\n  get: function get() {\n    return _sc_int.ScInt;\n  }\n}));\nObject.defineProperty(exports, \"Uint128\", ({\n  enumerable: true,\n  get: function get() {\n    return _uint.Uint128;\n  }\n}));\nObject.defineProperty(exports, \"Uint256\", ({\n  enumerable: true,\n  get: function get() {\n    return _uint2.Uint256;\n  }\n}));\nObject.defineProperty(exports, \"XdrLargeInt\", ({\n  enumerable: true,\n  get: function get() {\n    return _xdr_large_int.XdrLargeInt;\n  }\n}));\nexports.scValToBigInt = scValToBigInt;\nvar _xdr_large_int = __webpack_require__(/*! ./xdr_large_int */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js\");\nvar _uint = __webpack_require__(/*! ./uint128 */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint128.js\");\nvar _uint2 = __webpack_require__(/*! ./uint256 */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint256.js\");\nvar _int = __webpack_require__(/*! ./int128 */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int128.js\");\nvar _int2 = __webpack_require__(/*! ./int256 */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int256.js\");\nvar _sc_int = __webpack_require__(/*! ./sc_int */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/sc_int.js\");\n/**\n * Transforms an opaque {@link xdr.ScVal} into a native bigint, if possible.\n *\n * If you then want to use this in the abstractions provided by this module,\n * you can pass it to the constructor of {@link XdrLargeInt}.\n *\n * @example\n * let scv = contract.call(\"add\", x, y); // assume it returns an xdr.ScVal\n * let bigi = scValToBigInt(scv);\n *\n * new ScInt(bigi);               // if you don't care about types, and\n * new XdrLargeInt('i128', bigi); // if you do\n *\n * @param {xdr.ScVal} scv - the raw XDR value to parse into an integer\n * @returns {bigint} the native value of this input value\n *\n * @throws {TypeError} if the `scv` input value doesn't represent an integer\n */\nfunction scValToBigInt(scv) {\n  var scIntType = _xdr_large_int.XdrLargeInt.getType(scv[\"switch\"]().name);\n  switch (scv[\"switch\"]().name) {\n    case 'scvU32':\n    case 'scvI32':\n      return BigInt(scv.value());\n    case 'scvU64':\n    case 'scvI64':\n      return new _xdr_large_int.XdrLargeInt(scIntType, scv.value()).toBigInt();\n    case 'scvU128':\n    case 'scvI128':\n      return new _xdr_large_int.XdrLargeInt(scIntType, [scv.value().lo(), scv.value().hi()]).toBigInt();\n    case 'scvU256':\n    case 'scvI256':\n      return new _xdr_large_int.XdrLargeInt(scIntType, [scv.value().loLo(), scv.value().loHi(), scv.value().hiLo(), scv.value().hiHi()]).toBigInt();\n    default:\n      throw TypeError(\"expected integer type, got \".concat(scv[\"switch\"]()));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDBDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDBDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHlDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDJDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDJDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLCtDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHFCQUFxQjtBQUNyQixxQkFBcUIsbUJBQU8sQ0FBQyxnSkFBaUI7QUFDOUMsWUFBWSxtQkFBTyxDQUFDLG9JQUFXO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxvSUFBVztBQUNoQyxXQUFXLG1CQUFPLENBQUMsa0lBQVU7QUFDN0IsWUFBWSxtQkFBTyxDQUFDLGtJQUFVO0FBQzlCLGNBQWMsbUJBQU8sQ0FBQyxrSUFBVTtBQUNoQztBQUNBLHlCQUF5QixpQkFBaUI7QUFDMUM7QUFDQTtBQUNBLDBDQUEwQyxrQkFBa0I7QUFDNUQ7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQztBQUNBLFdBQVcsV0FBVztBQUN0QixhQUFhLFFBQVE7QUFDckI7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW50MTI4XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnQuSW50MTI4O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkludDI1NlwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50Mi5JbnQyNTY7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2NJbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3NjX2ludC5TY0ludDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVaW50MTI4XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91aW50LlVpbnQxMjg7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVWludDI1NlwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdWludDIuVWludDI1NjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJYZHJMYXJnZUludFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfeGRyX2xhcmdlX2ludC5YZHJMYXJnZUludDtcbiAgfVxufSk7XG5leHBvcnRzLnNjVmFsVG9CaWdJbnQgPSBzY1ZhbFRvQmlnSW50O1xudmFyIF94ZHJfbGFyZ2VfaW50ID0gcmVxdWlyZShcIi4veGRyX2xhcmdlX2ludFwiKTtcbnZhciBfdWludCA9IHJlcXVpcmUoXCIuL3VpbnQxMjhcIik7XG52YXIgX3VpbnQyID0gcmVxdWlyZShcIi4vdWludDI1NlwiKTtcbnZhciBfaW50ID0gcmVxdWlyZShcIi4vaW50MTI4XCIpO1xudmFyIF9pbnQyID0gcmVxdWlyZShcIi4vaW50MjU2XCIpO1xudmFyIF9zY19pbnQgPSByZXF1aXJlKFwiLi9zY19pbnRcIik7XG4vKipcbiAqIFRyYW5zZm9ybXMgYW4gb3BhcXVlIHtAbGluayB4ZHIuU2NWYWx9IGludG8gYSBuYXRpdmUgYmlnaW50LCBpZiBwb3NzaWJsZS5cbiAqXG4gKiBJZiB5b3UgdGhlbiB3YW50IHRvIHVzZSB0aGlzIGluIHRoZSBhYnN0cmFjdGlvbnMgcHJvdmlkZWQgYnkgdGhpcyBtb2R1bGUsXG4gKiB5b3UgY2FuIHBhc3MgaXQgdG8gdGhlIGNvbnN0cnVjdG9yIG9mIHtAbGluayBYZHJMYXJnZUludH0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGxldCBzY3YgPSBjb250cmFjdC5jYWxsKFwiYWRkXCIsIHgsIHkpOyAvLyBhc3N1bWUgaXQgcmV0dXJucyBhbiB4ZHIuU2NWYWxcbiAqIGxldCBiaWdpID0gc2NWYWxUb0JpZ0ludChzY3YpO1xuICpcbiAqIG5ldyBTY0ludChiaWdpKTsgICAgICAgICAgICAgICAvLyBpZiB5b3UgZG9uJ3QgY2FyZSBhYm91dCB0eXBlcywgYW5kXG4gKiBuZXcgWGRyTGFyZ2VJbnQoJ2kxMjgnLCBiaWdpKTsgLy8gaWYgeW91IGRvXG4gKlxuICogQHBhcmFtIHt4ZHIuU2NWYWx9IHNjdiAtIHRoZSByYXcgWERSIHZhbHVlIHRvIHBhcnNlIGludG8gYW4gaW50ZWdlclxuICogQHJldHVybnMge2JpZ2ludH0gdGhlIG5hdGl2ZSB2YWx1ZSBvZiB0aGlzIGlucHV0IHZhbHVlXG4gKlxuICogQHRocm93cyB7VHlwZUVycm9yfSBpZiB0aGUgYHNjdmAgaW5wdXQgdmFsdWUgZG9lc24ndCByZXByZXNlbnQgYW4gaW50ZWdlclxuICovXG5mdW5jdGlvbiBzY1ZhbFRvQmlnSW50KHNjdikge1xuICB2YXIgc2NJbnRUeXBlID0gX3hkcl9sYXJnZV9pbnQuWGRyTGFyZ2VJbnQuZ2V0VHlwZShzY3ZbXCJzd2l0Y2hcIl0oKS5uYW1lKTtcbiAgc3dpdGNoIChzY3ZbXCJzd2l0Y2hcIl0oKS5uYW1lKSB7XG4gICAgY2FzZSAnc2N2VTMyJzpcbiAgICBjYXNlICdzY3ZJMzInOlxuICAgICAgcmV0dXJuIEJpZ0ludChzY3YudmFsdWUoKSk7XG4gICAgY2FzZSAnc2N2VTY0JzpcbiAgICBjYXNlICdzY3ZJNjQnOlxuICAgICAgcmV0dXJuIG5ldyBfeGRyX2xhcmdlX2ludC5YZHJMYXJnZUludChzY0ludFR5cGUsIHNjdi52YWx1ZSgpKS50b0JpZ0ludCgpO1xuICAgIGNhc2UgJ3NjdlUxMjgnOlxuICAgIGNhc2UgJ3NjdkkxMjgnOlxuICAgICAgcmV0dXJuIG5ldyBfeGRyX2xhcmdlX2ludC5YZHJMYXJnZUludChzY0ludFR5cGUsIFtzY3YudmFsdWUoKS5sbygpLCBzY3YudmFsdWUoKS5oaSgpXSkudG9CaWdJbnQoKTtcbiAgICBjYXNlICdzY3ZVMjU2JzpcbiAgICBjYXNlICdzY3ZJMjU2JzpcbiAgICAgIHJldHVybiBuZXcgX3hkcl9sYXJnZV9pbnQuWGRyTGFyZ2VJbnQoc2NJbnRUeXBlLCBbc2N2LnZhbHVlKCkubG9MbygpLCBzY3YudmFsdWUoKS5sb0hpKCksIHNjdi52YWx1ZSgpLmhpTG8oKSwgc2N2LnZhbHVlKCkuaGlIaSgpXSkudG9CaWdJbnQoKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgVHlwZUVycm9yKFwiZXhwZWN0ZWQgaW50ZWdlciB0eXBlLCBnb3QgXCIuY29uY2F0KHNjdltcInN3aXRjaFwiXSgpKSk7XG4gIH1cbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int128.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int128.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Int128 = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Int128 = exports.Int128 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct a signed 128-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Int128() {\n    _classCallCheck(this, Int128);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Int128, [args]);\n  }\n  _inherits(Int128, _LargeInt);\n  return _createClass(Int128, [{\n    key: \"unsigned\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 128;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nInt128.defineIntBoundaries();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL2ludDEyOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjO0FBQ2QsYUFBYSxtQkFBTyxDQUFDLG1IQUFpQjtBQUN0QyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSixhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4QkFBOEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsYUFBYTtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvbnVtYmVycy9pbnQxMjguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkludDEyOCA9IHZvaWQgMDtcbnZhciBfanNYZHIgPSByZXF1aXJlKFwiQHN0ZWxsYXIvanMteGRyXCIpO1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgSW50MTI4ID0gZXhwb3J0cy5JbnQxMjggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9MYXJnZUludCkge1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgc2lnbmVkIDEyOC1iaXQgaW50ZWdlciB0aGF0IGNhbiBiZSBYRFItZW5jb2RlZC5cbiAgICpcbiAgICogQHBhcmFtICB7QXJyYXk8bnVtYmVyfGJpZ2ludHxzdHJpbmc+fSAgYXJncyAtIG9uZSBvciBtb3JlIHNsaWNlcyB0byBlbmNvZGVcbiAgICogICAgIGluIGJpZy1lbmRpYW4gZm9ybWF0IChpLmUuIGVhcmxpZXIgZWxlbWVudHMgYXJlIGhpZ2hlciBiaXRzKVxuICAgKi9cbiAgZnVuY3Rpb24gSW50MTI4KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnQxMjgpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIF9jYWxsU3VwZXIodGhpcywgSW50MTI4LCBbYXJnc10pO1xuICB9XG4gIF9pbmhlcml0cyhJbnQxMjgsIF9MYXJnZUludCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoSW50MTI4LCBbe1xuICAgIGtleTogXCJ1bnNpZ25lZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gMTI4O1xuICAgIH1cbiAgfV0pO1xufShfanNYZHIuTGFyZ2VJbnQpO1xuSW50MTI4LmRlZmluZUludEJvdW5kYXJpZXMoKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int128.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int256.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int256.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Int256 = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Int256 = exports.Int256 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct a signed 256-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Int256() {\n    _classCallCheck(this, Int256);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Int256, [args]);\n  }\n  _inherits(Int256, _LargeInt);\n  return _createClass(Int256, [{\n    key: \"unsigned\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 256;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nInt256.defineIntBoundaries();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL2ludDI1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjO0FBQ2QsYUFBYSxtQkFBTyxDQUFDLG1IQUFpQjtBQUN0QyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSixhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4QkFBOEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsYUFBYTtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvbnVtYmVycy9pbnQyNTYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkludDI1NiA9IHZvaWQgMDtcbnZhciBfanNYZHIgPSByZXF1aXJlKFwiQHN0ZWxsYXIvanMteGRyXCIpO1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgSW50MjU2ID0gZXhwb3J0cy5JbnQyNTYgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9MYXJnZUludCkge1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgc2lnbmVkIDI1Ni1iaXQgaW50ZWdlciB0aGF0IGNhbiBiZSBYRFItZW5jb2RlZC5cbiAgICpcbiAgICogQHBhcmFtICB7QXJyYXk8bnVtYmVyfGJpZ2ludHxzdHJpbmc+fSAgYXJncyAtIG9uZSBvciBtb3JlIHNsaWNlcyB0byBlbmNvZGVcbiAgICogICAgIGluIGJpZy1lbmRpYW4gZm9ybWF0IChpLmUuIGVhcmxpZXIgZWxlbWVudHMgYXJlIGhpZ2hlciBiaXRzKVxuICAgKi9cbiAgZnVuY3Rpb24gSW50MjU2KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnQyNTYpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIF9jYWxsU3VwZXIodGhpcywgSW50MjU2LCBbYXJnc10pO1xuICB9XG4gIF9pbmhlcml0cyhJbnQyNTYsIF9MYXJnZUludCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoSW50MjU2LCBbe1xuICAgIGtleTogXCJ1bnNpZ25lZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gMjU2O1xuICAgIH1cbiAgfV0pO1xufShfanNYZHIuTGFyZ2VJbnQpO1xuSW50MjU2LmRlZmluZUludEJvdW5kYXJpZXMoKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/sc_int.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/sc_int.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ScInt = void 0;\nvar _xdr_large_int = __webpack_require__(/*! ./xdr_large_int */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Provides an easier way to manipulate large numbers for Stellar operations.\n *\n * You can instantiate this \"**s**mart **c**ontract integer\" value either from\n * bigints, strings, or numbers (whole numbers, or this will throw).\n *\n * If you need to create a native BigInt from a list of integer \"parts\" (for\n * example, you have a series of encoded 32-bit integers that represent a larger\n * value), you can use the lower level abstraction {@link XdrLargeInt}. For\n * example, you could do `new XdrLargeInt('u128', bytes...).toBigInt()`.\n *\n * @example\n * import { xdr, ScInt, scValToBigInt } from \"@stellar/stellar-base\";\n *\n * // You have an ScVal from a contract and want to parse it into JS native.\n * const value = xdr.ScVal.fromXDR(someXdr, \"base64\");\n * const bigi = scValToBigInt(value); // grab it as a BigInt\n * let sci = new ScInt(bigi);\n *\n * sci.toNumber(); // gives native JS type (w/ size check)\n * sci.toBigInt(); // gives the native BigInt value\n * sci.toU64();    // gives ScValType-specific XDR constructs (with size checks)\n *\n * // You have a number and want to shove it into a contract.\n * sci = ScInt(0xdeadcafebabe);\n * sci.toBigInt() // returns 244838016400062n\n * sci.toNumber() // throws: too large\n *\n * // Pass any to e.g. a Contract.call(), conversion happens automatically\n * // regardless of the initial type.\n * const scValU128 = sci.toU128();\n * const scValI256 = sci.toI256();\n * const scValU64  = sci.toU64();\n *\n * // Lots of ways to initialize:\n * ScInt(\"123456789123456789\")\n * ScInt(123456789123456789n);\n * ScInt(1n << 140n);\n * ScInt(-42);\n * ScInt(scValToBigInt(scValU128)); // from above\n *\n * // If you know the type ahead of time (accessing `.raw` is faster than\n * // conversions), you can specify the type directly (otherwise, it's\n * // interpreted from the numbers you pass in):\n * const i = ScInt(123456789n, { type: \"u256\" });\n *\n * // For example, you can use the underlying `sdk.U256` and convert it to an\n * // `xdr.ScVal` directly like so:\n * const scv = new xdr.ScVal.scvU256(i.raw);\n *\n * // Or reinterpret it as a different type (size permitting):\n * const scv = i.toI64();\n *\n * @param {number|bigint|string} value - a single, integer-like value which will\n *    be interpreted in the smallest appropriate XDR type supported by Stellar\n *    (64, 128, or 256 bit integer values). signed values are supported, though\n *    they are sanity-checked against `opts.type`. if you need 32-bit values,\n *    you can construct them directly without needing this wrapper, e.g.\n *    `xdr.ScVal.scvU32(1234)`.\n *\n * @param {object}  [opts] - an optional object controlling optional parameters\n * @param {string}  [opts.type] - force a specific data type. the type choices\n *    are: 'i64', 'u64', 'i128', 'u128', 'i256', and 'u256' (default: the\n *    smallest one that fits the `value`)\n *\n * @throws {RangeError} if the `value` is invalid (e.g. floating point), too\n *    large (i.e. exceeds a 256-bit value), or doesn't fit in the `opts.type`\n * @throws {TypeError} on missing parameters, or if the \"signedness\" of `opts`\n *    doesn't match input `value`, e.g. passing `{type: 'u64'}` yet passing -1n\n * @throws {SyntaxError} if a string `value` can't be parsed as a big integer\n */\nvar ScInt = exports.ScInt = /*#__PURE__*/function (_XdrLargeInt) {\n  function ScInt(value, opts) {\n    var _opts$type;\n    _classCallCheck(this, ScInt);\n    var signed = value < 0;\n    var type = (_opts$type = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type !== void 0 ? _opts$type : '';\n    if (type.startsWith('u') && signed) {\n      throw TypeError(\"specified type \".concat(opts.type, \" yet negative (\").concat(value, \")\"));\n    }\n\n    // If unspecified, we make a best guess at the type based on the bit length\n    // of the value, treating 64 as a minimum and 256 as a maximum.\n    if (type === '') {\n      type = signed ? 'i' : 'u';\n      var bitlen = nearestBigIntSize(value);\n      switch (bitlen) {\n        case 64:\n        case 128:\n        case 256:\n          type += bitlen.toString();\n          break;\n        default:\n          throw RangeError(\"expected 64/128/256 bits for input (\".concat(value, \"), got \").concat(bitlen));\n      }\n    }\n    return _callSuper(this, ScInt, [type, value]);\n  }\n  _inherits(ScInt, _XdrLargeInt);\n  return _createClass(ScInt);\n}(_xdr_large_int.XdrLargeInt);\nfunction nearestBigIntSize(bigI) {\n  var _find;\n  // Note: Even though BigInt.toString(2) includes the negative sign for\n  // negative values (???), the following is still accurate, because the\n  // negative sign would be represented by a sign bit.\n  var bitlen = bigI.toString(2).length;\n  return (_find = [64, 128, 256].find(function (len) {\n    return bitlen <= len;\n  })) !== null && _find !== void 0 ? _find : bitlen;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/sc_int.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint128.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint128.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Uint128 = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Uint128 = exports.Uint128 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct an unsigned 128-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Uint128() {\n    _classCallCheck(this, Uint128);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Uint128, [args]);\n  }\n  _inherits(Uint128, _LargeInt);\n  return _createClass(Uint128, [{\n    key: \"unsigned\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 128;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nUint128.defineIntBoundaries();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL3VpbnQxMjguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmLGFBQWEsbUJBQU8sQ0FBQyxtSEFBaUI7QUFDdEMsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLCtCQUErQjtBQUMvQiw0Q0FBNEMsdUVBQXVFLG1HQUFtRztBQUN0TixxQ0FBcUMseUdBQXlHO0FBQzlJLHVDQUF1QyxNQUFNLHFGQUFxRixNQUFNLGFBQWEsMkVBQTJFLGFBQWE7QUFDN08sOEJBQThCLCtGQUErRixpREFBaUQ7QUFDOUssMkJBQTJCLHFIQUFxSCxnREFBZ0QsZUFBZSw0Q0FBNEMsMkNBQTJDLGNBQWM7QUFDcFQsaUNBQWlDLGtHQUFrRyw0QkFBNEI7QUFDL0osY0FBYyxlQUFlO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEJBQThCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLGFBQWE7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL251bWJlcnMvdWludDEyOC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVWludDEyOCA9IHZvaWQgMDtcbnZhciBfanNYZHIgPSByZXF1aXJlKFwiQHN0ZWxsYXIvanMteGRyXCIpO1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgVWludDEyOCA9IGV4cG9ydHMuVWludDEyOCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xhcmdlSW50KSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYW4gdW5zaWduZWQgMTI4LWJpdCBpbnRlZ2VyIHRoYXQgY2FuIGJlIFhEUi1lbmNvZGVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtBcnJheTxudW1iZXJ8YmlnaW50fHN0cmluZz59ICBhcmdzIC0gb25lIG9yIG1vcmUgc2xpY2VzIHRvIGVuY29kZVxuICAgKiAgICAgaW4gYmlnLWVuZGlhbiBmb3JtYXQgKGkuZS4gZWFybGllciBlbGVtZW50cyBhcmUgaGlnaGVyIGJpdHMpXG4gICAqL1xuICBmdW5jdGlvbiBVaW50MTI4KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVaW50MTI4KTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIFVpbnQxMjgsIFthcmdzXSk7XG4gIH1cbiAgX2luaGVyaXRzKFVpbnQxMjgsIF9MYXJnZUludCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoVWludDEyOCwgW3tcbiAgICBrZXk6IFwidW5zaWduZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gMTI4O1xuICAgIH1cbiAgfV0pO1xufShfanNYZHIuTGFyZ2VJbnQpO1xuVWludDEyOC5kZWZpbmVJbnRCb3VuZGFyaWVzKCk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint128.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint256.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint256.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Uint256 = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Uint256 = exports.Uint256 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct an unsigned 256-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Uint256() {\n    _classCallCheck(this, Uint256);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Uint256, [args]);\n  }\n  _inherits(Uint256, _LargeInt);\n  return _createClass(Uint256, [{\n    key: \"unsigned\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 256;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nUint256.defineIntBoundaries();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL3VpbnQyNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmLGFBQWEsbUJBQU8sQ0FBQyxtSEFBaUI7QUFDdEMsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLCtCQUErQjtBQUMvQiw0Q0FBNEMsdUVBQXVFLG1HQUFtRztBQUN0TixxQ0FBcUMseUdBQXlHO0FBQzlJLHVDQUF1QyxNQUFNLHFGQUFxRixNQUFNLGFBQWEsMkVBQTJFLGFBQWE7QUFDN08sOEJBQThCLCtGQUErRixpREFBaUQ7QUFDOUssMkJBQTJCLHFIQUFxSCxnREFBZ0QsZUFBZSw0Q0FBNEMsMkNBQTJDLGNBQWM7QUFDcFQsaUNBQWlDLGtHQUFrRyw0QkFBNEI7QUFDL0osY0FBYyxlQUFlO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEJBQThCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLGFBQWE7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL251bWJlcnMvdWludDI1Ni5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVWludDI1NiA9IHZvaWQgMDtcbnZhciBfanNYZHIgPSByZXF1aXJlKFwiQHN0ZWxsYXIvanMteGRyXCIpO1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgVWludDI1NiA9IGV4cG9ydHMuVWludDI1NiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xhcmdlSW50KSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYW4gdW5zaWduZWQgMjU2LWJpdCBpbnRlZ2VyIHRoYXQgY2FuIGJlIFhEUi1lbmNvZGVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtBcnJheTxudW1iZXJ8YmlnaW50fHN0cmluZz59ICBhcmdzIC0gb25lIG9yIG1vcmUgc2xpY2VzIHRvIGVuY29kZVxuICAgKiAgICAgaW4gYmlnLWVuZGlhbiBmb3JtYXQgKGkuZS4gZWFybGllciBlbGVtZW50cyBhcmUgaGlnaGVyIGJpdHMpXG4gICAqL1xuICBmdW5jdGlvbiBVaW50MjU2KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVaW50MjU2KTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIFVpbnQyNTYsIFthcmdzXSk7XG4gIH1cbiAgX2luaGVyaXRzKFVpbnQyNTYsIF9MYXJnZUludCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoVWludDI1NiwgW3tcbiAgICBrZXk6IFwidW5zaWduZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gMjU2O1xuICAgIH1cbiAgfV0pO1xufShfanNYZHIuTGFyZ2VJbnQpO1xuVWludDI1Ni5kZWZpbmVJbnRCb3VuZGFyaWVzKCk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.XdrLargeInt = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar _uint = __webpack_require__(/*! ./uint128 */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint128.js\");\nvar _uint2 = __webpack_require__(/*! ./uint256 */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/uint256.js\");\nvar _int = __webpack_require__(/*! ./int128 */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int128.js\");\nvar _int2 = __webpack_require__(/*! ./int256 */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/int256.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint no-bitwise: [\"error\", {\"allow\": [\">>\"]}] */\n/**\n * A wrapper class to represent large XDR-encodable integers.\n *\n * This operates at a lower level than {@link ScInt} by forcing you to specify\n * the type / width / size in bits of the integer you're targeting, regardless\n * of the input value(s) you provide.\n *\n * @param {string}  type - force a specific data type. the type choices are:\n *    'i64', 'u64', 'i128', 'u128', 'i256', and 'u256' (default: the smallest\n *    one that fits the `value`) (see {@link XdrLargeInt.isType})\n * @param {number|bigint|string|Array<number|bigint|string>} values   a list of\n *    integer-like values interpreted in big-endian order\n */\nvar XdrLargeInt = exports.XdrLargeInt = /*#__PURE__*/function () {\n  function XdrLargeInt(type, values) {\n    _classCallCheck(this, XdrLargeInt);\n    /** @type {xdr.LargeInt} */\n    _defineProperty(this, \"int\", void 0);\n    // child class of a jsXdr.LargeInt\n    /** @type {string} */\n    _defineProperty(this, \"type\", void 0);\n    if (!(values instanceof Array)) {\n      values = [values];\n    }\n\n    // normalize values to one type\n    values = values.map(function (i) {\n      // micro-optimization to no-op on the likeliest input value:\n      if (typeof i === 'bigint') {\n        return i;\n      }\n      if (i instanceof XdrLargeInt) {\n        return i.toBigInt();\n      }\n      return BigInt(i);\n    });\n    switch (type) {\n      case 'i64':\n        this[\"int\"] = new _jsXdr.Hyper(values);\n        break;\n      case 'i128':\n        this[\"int\"] = new _int.Int128(values);\n        break;\n      case 'i256':\n        this[\"int\"] = new _int2.Int256(values);\n        break;\n      case 'u64':\n        this[\"int\"] = new _jsXdr.UnsignedHyper(values);\n        break;\n      case 'u128':\n        this[\"int\"] = new _uint.Uint128(values);\n        break;\n      case 'u256':\n        this[\"int\"] = new _uint2.Uint256(values);\n        break;\n      default:\n        throw TypeError(\"invalid type: \".concat(type));\n    }\n    this.type = type;\n  }\n\n  /**\n   * @returns {number}\n   * @throws {RangeError} if the value can't fit into a Number\n   */\n  return _createClass(XdrLargeInt, [{\n    key: \"toNumber\",\n    value: function toNumber() {\n      var bi = this[\"int\"].toBigInt();\n      if (bi > Number.MAX_SAFE_INTEGER || bi < Number.MIN_SAFE_INTEGER) {\n        throw RangeError(\"value \".concat(bi, \" not in range for Number \") + \"[\".concat(Number.MAX_SAFE_INTEGER, \", \").concat(Number.MIN_SAFE_INTEGER, \"]\"));\n      }\n      return Number(bi);\n    }\n\n    /** @returns {bigint} */\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      return this[\"int\"].toBigInt();\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = I64` */\n  }, {\n    key: \"toI64\",\n    value: function toI64() {\n      this._sizeCheck(64);\n      var v = this.toBigInt();\n      if (BigInt.asIntN(64, v) !== v) {\n        throw RangeError(\"value too large for i64: \".concat(v));\n      }\n      return _xdr[\"default\"].ScVal.scvI64(new _xdr[\"default\"].Int64(v));\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = U64` */\n  }, {\n    key: \"toU64\",\n    value: function toU64() {\n      this._sizeCheck(64);\n      return _xdr[\"default\"].ScVal.scvU64(new _xdr[\"default\"].Uint64(BigInt.asUintN(64, this.toBigInt())) // reiterpret as unsigned\n      );\n    }\n\n    /**\n     * @returns {xdr.ScVal} the integer encoded with `ScValType = I128`\n     * @throws {RangeError} if the value cannot fit in 128 bits\n     */\n  }, {\n    key: \"toI128\",\n    value: function toI128() {\n      this._sizeCheck(128);\n      var v = this[\"int\"].toBigInt();\n      var hi64 = BigInt.asIntN(64, v >> 64n); // encode top 64 w/ sign bit\n      var lo64 = BigInt.asUintN(64, v); // grab btm 64, encode sign\n\n      return _xdr[\"default\"].ScVal.scvI128(new _xdr[\"default\"].Int128Parts({\n        hi: new _xdr[\"default\"].Int64(hi64),\n        lo: new _xdr[\"default\"].Uint64(lo64)\n      }));\n    }\n\n    /**\n     * @returns {xdr.ScVal} the integer encoded with `ScValType = U128`\n     * @throws {RangeError} if the value cannot fit in 128 bits\n     */\n  }, {\n    key: \"toU128\",\n    value: function toU128() {\n      this._sizeCheck(128);\n      var v = this[\"int\"].toBigInt();\n      return _xdr[\"default\"].ScVal.scvU128(new _xdr[\"default\"].UInt128Parts({\n        hi: new _xdr[\"default\"].Uint64(BigInt.asUintN(64, v >> 64n)),\n        lo: new _xdr[\"default\"].Uint64(BigInt.asUintN(64, v))\n      }));\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = I256` */\n  }, {\n    key: \"toI256\",\n    value: function toI256() {\n      var v = this[\"int\"].toBigInt();\n      var hiHi64 = BigInt.asIntN(64, v >> 192n); // keep sign bit\n      var hiLo64 = BigInt.asUintN(64, v >> 128n);\n      var loHi64 = BigInt.asUintN(64, v >> 64n);\n      var loLo64 = BigInt.asUintN(64, v);\n      return _xdr[\"default\"].ScVal.scvI256(new _xdr[\"default\"].Int256Parts({\n        hiHi: new _xdr[\"default\"].Int64(hiHi64),\n        hiLo: new _xdr[\"default\"].Uint64(hiLo64),\n        loHi: new _xdr[\"default\"].Uint64(loHi64),\n        loLo: new _xdr[\"default\"].Uint64(loLo64)\n      }));\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = U256` */\n  }, {\n    key: \"toU256\",\n    value: function toU256() {\n      var v = this[\"int\"].toBigInt();\n      var hiHi64 = BigInt.asUintN(64, v >> 192n); // encode sign bit\n      var hiLo64 = BigInt.asUintN(64, v >> 128n);\n      var loHi64 = BigInt.asUintN(64, v >> 64n);\n      var loLo64 = BigInt.asUintN(64, v);\n      return _xdr[\"default\"].ScVal.scvU256(new _xdr[\"default\"].UInt256Parts({\n        hiHi: new _xdr[\"default\"].Uint64(hiHi64),\n        hiLo: new _xdr[\"default\"].Uint64(hiLo64),\n        loHi: new _xdr[\"default\"].Uint64(loHi64),\n        loLo: new _xdr[\"default\"].Uint64(loLo64)\n      }));\n    }\n\n    /** @returns {xdr.ScVal} the smallest interpretation of the stored value */\n  }, {\n    key: \"toScVal\",\n    value: function toScVal() {\n      switch (this.type) {\n        case 'i64':\n          return this.toI64();\n        case 'i128':\n          return this.toI128();\n        case 'i256':\n          return this.toI256();\n        case 'u64':\n          return this.toU64();\n        case 'u128':\n          return this.toU128();\n        case 'u256':\n          return this.toU256();\n        default:\n          throw TypeError(\"invalid type: \".concat(this.type));\n      }\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this[\"int\"].valueOf();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this[\"int\"].toString();\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        value: this.toBigInt().toString(),\n        type: this.type\n      };\n    }\n  }, {\n    key: \"_sizeCheck\",\n    value: function _sizeCheck(bits) {\n      if (this[\"int\"].size > bits) {\n        throw RangeError(\"value too large for \".concat(bits, \" bits (\").concat(this.type, \")\"));\n      }\n    }\n  }], [{\n    key: \"isType\",\n    value: function isType(type) {\n      switch (type) {\n        case 'i64':\n        case 'i128':\n        case 'i256':\n        case 'u64':\n        case 'u128':\n        case 'u256':\n          return true;\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Convert the raw `ScValType` string (e.g. 'scvI128', generated by the XDR)\n     * to a type description for {@link XdrLargeInt} construction (e.g. 'i128')\n     *\n     * @param {string} scvType  the `xdr.ScValType` as a string\n     * @returns {string} a suitable equivalent type to construct this object\n     */\n  }, {\n    key: \"getType\",\n    value: function getType(scvType) {\n      return scvType.slice(3).toLowerCase();\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operation.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operation.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Operation = exports.AuthRevocableFlag = exports.AuthRequiredFlag = exports.AuthImmutableFlag = exports.AuthClawbackEnabledFlag = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./util/bignumber */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _util = __webpack_require__(/*! ./util/util */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/util.js\");\nvar _continued_fraction = __webpack_require__(/*! ./util/continued_fraction */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/continued_fraction.js\");\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _liquidity_pool_asset = __webpack_require__(/*! ./liquidity_pool_asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js\");\nvar _claimant = __webpack_require__(/*! ./claimant */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/claimant.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _liquidity_pool_id = __webpack_require__(/*! ./liquidity_pool_id */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar ops = _interopRequireWildcard(__webpack_require__(/*! ./operations */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/index.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { \"default\": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n[\"default\"] = e, t && t.set(e, n), n; }\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint-disable no-bitwise */\nvar ONE = 10000000;\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * When set using `{@link Operation.setOptions}` option, requires the issuing\n * account to give other accounts permission before they can hold the issuing\n * account’s credit.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRequiredFlag = exports.AuthRequiredFlag = 1 << 0;\n/**\n * When set using `{@link Operation.setOptions}` option, allows the issuing\n * account to revoke its credit held by other accounts.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRevocableFlag = exports.AuthRevocableFlag = 1 << 1;\n/**\n * When set using `{@link Operation.setOptions}` option, then none of the\n * authorization flags can be set and the account can never be deleted.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthImmutableFlag = exports.AuthImmutableFlag = 1 << 2;\n\n/**\n * When set using `{@link Operation.setOptions}` option, then any trustlines\n * created by this account can have a ClawbackOp operation submitted for the\n * corresponding asset.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthClawbackEnabledFlag = exports.AuthClawbackEnabledFlag = 1 << 3;\n\n/**\n * `Operation` class represents\n * [operations](https://developers.stellar.org/docs/glossary/operations/) in\n * Stellar network.\n *\n * Use one of static methods to create operations:\n * * `{@link Operation.createAccount}`\n * * `{@link Operation.payment}`\n * * `{@link Operation.pathPaymentStrictReceive}`\n * * `{@link Operation.pathPaymentStrictSend}`\n * * `{@link Operation.manageSellOffer}`\n * * `{@link Operation.manageBuyOffer}`\n * * `{@link Operation.createPassiveSellOffer}`\n * * `{@link Operation.setOptions}`\n * * `{@link Operation.changeTrust}`\n * * `{@link Operation.allowTrust}`\n * * `{@link Operation.accountMerge}`\n * * `{@link Operation.inflation}`\n * * `{@link Operation.manageData}`\n * * `{@link Operation.bumpSequence}`\n * * `{@link Operation.createClaimableBalance}`\n * * `{@link Operation.claimClaimableBalance}`\n * * `{@link Operation.beginSponsoringFutureReserves}`\n * * `{@link Operation.endSponsoringFutureReserves}`\n * * `{@link Operation.revokeAccountSponsorship}`\n * * `{@link Operation.revokeTrustlineSponsorship}`\n * * `{@link Operation.revokeOfferSponsorship}`\n * * `{@link Operation.revokeDataSponsorship}`\n * * `{@link Operation.revokeClaimableBalanceSponsorship}`\n * * `{@link Operation.revokeLiquidityPoolSponsorship}`\n * * `{@link Operation.revokeSignerSponsorship}`\n * * `{@link Operation.clawback}`\n * * `{@link Operation.clawbackClaimableBalance}`\n * * `{@link Operation.setTrustLineFlags}`\n * * `{@link Operation.liquidityPoolDeposit}`\n * * `{@link Operation.liquidityPoolWithdraw}`\n * * `{@link Operation.invokeHostFunction}`, which has the following additional\n *   \"pseudo-operations\" that make building host functions easier:\n *   - `{@link Operation.createStellarAssetContract}`\n *   - `{@link Operation.invokeContractFunction}`\n *   - `{@link Operation.createCustomContract}`\n *   - `{@link Operation.uploadContractWasm}`\n * * `{@link Operation.extendFootprintTtlOp}`\n * * `{@link Operation.restoreFootprint}`\n *\n * @class Operation\n */\nvar Operation = exports.Operation = /*#__PURE__*/function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n  }\n  return _createClass(Operation, null, [{\n    key: \"setSourceAccount\",\n    value: function setSourceAccount(opAttributes, opts) {\n      if (opts.source) {\n        try {\n          opAttributes.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.source);\n        } catch (e) {\n          throw new Error('Source address is invalid');\n        }\n      }\n    }\n\n    /**\n     * Deconstructs the raw XDR operation object into the structured object that\n     * was used to create the operation (i.e. the `opts` parameter to most ops).\n     *\n     * @param {xdr.Operation}   operation - An XDR Operation.\n     * @return {Operation}\n     */\n  }, {\n    key: \"fromXDRObject\",\n    value: function fromXDRObject(operation) {\n      var result = {};\n      if (operation.sourceAccount()) {\n        result.source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(operation.sourceAccount());\n      }\n      var attrs = operation.body().value();\n      var operationName = operation.body()[\"switch\"]().name;\n      switch (operationName) {\n        case 'createAccount':\n          {\n            result.type = 'createAccount';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());\n            break;\n          }\n        case 'payment':\n          {\n            result.type = 'payment';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            break;\n          }\n        case 'pathPaymentStrictReceive':\n          {\n            result.type = 'pathPaymentStrictReceive';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendMax = this._fromXDRAmount(attrs.sendMax());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destAmount = this._fromXDRAmount(attrs.destAmount());\n            result.path = [];\n            var path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(path[pathKey]));\n            });\n            break;\n          }\n        case 'pathPaymentStrictSend':\n          {\n            result.type = 'pathPaymentStrictSend';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendAmount = this._fromXDRAmount(attrs.sendAmount());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destMin = this._fromXDRAmount(attrs.destMin());\n            result.path = [];\n            var _path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(_path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(_path[pathKey]));\n            });\n            break;\n          }\n        case 'changeTrust':\n          {\n            result.type = 'changeTrust';\n            switch (attrs.line()[\"switch\"]()) {\n              case _xdr[\"default\"].AssetType.assetTypePoolShare():\n                result.line = _liquidity_pool_asset.LiquidityPoolAsset.fromOperation(attrs.line());\n                break;\n              default:\n                result.line = _asset.Asset.fromOperation(attrs.line());\n                break;\n            }\n            result.limit = this._fromXDRAmount(attrs.limit());\n            break;\n          }\n        case 'allowTrust':\n          {\n            result.type = 'allowTrust';\n            result.trustor = accountIdtoAddress(attrs.trustor());\n            result.assetCode = attrs.asset().value().toString();\n            result.assetCode = (0, _util.trimEnd)(result.assetCode, '\\0');\n            result.authorize = attrs.authorize();\n            break;\n          }\n        case 'setOptions':\n          {\n            result.type = 'setOptions';\n            if (attrs.inflationDest()) {\n              result.inflationDest = accountIdtoAddress(attrs.inflationDest());\n            }\n            result.clearFlags = attrs.clearFlags();\n            result.setFlags = attrs.setFlags();\n            result.masterWeight = attrs.masterWeight();\n            result.lowThreshold = attrs.lowThreshold();\n            result.medThreshold = attrs.medThreshold();\n            result.highThreshold = attrs.highThreshold();\n            // home_domain is checked by iscntrl in stellar-core\n            result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString('ascii') : undefined;\n            if (attrs.signer()) {\n              var signer = {};\n              var arm = attrs.signer().key().arm();\n              if (arm === 'ed25519') {\n                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());\n              } else if (arm === 'preAuthTx') {\n                signer.preAuthTx = attrs.signer().key().preAuthTx();\n              } else if (arm === 'hashX') {\n                signer.sha256Hash = attrs.signer().key().hashX();\n              } else if (arm === 'ed25519SignedPayload') {\n                var signedPayload = attrs.signer().key().ed25519SignedPayload();\n                signer.ed25519SignedPayload = _strkey.StrKey.encodeSignedPayload(signedPayload.toXDR());\n              }\n              signer.weight = attrs.signer().weight();\n              result.signer = signer;\n            }\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'manageOffer':\n        case 'manageSellOffer':\n          {\n            result.type = 'manageSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        case 'manageBuyOffer':\n          {\n            result.type = 'manageBuyOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'createPassiveOffer':\n        case 'createPassiveSellOffer':\n          {\n            result.type = 'createPassiveSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            break;\n          }\n        case 'accountMerge':\n          {\n            result.type = 'accountMerge';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs);\n            break;\n          }\n        case 'manageData':\n          {\n            result.type = 'manageData';\n            // manage_data.name is checked by iscntrl in stellar-core\n            result.name = attrs.dataName().toString('ascii');\n            result.value = attrs.dataValue();\n            break;\n          }\n        case 'inflation':\n          {\n            result.type = 'inflation';\n            break;\n          }\n        case 'bumpSequence':\n          {\n            result.type = 'bumpSequence';\n            result.bumpTo = attrs.bumpTo().toString();\n            break;\n          }\n        case 'createClaimableBalance':\n          {\n            result.type = 'createClaimableBalance';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.claimants = [];\n            attrs.claimants().forEach(function (claimant) {\n              result.claimants.push(_claimant.Claimant.fromXDR(claimant));\n            });\n            break;\n          }\n        case 'claimClaimableBalance':\n          {\n            result.type = 'claimClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'beginSponsoringFutureReserves':\n          {\n            result.type = 'beginSponsoringFutureReserves';\n            result.sponsoredId = accountIdtoAddress(attrs.sponsoredId());\n            break;\n          }\n        case 'endSponsoringFutureReserves':\n          {\n            result.type = 'endSponsoringFutureReserves';\n            break;\n          }\n        case 'revokeSponsorship':\n          {\n            extractRevokeSponshipDetails(attrs, result);\n            break;\n          }\n        case 'clawback':\n          {\n            result.type = 'clawback';\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.from = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.from());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            break;\n          }\n        case 'clawbackClaimableBalance':\n          {\n            result.type = 'clawbackClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'setTrustLineFlags':\n          {\n            result.type = 'setTrustLineFlags';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.trustor = accountIdtoAddress(attrs.trustor());\n\n            // Convert from the integer-bitwised flag into a sensible object that\n            // indicates true/false for each flag that's on/off.\n            var clears = attrs.clearFlags();\n            var sets = attrs.setFlags();\n            var mapping = {\n              authorized: _xdr[\"default\"].TrustLineFlags.authorizedFlag(),\n              authorizedToMaintainLiabilities: _xdr[\"default\"].TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n              clawbackEnabled: _xdr[\"default\"].TrustLineFlags.trustlineClawbackEnabledFlag()\n            };\n            var getFlagValue = function getFlagValue(key) {\n              var bit = mapping[key].value;\n              if (sets & bit) {\n                return true;\n              }\n              if (clears & bit) {\n                return false;\n              }\n              return undefined;\n            };\n            result.flags = {};\n            Object.keys(mapping).forEach(function (flagName) {\n              result.flags[flagName] = getFlagValue(flagName);\n            });\n            break;\n          }\n        case 'liquidityPoolDeposit':\n          {\n            result.type = 'liquidityPoolDeposit';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.maxAmountA = this._fromXDRAmount(attrs.maxAmountA());\n            result.maxAmountB = this._fromXDRAmount(attrs.maxAmountB());\n            result.minPrice = this._fromXDRPrice(attrs.minPrice());\n            result.maxPrice = this._fromXDRPrice(attrs.maxPrice());\n            break;\n          }\n        case 'liquidityPoolWithdraw':\n          {\n            result.type = 'liquidityPoolWithdraw';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.minAmountA = this._fromXDRAmount(attrs.minAmountA());\n            result.minAmountB = this._fromXDRAmount(attrs.minAmountB());\n            break;\n          }\n        case 'invokeHostFunction':\n          {\n            var _attrs$auth;\n            result.type = 'invokeHostFunction';\n            result.func = attrs.hostFunction();\n            result.auth = (_attrs$auth = attrs.auth()) !== null && _attrs$auth !== void 0 ? _attrs$auth : [];\n            break;\n          }\n        case 'extendFootprintTtl':\n          {\n            result.type = 'extendFootprintTtl';\n            result.extendTo = attrs.extendTo();\n            break;\n          }\n        case 'restoreFootprint':\n          {\n            result.type = 'restoreFootprint';\n            break;\n          }\n        default:\n          {\n            throw new Error(\"Unknown operation: \".concat(operationName));\n          }\n      }\n      return result;\n    }\n\n    /**\n     * Validates that a given amount is possible for a Stellar asset.\n     *\n     * Specifically, this means that the amount is well, a valid number, but also\n     * that it is within the int64 range and has no more than 7 decimal levels of\n     * precision.\n     *\n     * Note that while smart contracts allow larger amounts, this is oriented\n     * towards validating the standard Stellar operations.\n     *\n     * @param {string}  value       the amount to validate\n     * @param {boolean} allowZero   optionally, whether or not zero is valid (default: no)\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidAmount\",\n    value: function isValidAmount(value) {\n      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (typeof value !== 'string') {\n        return false;\n      }\n      var amount;\n      try {\n        amount = new _bignumber[\"default\"](value);\n      } catch (e) {\n        return false;\n      }\n      if (\n      // == 0\n      !allowZero && amount.isZero() ||\n      // < 0\n      amount.isNegative() ||\n      // > Max value\n      amount.times(ONE).gt(new _bignumber[\"default\"](MAX_INT64).toString()) ||\n      // Decimal places (max 7)\n      amount.decimalPlaces() > 7 ||\n      // NaN or Infinity\n      amount.isNaN() || !amount.isFinite()) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"constructAmountRequirementsError\",\n    value: function constructAmountRequirementsError(arg) {\n      return \"\".concat(arg, \" argument must be of type String, represent a positive number and have at most 7 digits after the decimal\");\n    }\n\n    /**\n     * Returns value converted to uint32 value or undefined.\n     * If `value` is not `Number`, `String` or `Undefined` then throws an error.\n     * Used in {@link Operation.setOptions}.\n     * @private\n     * @param {string} name Name of the property (used in error message only)\n     * @param {*} value Value to check\n     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)\n     * @returns {undefined|Number}\n     */\n  }, {\n    key: \"_checkUnsignedIntValue\",\n    value: function _checkUnsignedIntValue(name, value) {\n      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (typeof value === 'undefined') {\n        return undefined;\n      }\n      if (typeof value === 'string') {\n        value = parseFloat(value);\n      }\n      switch (true) {\n        case typeof value !== 'number' || !Number.isFinite(value) || value % 1 !== 0:\n          throw new Error(\"\".concat(name, \" value is invalid\"));\n        case value < 0:\n          throw new Error(\"\".concat(name, \" value must be unsigned\"));\n        case !isValidFunction || isValidFunction && isValidFunction(value, name):\n          return value;\n        default:\n          throw new Error(\"\".concat(name, \" value is invalid\"));\n      }\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value Value\n     * @returns {Hyper} XDR amount\n     */\n  }, {\n    key: \"_toXDRAmount\",\n    value: function _toXDRAmount(value) {\n      var amount = new _bignumber[\"default\"](value).times(ONE);\n      return _jsXdr.Hyper.fromString(amount.toString());\n    }\n\n    /**\n     * @private\n     * @param {string|BigNumber} value XDR amount\n     * @returns {BigNumber} Number\n     */\n  }, {\n    key: \"_fromXDRAmount\",\n    value: function _fromXDRAmount(value) {\n      return new _bignumber[\"default\"](value).div(ONE).toFixed(7);\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {BigNumber} Big string\n     */\n  }, {\n    key: \"_fromXDRPrice\",\n    value: function _fromXDRPrice(price) {\n      var n = new _bignumber[\"default\"](price.n());\n      return n.div(new _bignumber[\"default\"](price.d())).toString();\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {object} XDR price object\n     */\n  }, {\n    key: \"_toXDRPrice\",\n    value: function _toXDRPrice(price) {\n      var xdrObject;\n      if (price.n && price.d) {\n        xdrObject = new _xdr[\"default\"].Price(price);\n      } else {\n        var approx = (0, _continued_fraction.best_r)(price);\n        xdrObject = new _xdr[\"default\"].Price({\n          n: parseInt(approx[0], 10),\n          d: parseInt(approx[1], 10)\n        });\n      }\n      if (xdrObject.n() < 0 || xdrObject.d() < 0) {\n        throw new Error('price must be positive');\n      }\n      return xdrObject;\n    }\n  }]);\n}();\nfunction extractRevokeSponshipDetails(attrs, result) {\n  switch (attrs[\"switch\"]().name) {\n    case 'revokeSponsorshipLedgerEntry':\n      {\n        var ledgerKey = attrs.ledgerKey();\n        switch (ledgerKey[\"switch\"]().name) {\n          case _xdr[\"default\"].LedgerEntryType.account().name:\n            {\n              result.type = 'revokeAccountSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.account().accountId());\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.trustline().name:\n            {\n              result.type = 'revokeTrustlineSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.trustLine().accountId());\n              var xdrAsset = ledgerKey.trustLine().asset();\n              switch (xdrAsset[\"switch\"]()) {\n                case _xdr[\"default\"].AssetType.assetTypePoolShare():\n                  result.asset = _liquidity_pool_id.LiquidityPoolId.fromOperation(xdrAsset);\n                  break;\n                default:\n                  result.asset = _asset.Asset.fromOperation(xdrAsset);\n                  break;\n              }\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.offer().name:\n            {\n              result.type = 'revokeOfferSponsorship';\n              result.seller = accountIdtoAddress(ledgerKey.offer().sellerId());\n              result.offerId = ledgerKey.offer().offerId().toString();\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.data().name:\n            {\n              result.type = 'revokeDataSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.data().accountId());\n              result.name = ledgerKey.data().dataName().toString('ascii');\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.claimableBalance().name:\n            {\n              result.type = 'revokeClaimableBalanceSponsorship';\n              result.balanceId = ledgerKey.claimableBalance().balanceId().toXDR('hex');\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.liquidityPool().name:\n            {\n              result.type = 'revokeLiquidityPoolSponsorship';\n              result.liquidityPoolId = ledgerKey.liquidityPool().liquidityPoolId().toString('hex');\n              break;\n            }\n          default:\n            {\n              throw new Error(\"Unknown ledgerKey: \".concat(attrs[\"switch\"]().name));\n            }\n        }\n        break;\n      }\n    case 'revokeSponsorshipSigner':\n      {\n        result.type = 'revokeSignerSponsorship';\n        result.account = accountIdtoAddress(attrs.signer().accountId());\n        result.signer = convertXDRSignerKeyToObject(attrs.signer().signerKey());\n        break;\n      }\n    default:\n      {\n        throw new Error(\"Unknown revokeSponsorship: \".concat(attrs[\"switch\"]().name));\n      }\n  }\n}\nfunction convertXDRSignerKeyToObject(signerKey) {\n  var attrs = {};\n  switch (signerKey[\"switch\"]().name) {\n    case _xdr[\"default\"].SignerKeyType.signerKeyTypeEd25519().name:\n      {\n        attrs.ed25519PublicKey = _strkey.StrKey.encodeEd25519PublicKey(signerKey.ed25519());\n        break;\n      }\n    case _xdr[\"default\"].SignerKeyType.signerKeyTypePreAuthTx().name:\n      {\n        attrs.preAuthTx = signerKey.preAuthTx().toString('hex');\n        break;\n      }\n    case _xdr[\"default\"].SignerKeyType.signerKeyTypeHashX().name:\n      {\n        attrs.sha256Hash = signerKey.hashX().toString('hex');\n        break;\n      }\n    default:\n      {\n        throw new Error(\"Unknown signerKey: \".concat(signerKey[\"switch\"]().name));\n      }\n  }\n  return attrs;\n}\nfunction accountIdtoAddress(accountId) {\n  return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());\n}\n\n// Attach all imported operations as static methods on the Operation class\nOperation.accountMerge = ops.accountMerge;\nOperation.allowTrust = ops.allowTrust;\nOperation.bumpSequence = ops.bumpSequence;\nOperation.changeTrust = ops.changeTrust;\nOperation.createAccount = ops.createAccount;\nOperation.createClaimableBalance = ops.createClaimableBalance;\nOperation.claimClaimableBalance = ops.claimClaimableBalance;\nOperation.clawbackClaimableBalance = ops.clawbackClaimableBalance;\nOperation.createPassiveSellOffer = ops.createPassiveSellOffer;\nOperation.inflation = ops.inflation;\nOperation.manageData = ops.manageData;\nOperation.manageSellOffer = ops.manageSellOffer;\nOperation.manageBuyOffer = ops.manageBuyOffer;\nOperation.pathPaymentStrictReceive = ops.pathPaymentStrictReceive;\nOperation.pathPaymentStrictSend = ops.pathPaymentStrictSend;\nOperation.payment = ops.payment;\nOperation.setOptions = ops.setOptions;\nOperation.beginSponsoringFutureReserves = ops.beginSponsoringFutureReserves;\nOperation.endSponsoringFutureReserves = ops.endSponsoringFutureReserves;\nOperation.revokeAccountSponsorship = ops.revokeAccountSponsorship;\nOperation.revokeTrustlineSponsorship = ops.revokeTrustlineSponsorship;\nOperation.revokeOfferSponsorship = ops.revokeOfferSponsorship;\nOperation.revokeDataSponsorship = ops.revokeDataSponsorship;\nOperation.revokeClaimableBalanceSponsorship = ops.revokeClaimableBalanceSponsorship;\nOperation.revokeLiquidityPoolSponsorship = ops.revokeLiquidityPoolSponsorship;\nOperation.revokeSignerSponsorship = ops.revokeSignerSponsorship;\nOperation.clawback = ops.clawback;\nOperation.setTrustLineFlags = ops.setTrustLineFlags;\nOperation.liquidityPoolDeposit = ops.liquidityPoolDeposit;\nOperation.liquidityPoolWithdraw = ops.liquidityPoolWithdraw;\nOperation.invokeHostFunction = ops.invokeHostFunction;\nOperation.extendFootprintTtl = ops.extendFootprintTtl;\nOperation.restoreFootprint = ops.restoreFootprint;\n\n// these are not `xdr.Operation`s directly, but are proxies for complex but\n// common versions of `Operation.invokeHostFunction`\nOperation.createStellarAssetContract = ops.createStellarAssetContract;\nOperation.invokeContractFunction = ops.invokeContractFunction;\nOperation.createCustomContract = ops.createCustomContract;\nOperation.uploadContractWasm = ops.uploadContractWasm;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/account_merge.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/account_merge.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.accountMerge = accountMerge;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Transfers native balance to destination account.\n *\n * @function\n * @alias Operation.accountMerge\n *\n * @param {object} opts - options object\n * @param {string} opts.destination - destination to merge the source account into\n * @param {string} [opts.source]    - operation source account (defaults to\n *     transaction source)\n *\n * @returns {xdr.Operation} an Account Merge operation (xdr.AccountMergeOp)\n */\nfunction accountMerge(opts) {\n  var opAttributes = {};\n  try {\n    opAttributes.body = _xdr[\"default\"].OperationBody.accountMerge((0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination));\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2FjY291bnRfbWVyZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0JBQW9CO0FBQ3BCLGtDQUFrQyxtQkFBTyxDQUFDLHFIQUFRO0FBQ2xELG1DQUFtQyxtQkFBTyxDQUFDLCtLQUFxQztBQUNoRixxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL29wZXJhdGlvbnMvYWNjb3VudF9tZXJnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYWNjb3VudE1lcmdlID0gYWNjb3VudE1lcmdlO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xudmFyIF9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnQgPSByZXF1aXJlKFwiLi4vdXRpbC9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnRcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBUcmFuc2ZlcnMgbmF0aXZlIGJhbGFuY2UgdG8gZGVzdGluYXRpb24gYWNjb3VudC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24uYWNjb3VudE1lcmdlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBvcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZGVzdGluYXRpb24gLSBkZXN0aW5hdGlvbiB0byBtZXJnZSB0aGUgc291cmNlIGFjY291bnQgaW50b1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gICAgLSBvcGVyYXRpb24gc291cmNlIGFjY291bnQgKGRlZmF1bHRzIHRvXG4gKiAgICAgdHJhbnNhY3Rpb24gc291cmNlKVxuICpcbiAqIEByZXR1cm5zIHt4ZHIuT3BlcmF0aW9ufSBhbiBBY2NvdW50IE1lcmdlIG9wZXJhdGlvbiAoeGRyLkFjY291bnRNZXJnZU9wKVxuICovXG5mdW5jdGlvbiBhY2NvdW50TWVyZ2Uob3B0cykge1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge307XG4gIHRyeSB7XG4gICAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmFjY291bnRNZXJnZSgoMCwgX2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudC5kZWNvZGVBZGRyZXNzVG9NdXhlZEFjY291bnQpKG9wdHMuZGVzdGluYXRpb24pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVzdGluYXRpb24gaXMgaW52YWxpZCcpO1xuICB9XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/account_merge.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/allow_trust.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/allow_trust.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.allowTrust = allowTrust;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @deprecated since v5.0\n *\n * Returns an XDR AllowTrustOp. An \"allow trust\" operation authorizes another\n * account to hold your account's credit for a given asset.\n *\n * @function\n * @alias Operation.allowTrust\n *\n * @param {object} opts Options object\n * @param {string} opts.trustor - The trusting account (the one being authorized)\n * @param {string} opts.assetCode - The asset code being authorized.\n * @param {(0|1|2)} opts.authorize - `1` to authorize, `2` to authorize to maintain liabilities, and `0` to deauthorize.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.AllowTrustOp} Allow Trust operation\n */\nfunction allowTrust(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.trustor)) {\n    throw new Error('trustor is invalid');\n  }\n  var attributes = {};\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  if (opts.assetCode.length <= 4) {\n    var code = opts.assetCode.padEnd(4, '\\0');\n    attributes.asset = _xdr[\"default\"].AssetCode.assetTypeCreditAlphanum4(code);\n  } else if (opts.assetCode.length <= 12) {\n    var _code = opts.assetCode.padEnd(12, '\\0');\n    attributes.asset = _xdr[\"default\"].AssetCode.assetTypeCreditAlphanum12(_code);\n  } else {\n    throw new Error('Asset code must be 12 characters at max.');\n  }\n  if (typeof opts.authorize === 'boolean') {\n    if (opts.authorize) {\n      attributes.authorize = _xdr[\"default\"].TrustLineFlags.authorizedFlag().value;\n    } else {\n      attributes.authorize = 0;\n    }\n  } else {\n    attributes.authorize = opts.authorize;\n  }\n  var allowTrustOp = new _xdr[\"default\"].AllowTrustOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.allowTrust(allowTrustOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2FsbG93X3RydXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixrQ0FBa0MsbUJBQU8sQ0FBQyxxSEFBUTtBQUNsRCxlQUFlLG1CQUFPLENBQUMsNkhBQVk7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLDJIQUFXO0FBQ2pDLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvb3BlcmF0aW9ucy9hbGxvd190cnVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYWxsb3dUcnVzdCA9IGFsbG93VHJ1c3Q7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2tleXBhaXIgPSByZXF1aXJlKFwiLi4va2V5cGFpclwiKTtcbnZhciBfc3Rya2V5ID0gcmVxdWlyZShcIi4uL3N0cmtleVwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHY1LjBcbiAqXG4gKiBSZXR1cm5zIGFuIFhEUiBBbGxvd1RydXN0T3AuIEFuIFwiYWxsb3cgdHJ1c3RcIiBvcGVyYXRpb24gYXV0aG9yaXplcyBhbm90aGVyXG4gKiBhY2NvdW50IHRvIGhvbGQgeW91ciBhY2NvdW50J3MgY3JlZGl0IGZvciBhIGdpdmVuIGFzc2V0LlxuICpcbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5hbGxvd1RydXN0XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnRydXN0b3IgLSBUaGUgdHJ1c3RpbmcgYWNjb3VudCAodGhlIG9uZSBiZWluZyBhdXRob3JpemVkKVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuYXNzZXRDb2RlIC0gVGhlIGFzc2V0IGNvZGUgYmVpbmcgYXV0aG9yaXplZC5cbiAqIEBwYXJhbSB7KDB8MXwyKX0gb3B0cy5hdXRob3JpemUgLSBgMWAgdG8gYXV0aG9yaXplLCBgMmAgdG8gYXV0aG9yaXplIHRvIG1haW50YWluIGxpYWJpbGl0aWVzLCBhbmQgYDBgIHRvIGRlYXV0aG9yaXplLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgKGRlZmF1bHRzIHRvIHRyYW5zYWN0aW9uIHNvdXJjZSkuXG4gKlxuICogQHJldHVybnMge3hkci5BbGxvd1RydXN0T3B9IEFsbG93IFRydXN0IG9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBhbGxvd1RydXN0KG9wdHMpIHtcbiAgaWYgKCFfc3Rya2V5LlN0cktleS5pc1ZhbGlkRWQyNTUxOVB1YmxpY0tleShvcHRzLnRydXN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0cnVzdG9yIGlzIGludmFsaWQnKTtcbiAgfVxuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBhdHRyaWJ1dGVzLnRydXN0b3IgPSBfa2V5cGFpci5LZXlwYWlyLmZyb21QdWJsaWNLZXkob3B0cy50cnVzdG9yKS54ZHJBY2NvdW50SWQoKTtcbiAgaWYgKG9wdHMuYXNzZXRDb2RlLmxlbmd0aCA8PSA0KSB7XG4gICAgdmFyIGNvZGUgPSBvcHRzLmFzc2V0Q29kZS5wYWRFbmQoNCwgJ1xcMCcpO1xuICAgIGF0dHJpYnV0ZXMuYXNzZXQgPSBfeGRyW1wiZGVmYXVsdFwiXS5Bc3NldENvZGUuYXNzZXRUeXBlQ3JlZGl0QWxwaGFudW00KGNvZGUpO1xuICB9IGVsc2UgaWYgKG9wdHMuYXNzZXRDb2RlLmxlbmd0aCA8PSAxMikge1xuICAgIHZhciBfY29kZSA9IG9wdHMuYXNzZXRDb2RlLnBhZEVuZCgxMiwgJ1xcMCcpO1xuICAgIGF0dHJpYnV0ZXMuYXNzZXQgPSBfeGRyW1wiZGVmYXVsdFwiXS5Bc3NldENvZGUuYXNzZXRUeXBlQ3JlZGl0QWxwaGFudW0xMihfY29kZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBc3NldCBjb2RlIG11c3QgYmUgMTIgY2hhcmFjdGVycyBhdCBtYXguJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRzLmF1dGhvcml6ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgaWYgKG9wdHMuYXV0aG9yaXplKSB7XG4gICAgICBhdHRyaWJ1dGVzLmF1dGhvcml6ZSA9IF94ZHJbXCJkZWZhdWx0XCJdLlRydXN0TGluZUZsYWdzLmF1dGhvcml6ZWRGbGFnKCkudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF0dHJpYnV0ZXMuYXV0aG9yaXplID0gMDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYXR0cmlidXRlcy5hdXRob3JpemUgPSBvcHRzLmF1dGhvcml6ZTtcbiAgfVxuICB2YXIgYWxsb3dUcnVzdE9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkFsbG93VHJ1c3RPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuYWxsb3dUcnVzdChhbGxvd1RydXN0T3ApO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/allow_trust.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.beginSponsoringFutureReserves = beginSponsoringFutureReserves;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a \"begin sponsoring future reserves\" operation.\n * @function\n * @alias Operation.beginSponsoringFutureReserves\n * @param {object} opts Options object\n * @param {string} opts.sponsoredId - The sponsored account id.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.beginSponsoringFutureReserves({\n *   sponsoredId: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * });\n *\n */\nfunction beginSponsoringFutureReserves() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.sponsoredId)) {\n    throw new Error('sponsoredId is invalid');\n  }\n  var op = new _xdr[\"default\"].BeginSponsoringFutureReservesOp({\n    sponsoredId: _keypair.Keypair.fromPublicKey(opts.sponsoredId).xdrAccountId()\n  });\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.beginSponsoringFutureReserves(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2JlZ2luX3Nwb25zb3JpbmdfZnV0dXJlX3Jlc2VydmVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHFDQUFxQztBQUNyQyxrQ0FBa0MsbUJBQU8sQ0FBQyxxSEFBUTtBQUNsRCxjQUFjLG1CQUFPLENBQUMsMkhBQVc7QUFDakMsZUFBZSxtQkFBTyxDQUFDLDZIQUFZO0FBQ25DLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvb3BlcmF0aW9ucy9iZWdpbl9zcG9uc29yaW5nX2Z1dHVyZV9yZXNlcnZlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYmVnaW5TcG9uc29yaW5nRnV0dXJlUmVzZXJ2ZXMgPSBiZWdpblNwb25zb3JpbmdGdXR1cmVSZXNlcnZlcztcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbnZhciBfc3Rya2V5ID0gcmVxdWlyZShcIi4uL3N0cmtleVwiKTtcbnZhciBfa2V5cGFpciA9IHJlcXVpcmUoXCIuLi9rZXlwYWlyXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQ3JlYXRlIGEgXCJiZWdpbiBzcG9uc29yaW5nIGZ1dHVyZSByZXNlcnZlc1wiIG9wZXJhdGlvbi5cbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5iZWdpblNwb25zb3JpbmdGdXR1cmVSZXNlcnZlc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnNwb25zb3JlZElkIC0gVGhlIHNwb25zb3JlZCBhY2NvdW50IGlkLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBvcGVyYXRpb24uIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICogQHJldHVybnMge3hkci5PcGVyYXRpb259IHhkciBvcGVyYXRpb25cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb3AgPSBPcGVyYXRpb24uYmVnaW5TcG9uc29yaW5nRnV0dXJlUmVzZXJ2ZXMoe1xuICogICBzcG9uc29yZWRJZDogJ0dER1U1T0FQSE5QVTVVQ0xFNVJESkhHN1BYWkZRWVdLQ0ZPRVhTWE5NUjZLUlFSSTVUNlhYQ0Q3J1xuICogfSk7XG4gKlxuICovXG5mdW5jdGlvbiBiZWdpblNwb25zb3JpbmdGdXR1cmVSZXNlcnZlcygpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICBpZiAoIV9zdHJrZXkuU3RyS2V5LmlzVmFsaWRFZDI1NTE5UHVibGljS2V5KG9wdHMuc3BvbnNvcmVkSWQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzcG9uc29yZWRJZCBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgdmFyIG9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkJlZ2luU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzT3Aoe1xuICAgIHNwb25zb3JlZElkOiBfa2V5cGFpci5LZXlwYWlyLmZyb21QdWJsaWNLZXkob3B0cy5zcG9uc29yZWRJZCkueGRyQWNjb3VudElkKClcbiAgfSk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmJlZ2luU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzKG9wKTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.bumpSequence = bumpSequence;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ../util/bignumber */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * This operation bumps sequence number.\n * @function\n * @alias Operation.bumpSequence\n * @param {object} opts Options object\n * @param {string} opts.bumpTo - Sequence number to bump to.\n * @param {string} [opts.source] - The optional source account.\n * @returns {xdr.BumpSequenceOp} Operation\n */\nfunction bumpSequence(opts) {\n  var attributes = {};\n  if (typeof opts.bumpTo !== 'string') {\n    throw new Error('bumpTo must be a string');\n  }\n  try {\n    // eslint-disable-next-line no-new\n    new _bignumber[\"default\"](opts.bumpTo);\n  } catch (e) {\n    throw new Error('bumpTo must be a stringified number');\n  }\n  attributes.bumpTo = _jsXdr.Hyper.fromString(opts.bumpTo);\n  var bumpSequenceOp = new _xdr[\"default\"].BumpSequenceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.bumpSequence(bumpSequenceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2J1bXBfc2VxdWVuY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0JBQW9CO0FBQ3BCLGFBQWEsbUJBQU8sQ0FBQyxtSEFBaUI7QUFDdEMsd0NBQXdDLG1CQUFPLENBQUMsMklBQW1CO0FBQ25FLGtDQUFrQyxtQkFBTyxDQUFDLHFIQUFRO0FBQ2xELHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLG9CQUFvQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL29wZXJhdGlvbnMvYnVtcF9zZXF1ZW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYnVtcFNlcXVlbmNlID0gYnVtcFNlcXVlbmNlO1xudmFyIF9qc1hkciA9IHJlcXVpcmUoXCJAc3RlbGxhci9qcy14ZHJcIik7XG52YXIgX2JpZ251bWJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvYmlnbnVtYmVyXCIpKTtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIFRoaXMgb3BlcmF0aW9uIGJ1bXBzIHNlcXVlbmNlIG51bWJlci5cbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5idW1wU2VxdWVuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5idW1wVG8gLSBTZXF1ZW5jZSBudW1iZXIgdG8gYnVtcCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIG9wdGlvbmFsIHNvdXJjZSBhY2NvdW50LlxuICogQHJldHVybnMge3hkci5CdW1wU2VxdWVuY2VPcH0gT3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIGJ1bXBTZXF1ZW5jZShvcHRzKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGlmICh0eXBlb2Ygb3B0cy5idW1wVG8gIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdidW1wVG8gbXVzdCBiZSBhIHN0cmluZycpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ld1xuICAgIG5ldyBfYmlnbnVtYmVyW1wiZGVmYXVsdFwiXShvcHRzLmJ1bXBUbyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2J1bXBUbyBtdXN0IGJlIGEgc3RyaW5naWZpZWQgbnVtYmVyJyk7XG4gIH1cbiAgYXR0cmlidXRlcy5idW1wVG8gPSBfanNYZHIuSHlwZXIuZnJvbVN0cmluZyhvcHRzLmJ1bXBUbyk7XG4gIHZhciBidW1wU2VxdWVuY2VPcCA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5CdW1wU2VxdWVuY2VPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuYnVtcFNlcXVlbmNlKGJ1bXBTZXF1ZW5jZU9wKTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/change_trust.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/change_trust.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.changeTrust = changeTrust;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ../util/bignumber */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _asset = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _liquidity_pool_asset = __webpack_require__(/*! ../liquidity_pool_asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * Returns an XDR ChangeTrustOp. A \"change trust\" operation adds, removes, or updates a\n * trust line for a given asset from the source account to another.\n * @function\n * @alias Operation.changeTrust\n * @param {object} opts Options object\n * @param {Asset | LiquidityPoolAsset} opts.asset - The asset for the trust line.\n * @param {string} [opts.limit] - The limit for the asset, defaults to max int64.\n *                                If the limit is set to \"0\" it deletes the trustline.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @returns {xdr.ChangeTrustOp} Change Trust operation\n */\nfunction changeTrust(opts) {\n  var attributes = {};\n  if (opts.asset instanceof _asset.Asset) {\n    attributes.line = opts.asset.toChangeTrustXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_asset.LiquidityPoolAsset) {\n    attributes.line = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be Asset or LiquidityPoolAsset');\n  }\n  if (opts.limit !== undefined && !this.isValidAmount(opts.limit, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('limit'));\n  }\n  if (opts.limit) {\n    attributes.limit = this._toXDRAmount(opts.limit);\n  } else {\n    attributes.limit = _jsXdr.Hyper.fromString(new _bignumber[\"default\"](MAX_INT64).toString());\n  }\n  if (opts.source) {\n    attributes.source = opts.source.masterKeypair;\n  }\n  var changeTrustOP = new _xdr[\"default\"].ChangeTrustOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.changeTrust(changeTrustOP);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NoYW5nZV90cnVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtQkFBbUI7QUFDbkIsYUFBYSxtQkFBTyxDQUFDLG1IQUFpQjtBQUN0Qyx3Q0FBd0MsbUJBQU8sQ0FBQywySUFBbUI7QUFDbkUsa0NBQWtDLG1CQUFPLENBQUMscUhBQVE7QUFDbEQsYUFBYSxtQkFBTyxDQUFDLHlIQUFVO0FBQy9CLDRCQUE0QixtQkFBTyxDQUFDLHVKQUF5QjtBQUM3RCxxQ0FBcUMsaUNBQWlDO0FBQ3RFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyw0QkFBNEI7QUFDdkMsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsbUJBQW1CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NoYW5nZV90cnVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2hhbmdlVHJ1c3QgPSBjaGFuZ2VUcnVzdDtcbnZhciBfanNYZHIgPSByZXF1aXJlKFwiQHN0ZWxsYXIvanMteGRyXCIpO1xudmFyIF9iaWdudW1iZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2JpZ251bWJlclwiKSk7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2Fzc2V0ID0gcmVxdWlyZShcIi4uL2Fzc2V0XCIpO1xudmFyIF9saXF1aWRpdHlfcG9vbF9hc3NldCA9IHJlcXVpcmUoXCIuLi9saXF1aWRpdHlfcG9vbF9hc3NldFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG52YXIgTUFYX0lOVDY0ID0gJzkyMjMzNzIwMzY4NTQ3NzU4MDcnO1xuXG4vKipcbiAqIFJldHVybnMgYW4gWERSIENoYW5nZVRydXN0T3AuIEEgXCJjaGFuZ2UgdHJ1c3RcIiBvcGVyYXRpb24gYWRkcywgcmVtb3Zlcywgb3IgdXBkYXRlcyBhXG4gKiB0cnVzdCBsaW5lIGZvciBhIGdpdmVuIGFzc2V0IGZyb20gdGhlIHNvdXJjZSBhY2NvdW50IHRvIGFub3RoZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24uY2hhbmdlVHJ1c3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge0Fzc2V0IHwgTGlxdWlkaXR5UG9vbEFzc2V0fSBvcHRzLmFzc2V0IC0gVGhlIGFzc2V0IGZvciB0aGUgdHJ1c3QgbGluZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5saW1pdF0gLSBUaGUgbGltaXQgZm9yIHRoZSBhc3NldCwgZGVmYXVsdHMgdG8gbWF4IGludDY0LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoZSBsaW1pdCBpcyBzZXQgdG8gXCIwXCIgaXQgZGVsZXRlcyB0aGUgdHJ1c3RsaW5lLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgKGRlZmF1bHRzIHRvIHRyYW5zYWN0aW9uIHNvdXJjZSkuXG4gKiBAcmV0dXJucyB7eGRyLkNoYW5nZVRydXN0T3B9IENoYW5nZSBUcnVzdCBvcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gY2hhbmdlVHJ1c3Qob3B0cykge1xuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBpZiAob3B0cy5hc3NldCBpbnN0YW5jZW9mIF9hc3NldC5Bc3NldCkge1xuICAgIGF0dHJpYnV0ZXMubGluZSA9IG9wdHMuYXNzZXQudG9DaGFuZ2VUcnVzdFhEUk9iamVjdCgpO1xuICB9IGVsc2UgaWYgKG9wdHMuYXNzZXQgaW5zdGFuY2VvZiBfbGlxdWlkaXR5X3Bvb2xfYXNzZXQuTGlxdWlkaXR5UG9vbEFzc2V0KSB7XG4gICAgYXR0cmlidXRlcy5saW5lID0gb3B0cy5hc3NldC50b1hEUk9iamVjdCgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Fzc2V0IG11c3QgYmUgQXNzZXQgb3IgTGlxdWlkaXR5UG9vbEFzc2V0Jyk7XG4gIH1cbiAgaWYgKG9wdHMubGltaXQgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMubGltaXQsIHRydWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdsaW1pdCcpKTtcbiAgfVxuICBpZiAob3B0cy5saW1pdCkge1xuICAgIGF0dHJpYnV0ZXMubGltaXQgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLmxpbWl0KTtcbiAgfSBlbHNlIHtcbiAgICBhdHRyaWJ1dGVzLmxpbWl0ID0gX2pzWGRyLkh5cGVyLmZyb21TdHJpbmcobmV3IF9iaWdudW1iZXJbXCJkZWZhdWx0XCJdKE1BWF9JTlQ2NCkudG9TdHJpbmcoKSk7XG4gIH1cbiAgaWYgKG9wdHMuc291cmNlKSB7XG4gICAgYXR0cmlidXRlcy5zb3VyY2UgPSBvcHRzLnNvdXJjZS5tYXN0ZXJLZXlwYWlyO1xuICB9XG4gIHZhciBjaGFuZ2VUcnVzdE9QID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkNoYW5nZVRydXN0T3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmNoYW5nZVRydXN0KGNoYW5nZVRydXN0T1ApO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/change_trust.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.claimClaimableBalance = claimClaimableBalance;\nexports.validateClaimableBalanceId = validateClaimableBalanceId;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a new claim claimable balance operation.\n * @function\n * @alias Operation.claimClaimableBalance\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The claimable balance id to be claimed.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} Claim claimable balance operation\n *\n * @example\n * const op = Operation.claimClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction claimClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  validateClaimableBalanceId(opts.balanceId);\n  var attributes = {};\n  attributes.balanceId = _xdr[\"default\"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex');\n  var claimClaimableBalanceOp = new _xdr[\"default\"].ClaimClaimableBalanceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.claimClaimableBalance(claimClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\nfunction validateClaimableBalanceId(balanceId) {\n  if (typeof balanceId !== 'string' || balanceId.length !== 8 + 64 /* 8b discriminant + 64b string */) {\n    throw new Error('must provide a valid claimable balance id');\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NsYWltX2NsYWltYWJsZV9iYWxhbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDZCQUE2QjtBQUM3QixrQ0FBa0M7QUFDbEMsa0NBQWtDLG1CQUFPLENBQUMscUhBQVE7QUFDbEQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvb3BlcmF0aW9ucy9jbGFpbV9jbGFpbWFibGVfYmFsYW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2xhaW1DbGFpbWFibGVCYWxhbmNlID0gY2xhaW1DbGFpbWFibGVCYWxhbmNlO1xuZXhwb3J0cy52YWxpZGF0ZUNsYWltYWJsZUJhbGFuY2VJZCA9IHZhbGlkYXRlQ2xhaW1hYmxlQmFsYW5jZUlkO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGNsYWltIGNsYWltYWJsZSBiYWxhbmNlIG9wZXJhdGlvbi5cbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5jbGFpbUNsYWltYWJsZUJhbGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5iYWxhbmNlSWQgLSBUaGUgY2xhaW1hYmxlIGJhbGFuY2UgaWQgdG8gYmUgY2xhaW1lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIHNvdXJjZSBhY2NvdW50IGZvciB0aGUgb3BlcmF0aW9uLiBEZWZhdWx0cyB0byB0aGUgdHJhbnNhY3Rpb24ncyBzb3VyY2UgYWNjb3VudC5cbiAqIEByZXR1cm5zIHt4ZHIuT3BlcmF0aW9ufSBDbGFpbSBjbGFpbWFibGUgYmFsYW5jZSBvcGVyYXRpb25cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb3AgPSBPcGVyYXRpb24uY2xhaW1DbGFpbWFibGVCYWxhbmNlKHtcbiAqICAgYmFsYW5jZUlkOiAnMDAwMDAwMDBkYTBkNTdkYTdkNDg1MGU3ZmMxMGQyYTlkMGViYzczMWY3YWZiNDA1NzRjMDMzOTViMTdkNDkxNDliOTFmNWJlJyxcbiAqIH0pO1xuICpcbiAqL1xuZnVuY3Rpb24gY2xhaW1DbGFpbWFibGVCYWxhbmNlKCkge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhbGlkYXRlQ2xhaW1hYmxlQmFsYW5jZUlkKG9wdHMuYmFsYW5jZUlkKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgYXR0cmlidXRlcy5iYWxhbmNlSWQgPSBfeGRyW1wiZGVmYXVsdFwiXS5DbGFpbWFibGVCYWxhbmNlSWQuZnJvbVhEUihvcHRzLmJhbGFuY2VJZCwgJ2hleCcpO1xuICB2YXIgY2xhaW1DbGFpbWFibGVCYWxhbmNlT3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uQ2xhaW1DbGFpbWFibGVCYWxhbmNlT3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmNsYWltQ2xhaW1hYmxlQmFsYW5jZShjbGFpbUNsYWltYWJsZUJhbGFuY2VPcCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVDbGFpbWFibGVCYWxhbmNlSWQoYmFsYW5jZUlkKSB7XG4gIGlmICh0eXBlb2YgYmFsYW5jZUlkICE9PSAnc3RyaW5nJyB8fCBiYWxhbmNlSWQubGVuZ3RoICE9PSA4ICsgNjQgLyogOGIgZGlzY3JpbWluYW50ICsgNjRiIHN0cmluZyAqLykge1xuICAgIHRocm93IG5ldyBFcnJvcignbXVzdCBwcm92aWRlIGEgdmFsaWQgY2xhaW1hYmxlIGJhbGFuY2UgaWQnKTtcbiAgfVxufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/clawback.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/clawback.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.clawback = clawback;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a clawback operation.\n *\n * @function\n * @alias Operation.clawback\n *\n * @param {object} opts - Options object\n * @param {Asset}  opts.asset   - The asset being clawed back.\n * @param {string} opts.amount  - The amount of the asset to claw back.\n * @param {string} opts.from    - The public key of the (optionally-muxed)\n *     account to claw back from.\n *\n * @param {string} [opts.source] - The source account for the operation.\n *     Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackOp}\n *\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-operation\n */\nfunction clawback(opts) {\n  var attributes = {};\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.asset = opts.asset.toXDRObject();\n  try {\n    attributes.from = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.from);\n  } catch (e) {\n    throw new Error('from address is invalid');\n  }\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.clawback(new _xdr[\"default\"].ClawbackOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NsYXdiYWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdCQUFnQjtBQUNoQixrQ0FBa0MsbUJBQU8sQ0FBQyxxSEFBUTtBQUNsRCxtQ0FBbUMsbUJBQU8sQ0FBQywrS0FBcUM7QUFDaEYscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL29wZXJhdGlvbnMvY2xhd2JhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNsYXdiYWNrID0gY2xhd2JhY2s7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudCA9IHJlcXVpcmUoXCIuLi91dGlsL2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIENyZWF0ZXMgYSBjbGF3YmFjayBvcGVyYXRpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmNsYXdiYWNrXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtBc3NldH0gIG9wdHMuYXNzZXQgICAtIFRoZSBhc3NldCBiZWluZyBjbGF3ZWQgYmFjay5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmFtb3VudCAgLSBUaGUgYW1vdW50IG9mIHRoZSBhc3NldCB0byBjbGF3IGJhY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5mcm9tICAgIC0gVGhlIHB1YmxpYyBrZXkgb2YgdGhlIChvcHRpb25hbGx5LW11eGVkKVxuICogICAgIGFjY291bnQgdG8gY2xhdyBiYWNrIGZyb20uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBvcGVyYXRpb24uXG4gKiAgICAgRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKlxuICogQHJldHVybiB7eGRyLkNsYXdiYWNrT3B9XG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vc3RlbGxhci9zdGVsbGFyLXByb3RvY29sL2Jsb2IvbWFzdGVyL2NvcmUvY2FwLTAwMzUubWQjY2xhd2JhY2stb3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIGNsYXdiYWNrKG9wdHMpIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5hbW91bnQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdhbW91bnQnKSk7XG4gIH1cbiAgYXR0cmlidXRlcy5hbW91bnQgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLmFtb3VudCk7XG4gIGF0dHJpYnV0ZXMuYXNzZXQgPSBvcHRzLmFzc2V0LnRvWERST2JqZWN0KCk7XG4gIHRyeSB7XG4gICAgYXR0cmlidXRlcy5mcm9tID0gKDAsIF9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnQuZGVjb2RlQWRkcmVzc1RvTXV4ZWRBY2NvdW50KShvcHRzLmZyb20pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdmcm9tIGFkZHJlc3MgaXMgaW52YWxpZCcpO1xuICB9XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7XG4gICAgYm9keTogX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5jbGF3YmFjayhuZXcgX3hkcltcImRlZmF1bHRcIl0uQ2xhd2JhY2tPcChhdHRyaWJ1dGVzKSlcbiAgfTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/clawback.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.clawbackClaimableBalance = clawbackClaimableBalance;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _claim_claimable_balance = __webpack_require__(/*! ./claim_claimable_balance */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a clawback operation for a claimable balance.\n *\n * @function\n * @alias Operation.clawbackClaimableBalance\n * @param {object} opts - Options object\n * @param {string} opts.balanceId - The claimable balance ID to be clawed back.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackClaimableBalanceOp}\n *\n * @example\n * const op = Operation.clawbackClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n * @link https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-claimable-balance-operation\n */\nfunction clawbackClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  (0, _claim_claimable_balance.validateClaimableBalanceId)(opts.balanceId);\n  var attributes = {\n    balanceId: _xdr[\"default\"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  };\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.clawbackClaimableBalance(new _xdr[\"default\"].ClawbackClaimableBalanceOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NsYXdiYWNrX2NsYWltYWJsZV9iYWxhbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdDQUFnQztBQUNoQyxrQ0FBa0MsbUJBQU8sQ0FBQyxxSEFBUTtBQUNsRCwrQkFBK0IsbUJBQU8sQ0FBQyx1S0FBMkI7QUFDbEUscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL29wZXJhdGlvbnMvY2xhd2JhY2tfY2xhaW1hYmxlX2JhbGFuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNsYXdiYWNrQ2xhaW1hYmxlQmFsYW5jZSA9IGNsYXdiYWNrQ2xhaW1hYmxlQmFsYW5jZTtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbnZhciBfY2xhaW1fY2xhaW1hYmxlX2JhbGFuY2UgPSByZXF1aXJlKFwiLi9jbGFpbV9jbGFpbWFibGVfYmFsYW5jZVwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIENyZWF0ZXMgYSBjbGF3YmFjayBvcGVyYXRpb24gZm9yIGEgY2xhaW1hYmxlIGJhbGFuY2UuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmNsYXdiYWNrQ2xhaW1hYmxlQmFsYW5jZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuYmFsYW5jZUlkIC0gVGhlIGNsYWltYWJsZSBiYWxhbmNlIElEIHRvIGJlIGNsYXdlZCBiYWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBvcGVyYXRpb24uIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICpcbiAqIEByZXR1cm4ge3hkci5DbGF3YmFja0NsYWltYWJsZUJhbGFuY2VPcH1cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb3AgPSBPcGVyYXRpb24uY2xhd2JhY2tDbGFpbWFibGVCYWxhbmNlKHtcbiAqICAgYmFsYW5jZUlkOiAnMDAwMDAwMDBkYTBkNTdkYTdkNDg1MGU3ZmMxMGQyYTlkMGViYzczMWY3YWZiNDA1NzRjMDMzOTViMTdkNDkxNDliOTFmNWJlJyxcbiAqIH0pO1xuICpcbiAqIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGVsbGFyL3N0ZWxsYXItcHJvdG9jb2wvYmxvYi9tYXN0ZXIvY29yZS9jYXAtMDAzNS5tZCNjbGF3YmFjay1jbGFpbWFibGUtYmFsYW5jZS1vcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gY2xhd2JhY2tDbGFpbWFibGVCYWxhbmNlKCkge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICgwLCBfY2xhaW1fY2xhaW1hYmxlX2JhbGFuY2UudmFsaWRhdGVDbGFpbWFibGVCYWxhbmNlSWQpKG9wdHMuYmFsYW5jZUlkKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgYmFsYW5jZUlkOiBfeGRyW1wiZGVmYXVsdFwiXS5DbGFpbWFibGVCYWxhbmNlSWQuZnJvbVhEUihvcHRzLmJhbGFuY2VJZCwgJ2hleCcpXG4gIH07XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7XG4gICAgYm9keTogX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5jbGF3YmFja0NsYWltYWJsZUJhbGFuY2UobmV3IF94ZHJbXCJkZWZhdWx0XCJdLkNsYXdiYWNrQ2xhaW1hYmxlQmFsYW5jZU9wKGF0dHJpYnV0ZXMpKVxuICB9O1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_account.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_account.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createAccount = createAccount;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create and fund a non existent account.\n * @function\n * @alias Operation.createAccount\n * @param {object} opts Options object\n * @param {string} opts.destination - Destination account ID to create an account for.\n * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater\n *                                   than the [reserve balance amount](https://developers.stellar.org/docs/glossary/fees/).\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.CreateAccountOp} Create account operation\n */\nfunction createAccount(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n  if (!this.isValidAmount(opts.startingBalance, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('startingBalance'));\n  }\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);\n  var createAccountOp = new _xdr[\"default\"].CreateAccountOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.createAccount(createAccountOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9hY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHFCQUFxQjtBQUNyQixrQ0FBa0MsbUJBQU8sQ0FBQyxxSEFBUTtBQUNsRCxlQUFlLG1CQUFPLENBQUMsNkhBQVk7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLDJIQUFXO0FBQ2pDLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLHFCQUFxQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL29wZXJhdGlvbnMvY3JlYXRlX2FjY291bnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZUFjY291bnQgPSBjcmVhdGVBY2NvdW50O1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xudmFyIF9rZXlwYWlyID0gcmVxdWlyZShcIi4uL2tleXBhaXJcIik7XG52YXIgX3N0cmtleSA9IHJlcXVpcmUoXCIuLi9zdHJrZXlcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBDcmVhdGUgYW5kIGZ1bmQgYSBub24gZXhpc3RlbnQgYWNjb3VudC5cbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5jcmVhdGVBY2NvdW50XG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZGVzdGluYXRpb24gLSBEZXN0aW5hdGlvbiBhY2NvdW50IElEIHRvIGNyZWF0ZSBhbiBhY2NvdW50IGZvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnN0YXJ0aW5nQmFsYW5jZSAtIEFtb3VudCBpbiBYTE0gdGhlIGFjY291bnQgc2hvdWxkIGJlIGZ1bmRlZCBmb3IuIE11c3QgYmUgZ3JlYXRlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYW4gdGhlIFtyZXNlcnZlIGJhbGFuY2UgYW1vdW50XShodHRwczovL2RldmVsb3BlcnMuc3RlbGxhci5vcmcvZG9jcy9nbG9zc2FyeS9mZWVzLykuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIHBheW1lbnQuIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICogQHJldHVybnMge3hkci5DcmVhdGVBY2NvdW50T3B9IENyZWF0ZSBhY2NvdW50IG9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBjcmVhdGVBY2NvdW50KG9wdHMpIHtcbiAgaWYgKCFfc3Rya2V5LlN0cktleS5pc1ZhbGlkRWQyNTUxOVB1YmxpY0tleShvcHRzLmRlc3RpbmF0aW9uKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVzdGluYXRpb24gaXMgaW52YWxpZCcpO1xuICB9XG4gIGlmICghdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMuc3RhcnRpbmdCYWxhbmNlLCB0cnVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignc3RhcnRpbmdCYWxhbmNlJykpO1xuICB9XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGF0dHJpYnV0ZXMuZGVzdGluYXRpb24gPSBfa2V5cGFpci5LZXlwYWlyLmZyb21QdWJsaWNLZXkob3B0cy5kZXN0aW5hdGlvbikueGRyQWNjb3VudElkKCk7XG4gIGF0dHJpYnV0ZXMuc3RhcnRpbmdCYWxhbmNlID0gdGhpcy5fdG9YRFJBbW91bnQob3B0cy5zdGFydGluZ0JhbGFuY2UpO1xuICB2YXIgY3JlYXRlQWNjb3VudE9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkNyZWF0ZUFjY291bnRPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuY3JlYXRlQWNjb3VudChjcmVhdGVBY2NvdW50T3ApO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createClaimableBalance = createClaimableBalance;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _asset = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a new claimable balance operation.\n *\n * @function\n * @alias Operation.createClaimableBalance\n *\n * @param {object} opts Options object\n * @param {Asset} opts.asset - The asset for the claimable balance.\n * @param {string} opts.amount - Amount.\n * @param {Claimant[]} opts.claimants - An array of Claimants\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} Create claimable balance operation\n *\n * @example\n * const asset = new Asset(\n *   'USD',\n *   'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * );\n * const amount = '100.0000000';\n * const claimants = [\n *   new Claimant(\n *     'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ',\n *      Claimant.predicateBeforeAbsoluteTime(\"4102444800000\")\n *   )\n * ];\n *\n * const op = Operation.createClaimableBalance({\n *   asset,\n *   amount,\n *   claimants\n * });\n *\n */\nfunction createClaimableBalance(opts) {\n  if (!(opts.asset instanceof _asset.Asset)) {\n    throw new Error('must provide an asset for create claimable balance operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  if (!Array.isArray(opts.claimants) || opts.claimants.length === 0) {\n    throw new Error('must provide at least one claimant');\n  }\n  var attributes = {};\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.claimants = Object.values(opts.claimants).map(function (c) {\n    return c.toXDRObject();\n  });\n  var createClaimableBalanceOp = new _xdr[\"default\"].CreateClaimableBalanceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.createClaimableBalance(createClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9jbGFpbWFibGVfYmFsYW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw4QkFBOEI7QUFDOUIsa0NBQWtDLG1CQUFPLENBQUMscUhBQVE7QUFDbEQsYUFBYSxtQkFBTyxDQUFDLHlIQUFVO0FBQy9CLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvb3BlcmF0aW9ucy9jcmVhdGVfY2xhaW1hYmxlX2JhbGFuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZUNsYWltYWJsZUJhbGFuY2UgPSBjcmVhdGVDbGFpbWFibGVCYWxhbmNlO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xudmFyIF9hc3NldCA9IHJlcXVpcmUoXCIuLi9hc3NldFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBjbGFpbWFibGUgYmFsYW5jZSBvcGVyYXRpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmNyZWF0ZUNsYWltYWJsZUJhbGFuY2VcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtBc3NldH0gb3B0cy5hc3NldCAtIFRoZSBhc3NldCBmb3IgdGhlIGNsYWltYWJsZSBiYWxhbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuYW1vdW50IC0gQW1vdW50LlxuICogQHBhcmFtIHtDbGFpbWFudFtdfSBvcHRzLmNsYWltYW50cyAtIEFuIGFycmF5IG9mIENsYWltYW50c1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBvcGVyYXRpb24uIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICpcbiAqIEByZXR1cm5zIHt4ZHIuT3BlcmF0aW9ufSBDcmVhdGUgY2xhaW1hYmxlIGJhbGFuY2Ugb3BlcmF0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFzc2V0ID0gbmV3IEFzc2V0KFxuICogICAnVVNEJyxcbiAqICAgJ0dER1U1T0FQSE5QVTVVQ0xFNVJESkhHN1BYWkZRWVdLQ0ZPRVhTWE5NUjZLUlFSSTVUNlhYQ0Q3J1xuICogKTtcbiAqIGNvbnN0IGFtb3VudCA9ICcxMDAuMDAwMDAwMCc7XG4gKiBjb25zdCBjbGFpbWFudHMgPSBbXG4gKiAgIG5ldyBDbGFpbWFudChcbiAqICAgICAnR0NFWldLQ0E1VkxETlJMTjNSUFJKTVJaT1gzWjZHNUNIQ0dTTkZIRVlWWE0zWE9KTURTNjc0SlonLFxuICogICAgICBDbGFpbWFudC5wcmVkaWNhdGVCZWZvcmVBYnNvbHV0ZVRpbWUoXCI0MTAyNDQ0ODAwMDAwXCIpXG4gKiAgIClcbiAqIF07XG4gKlxuICogY29uc3Qgb3AgPSBPcGVyYXRpb24uY3JlYXRlQ2xhaW1hYmxlQmFsYW5jZSh7XG4gKiAgIGFzc2V0LFxuICogICBhbW91bnQsXG4gKiAgIGNsYWltYW50c1xuICogfSk7XG4gKlxuICovXG5mdW5jdGlvbiBjcmVhdGVDbGFpbWFibGVCYWxhbmNlKG9wdHMpIHtcbiAgaWYgKCEob3B0cy5hc3NldCBpbnN0YW5jZW9mIF9hc3NldC5Bc3NldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ211c3QgcHJvdmlkZSBhbiBhc3NldCBmb3IgY3JlYXRlIGNsYWltYWJsZSBiYWxhbmNlIG9wZXJhdGlvbicpO1xuICB9XG4gIGlmICghdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMuYW1vdW50KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignYW1vdW50JykpO1xuICB9XG4gIGlmICghQXJyYXkuaXNBcnJheShvcHRzLmNsYWltYW50cykgfHwgb3B0cy5jbGFpbWFudHMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IHByb3ZpZGUgYXQgbGVhc3Qgb25lIGNsYWltYW50Jyk7XG4gIH1cbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgYXR0cmlidXRlcy5hc3NldCA9IG9wdHMuYXNzZXQudG9YRFJPYmplY3QoKTtcbiAgYXR0cmlidXRlcy5hbW91bnQgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLmFtb3VudCk7XG4gIGF0dHJpYnV0ZXMuY2xhaW1hbnRzID0gT2JqZWN0LnZhbHVlcyhvcHRzLmNsYWltYW50cykubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMudG9YRFJPYmplY3QoKTtcbiAgfSk7XG4gIHZhciBjcmVhdGVDbGFpbWFibGVCYWxhbmNlT3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uQ3JlYXRlQ2xhaW1hYmxlQmFsYW5jZU9wKGF0dHJpYnV0ZXMpO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge307XG4gIG9wQXR0cmlidXRlcy5ib2R5ID0gX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5jcmVhdGVDbGFpbWFibGVCYWxhbmNlKGNyZWF0ZUNsYWltYWJsZUJhbGFuY2VPcCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createPassiveSellOffer = createPassiveSellOffer;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a XDR CreatePasiveSellOfferOp. A \"create passive offer\" operation creates an\n * offer that won't consume a counter offer that exactly matches this offer. This is\n * useful for offers just used as 1:1 exchanges for path payments. Use manage offer\n * to manage this offer after using this operation to create it.\n * @function\n * @alias Operation.createPassiveSellOffer\n * @param {object} opts Options object\n * @param {Asset} opts.selling - What you're selling.\n * @param {Asset} opts.buying - What you're buying.\n * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.\n * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.\n * @param {number} opts.price.n - If `opts.price` is an object: the price numerator\n * @param {number} opts.price.d - If `opts.price` is an object: the price denominator\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.\n * @returns {xdr.CreatePassiveSellOfferOp} Create Passive Sell Offer operation\n */\nfunction createPassiveSellOffer(opts) {\n  var attributes = {};\n  attributes.selling = opts.selling.toXDRObject();\n  attributes.buying = opts.buying.toXDRObject();\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (opts.price === undefined) {\n    throw new TypeError('price argument is required');\n  }\n  attributes.price = this._toXDRPrice(opts.price);\n  var createPassiveSellOfferOp = new _xdr[\"default\"].CreatePassiveSellOfferOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.createPassiveSellOffer(createPassiveSellOfferOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9wYXNzaXZlX3NlbGxfb2ZmZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsOEJBQThCO0FBQzlCLGtDQUFrQyxtQkFBTyxDQUFDLHFIQUFRO0FBQ2xELHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxnQ0FBZ0M7QUFDM0MsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CLGFBQWEsOEJBQThCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL29wZXJhdGlvbnMvY3JlYXRlX3Bhc3NpdmVfc2VsbF9vZmZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3JlYXRlUGFzc2l2ZVNlbGxPZmZlciA9IGNyZWF0ZVBhc3NpdmVTZWxsT2ZmZXI7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBSZXR1cm5zIGEgWERSIENyZWF0ZVBhc2l2ZVNlbGxPZmZlck9wLiBBIFwiY3JlYXRlIHBhc3NpdmUgb2ZmZXJcIiBvcGVyYXRpb24gY3JlYXRlcyBhblxuICogb2ZmZXIgdGhhdCB3b24ndCBjb25zdW1lIGEgY291bnRlciBvZmZlciB0aGF0IGV4YWN0bHkgbWF0Y2hlcyB0aGlzIG9mZmVyLiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIG9mZmVycyBqdXN0IHVzZWQgYXMgMToxIGV4Y2hhbmdlcyBmb3IgcGF0aCBwYXltZW50cy4gVXNlIG1hbmFnZSBvZmZlclxuICogdG8gbWFuYWdlIHRoaXMgb2ZmZXIgYWZ0ZXIgdXNpbmcgdGhpcyBvcGVyYXRpb24gdG8gY3JlYXRlIGl0LlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmNyZWF0ZVBhc3NpdmVTZWxsT2ZmZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge0Fzc2V0fSBvcHRzLnNlbGxpbmcgLSBXaGF0IHlvdSdyZSBzZWxsaW5nLlxuICogQHBhcmFtIHtBc3NldH0gb3B0cy5idXlpbmcgLSBXaGF0IHlvdSdyZSBidXlpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5hbW91bnQgLSBUaGUgdG90YWwgYW1vdW50IHlvdSdyZSBzZWxsaW5nLiBJZiAwLCBkZWxldGVzIHRoZSBvZmZlci5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ8T2JqZWN0fSBvcHRzLnByaWNlIC0gUHJpY2Ugb2YgMSB1bml0IG9mIGBzZWxsaW5nYCBpbiB0ZXJtcyBvZiBgYnV5aW5nYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnByaWNlLm4gLSBJZiBgb3B0cy5wcmljZWAgaXMgYW4gb2JqZWN0OiB0aGUgcHJpY2UgbnVtZXJhdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy5wcmljZS5kIC0gSWYgYG9wdHMucHJpY2VgIGlzIGFuIG9iamVjdDogdGhlIHByaWNlIGRlbm9taW5hdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCAoZGVmYXVsdHMgdG8gdHJhbnNhY3Rpb24gc291cmNlKS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBUaHJvd3MgYEVycm9yYCB3aGVuIHRoZSBiZXN0IHJhdGlvbmFsIGFwcHJveGltYXRpb24gb2YgYHByaWNlYCBjYW5ub3QgYmUgZm91bmQuXG4gKiBAcmV0dXJucyB7eGRyLkNyZWF0ZVBhc3NpdmVTZWxsT2ZmZXJPcH0gQ3JlYXRlIFBhc3NpdmUgU2VsbCBPZmZlciBvcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGFzc2l2ZVNlbGxPZmZlcihvcHRzKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGF0dHJpYnV0ZXMuc2VsbGluZyA9IG9wdHMuc2VsbGluZy50b1hEUk9iamVjdCgpO1xuICBhdHRyaWJ1dGVzLmJ1eWluZyA9IG9wdHMuYnV5aW5nLnRvWERST2JqZWN0KCk7XG4gIGlmICghdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMuYW1vdW50KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignYW1vdW50JykpO1xuICB9XG4gIGF0dHJpYnV0ZXMuYW1vdW50ID0gdGhpcy5fdG9YRFJBbW91bnQob3B0cy5hbW91bnQpO1xuICBpZiAob3B0cy5wcmljZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJpY2UgYXJndW1lbnQgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBhdHRyaWJ1dGVzLnByaWNlID0gdGhpcy5fdG9YRFJQcmljZShvcHRzLnByaWNlKTtcbiAgdmFyIGNyZWF0ZVBhc3NpdmVTZWxsT2ZmZXJPcCA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5DcmVhdGVQYXNzaXZlU2VsbE9mZmVyT3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmNyZWF0ZVBhc3NpdmVTZWxsT2ZmZXIoY3JlYXRlUGFzc2l2ZVNlbGxPZmZlck9wKTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.endSponsoringFutureReserves = endSponsoringFutureReserves;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create an \"end sponsoring future reserves\" operation.\n * @function\n * @alias Operation.endSponsoringFutureReserves\n * @param {object} opts Options object\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.endSponsoringFutureReserves();\n *\n */\nfunction endSponsoringFutureReserves() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.endSponsoringFutureReserves();\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2VuZF9zcG9uc29yaW5nX2Z1dHVyZV9yZXNlcnZlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtQ0FBbUM7QUFDbkMsa0NBQWtDLG1CQUFPLENBQUMscUhBQVE7QUFDbEQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2VuZF9zcG9uc29yaW5nX2Z1dHVyZV9yZXNlcnZlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZW5kU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzID0gZW5kU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQ3JlYXRlIGFuIFwiZW5kIHNwb25zb3JpbmcgZnV0dXJlIHJlc2VydmVzXCIgb3BlcmF0aW9uLlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmVuZFNwb25zb3JpbmdGdXR1cmVSZXNlcnZlc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIHNvdXJjZSBhY2NvdW50IGZvciB0aGUgb3BlcmF0aW9uLiBEZWZhdWx0cyB0byB0aGUgdHJhbnNhY3Rpb24ncyBzb3VyY2UgYWNjb3VudC5cbiAqIEByZXR1cm5zIHt4ZHIuT3BlcmF0aW9ufSB4ZHIgb3BlcmF0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG9wID0gT3BlcmF0aW9uLmVuZFNwb25zb3JpbmdGdXR1cmVSZXNlcnZlcygpO1xuICpcbiAqL1xuZnVuY3Rpb24gZW5kU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzKCkge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmVuZFNwb25zb3JpbmdGdXR1cmVSZXNlcnZlcygpO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.extendFootprintTtl = extendFootprintTtl;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Builds an operation to bump the time-to-live (TTL) of the ledger keys. The\n * keys for extension have to be provided in the read-only footprint of\n * the transaction.\n *\n * The only parameter of the operation itself is the new minimum TTL for\n * all the provided entries. If an entry already has a higher TTL, then it\n * will just be skipped.\n *\n * TTL is the number of ledgers from the current ledger (exclusive) until\n * the last ledger the entry is still considered alive (inclusive). Thus\n * the exact ledger until the entries will live will only be determined\n * when transaction has been applied.\n *\n * The footprint has to be specified in the transaction. See\n * {@link TransactionBuilder}'s `opts.sorobanData` parameter, which is a\n * {@link xdr.SorobanTransactionData} instance that contains fee data & resource\n * usage as part of {@link xdr.SorobanResources}.\n *\n * @function\n * @alias Operation.extendFootprintTtl\n *\n * @param {object} opts - object holding operation parameters\n * @param {number} opts.extendTo - the minimum TTL that all the entries in\n *    the read-only footprint will have\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Extend Footprint TTL operation\n *    (xdr.ExtendFootprintTTLOp)\n */\nfunction extendFootprintTtl(opts) {\n  var _opts$extendTo;\n  if (((_opts$extendTo = opts.extendTo) !== null && _opts$extendTo !== void 0 ? _opts$extendTo : -1) <= 0) {\n    throw new RangeError('extendTo has to be positive');\n  }\n  var extendFootprintOp = new _xdr[\"default\"].ExtendFootprintTtlOp({\n    ext: new _xdr[\"default\"].ExtensionPoint(0),\n    extendTo: opts.extendTo\n  });\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.extendFootprintTtl(extendFootprintOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2V4dGVuZF9mb290cHJpbnRfdHRsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDBCQUEwQjtBQUMxQixrQ0FBa0MsbUJBQU8sQ0FBQyxxSEFBUTtBQUNsRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkseUJBQXlCO0FBQzdCLElBQUksa0NBQWtDO0FBQ3RDLHFCQUFxQiwyQkFBMkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2V4dGVuZF9mb290cHJpbnRfdHRsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5leHRlbmRGb290cHJpbnRUdGwgPSBleHRlbmRGb290cHJpbnRUdGw7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBCdWlsZHMgYW4gb3BlcmF0aW9uIHRvIGJ1bXAgdGhlIHRpbWUtdG8tbGl2ZSAoVFRMKSBvZiB0aGUgbGVkZ2VyIGtleXMuIFRoZVxuICoga2V5cyBmb3IgZXh0ZW5zaW9uIGhhdmUgdG8gYmUgcHJvdmlkZWQgaW4gdGhlIHJlYWQtb25seSBmb290cHJpbnQgb2ZcbiAqIHRoZSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBUaGUgb25seSBwYXJhbWV0ZXIgb2YgdGhlIG9wZXJhdGlvbiBpdHNlbGYgaXMgdGhlIG5ldyBtaW5pbXVtIFRUTCBmb3JcbiAqIGFsbCB0aGUgcHJvdmlkZWQgZW50cmllcy4gSWYgYW4gZW50cnkgYWxyZWFkeSBoYXMgYSBoaWdoZXIgVFRMLCB0aGVuIGl0XG4gKiB3aWxsIGp1c3QgYmUgc2tpcHBlZC5cbiAqXG4gKiBUVEwgaXMgdGhlIG51bWJlciBvZiBsZWRnZXJzIGZyb20gdGhlIGN1cnJlbnQgbGVkZ2VyIChleGNsdXNpdmUpIHVudGlsXG4gKiB0aGUgbGFzdCBsZWRnZXIgdGhlIGVudHJ5IGlzIHN0aWxsIGNvbnNpZGVyZWQgYWxpdmUgKGluY2x1c2l2ZSkuIFRodXNcbiAqIHRoZSBleGFjdCBsZWRnZXIgdW50aWwgdGhlIGVudHJpZXMgd2lsbCBsaXZlIHdpbGwgb25seSBiZSBkZXRlcm1pbmVkXG4gKiB3aGVuIHRyYW5zYWN0aW9uIGhhcyBiZWVuIGFwcGxpZWQuXG4gKlxuICogVGhlIGZvb3RwcmludCBoYXMgdG8gYmUgc3BlY2lmaWVkIGluIHRoZSB0cmFuc2FjdGlvbi4gU2VlXG4gKiB7QGxpbmsgVHJhbnNhY3Rpb25CdWlsZGVyfSdzIGBvcHRzLnNvcm9iYW5EYXRhYCBwYXJhbWV0ZXIsIHdoaWNoIGlzIGFcbiAqIHtAbGluayB4ZHIuU29yb2JhblRyYW5zYWN0aW9uRGF0YX0gaW5zdGFuY2UgdGhhdCBjb250YWlucyBmZWUgZGF0YSAmIHJlc291cmNlXG4gKiB1c2FnZSBhcyBwYXJ0IG9mIHtAbGluayB4ZHIuU29yb2JhblJlc291cmNlc30uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmV4dGVuZEZvb3RwcmludFR0bFxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb2JqZWN0IGhvbGRpbmcgb3BlcmF0aW9uIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLmV4dGVuZFRvIC0gdGhlIG1pbmltdW0gVFRMIHRoYXQgYWxsIHRoZSBlbnRyaWVzIGluXG4gKiAgICB0aGUgcmVhZC1vbmx5IGZvb3RwcmludCB3aWxsIGhhdmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gYW4gb3B0aW9uYWwgc291cmNlIGFjY291bnRcbiAqXG4gKiBAcmV0dXJucyB7eGRyLk9wZXJhdGlvbn0gYW4gRXh0ZW5kIEZvb3RwcmludCBUVEwgb3BlcmF0aW9uXG4gKiAgICAoeGRyLkV4dGVuZEZvb3RwcmludFRUTE9wKVxuICovXG5mdW5jdGlvbiBleHRlbmRGb290cHJpbnRUdGwob3B0cykge1xuICB2YXIgX29wdHMkZXh0ZW5kVG87XG4gIGlmICgoKF9vcHRzJGV4dGVuZFRvID0gb3B0cy5leHRlbmRUbykgIT09IG51bGwgJiYgX29wdHMkZXh0ZW5kVG8gIT09IHZvaWQgMCA/IF9vcHRzJGV4dGVuZFRvIDogLTEpIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZXh0ZW5kVG8gaGFzIHRvIGJlIHBvc2l0aXZlJyk7XG4gIH1cbiAgdmFyIGV4dGVuZEZvb3RwcmludE9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkV4dGVuZEZvb3RwcmludFR0bE9wKHtcbiAgICBleHQ6IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5FeHRlbnNpb25Qb2ludCgwKSxcbiAgICBleHRlbmRUbzogb3B0cy5leHRlbmRUb1xuICB9KTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHtcbiAgICBib2R5OiBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmV4dGVuZEZvb3RwcmludFR0bChleHRlbmRGb290cHJpbnRPcClcbiAgfTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/index.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/index.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"accountMerge\", ({\n  enumerable: true,\n  get: function get() {\n    return _account_merge.accountMerge;\n  }\n}));\nObject.defineProperty(exports, \"allowTrust\", ({\n  enumerable: true,\n  get: function get() {\n    return _allow_trust.allowTrust;\n  }\n}));\nObject.defineProperty(exports, \"beginSponsoringFutureReserves\", ({\n  enumerable: true,\n  get: function get() {\n    return _begin_sponsoring_future_reserves.beginSponsoringFutureReserves;\n  }\n}));\nObject.defineProperty(exports, \"bumpSequence\", ({\n  enumerable: true,\n  get: function get() {\n    return _bump_sequence.bumpSequence;\n  }\n}));\nObject.defineProperty(exports, \"changeTrust\", ({\n  enumerable: true,\n  get: function get() {\n    return _change_trust.changeTrust;\n  }\n}));\nObject.defineProperty(exports, \"claimClaimableBalance\", ({\n  enumerable: true,\n  get: function get() {\n    return _claim_claimable_balance.claimClaimableBalance;\n  }\n}));\nObject.defineProperty(exports, \"clawback\", ({\n  enumerable: true,\n  get: function get() {\n    return _clawback.clawback;\n  }\n}));\nObject.defineProperty(exports, \"clawbackClaimableBalance\", ({\n  enumerable: true,\n  get: function get() {\n    return _clawback_claimable_balance.clawbackClaimableBalance;\n  }\n}));\nObject.defineProperty(exports, \"createAccount\", ({\n  enumerable: true,\n  get: function get() {\n    return _create_account.createAccount;\n  }\n}));\nObject.defineProperty(exports, \"createClaimableBalance\", ({\n  enumerable: true,\n  get: function get() {\n    return _create_claimable_balance.createClaimableBalance;\n  }\n}));\nObject.defineProperty(exports, \"createCustomContract\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.createCustomContract;\n  }\n}));\nObject.defineProperty(exports, \"createPassiveSellOffer\", ({\n  enumerable: true,\n  get: function get() {\n    return _create_passive_sell_offer.createPassiveSellOffer;\n  }\n}));\nObject.defineProperty(exports, \"createStellarAssetContract\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.createStellarAssetContract;\n  }\n}));\nObject.defineProperty(exports, \"endSponsoringFutureReserves\", ({\n  enumerable: true,\n  get: function get() {\n    return _end_sponsoring_future_reserves.endSponsoringFutureReserves;\n  }\n}));\nObject.defineProperty(exports, \"extendFootprintTtl\", ({\n  enumerable: true,\n  get: function get() {\n    return _extend_footprint_ttl.extendFootprintTtl;\n  }\n}));\nObject.defineProperty(exports, \"inflation\", ({\n  enumerable: true,\n  get: function get() {\n    return _inflation.inflation;\n  }\n}));\nObject.defineProperty(exports, \"invokeContractFunction\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.invokeContractFunction;\n  }\n}));\nObject.defineProperty(exports, \"invokeHostFunction\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.invokeHostFunction;\n  }\n}));\nObject.defineProperty(exports, \"liquidityPoolDeposit\", ({\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_deposit.liquidityPoolDeposit;\n  }\n}));\nObject.defineProperty(exports, \"liquidityPoolWithdraw\", ({\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_withdraw.liquidityPoolWithdraw;\n  }\n}));\nObject.defineProperty(exports, \"manageBuyOffer\", ({\n  enumerable: true,\n  get: function get() {\n    return _manage_buy_offer.manageBuyOffer;\n  }\n}));\nObject.defineProperty(exports, \"manageData\", ({\n  enumerable: true,\n  get: function get() {\n    return _manage_data.manageData;\n  }\n}));\nObject.defineProperty(exports, \"manageSellOffer\", ({\n  enumerable: true,\n  get: function get() {\n    return _manage_sell_offer.manageSellOffer;\n  }\n}));\nObject.defineProperty(exports, \"pathPaymentStrictReceive\", ({\n  enumerable: true,\n  get: function get() {\n    return _path_payment_strict_receive.pathPaymentStrictReceive;\n  }\n}));\nObject.defineProperty(exports, \"pathPaymentStrictSend\", ({\n  enumerable: true,\n  get: function get() {\n    return _path_payment_strict_send.pathPaymentStrictSend;\n  }\n}));\nObject.defineProperty(exports, \"payment\", ({\n  enumerable: true,\n  get: function get() {\n    return _payment.payment;\n  }\n}));\nObject.defineProperty(exports, \"restoreFootprint\", ({\n  enumerable: true,\n  get: function get() {\n    return _restore_footprint.restoreFootprint;\n  }\n}));\nObject.defineProperty(exports, \"revokeAccountSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeAccountSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeClaimableBalanceSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeClaimableBalanceSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeDataSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeDataSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeLiquidityPoolSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeLiquidityPoolSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeOfferSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeOfferSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeSignerSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeSignerSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeTrustlineSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeTrustlineSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"setOptions\", ({\n  enumerable: true,\n  get: function get() {\n    return _set_options.setOptions;\n  }\n}));\nObject.defineProperty(exports, \"setTrustLineFlags\", ({\n  enumerable: true,\n  get: function get() {\n    return _set_trustline_flags.setTrustLineFlags;\n  }\n}));\nObject.defineProperty(exports, \"uploadContractWasm\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.uploadContractWasm;\n  }\n}));\nvar _manage_sell_offer = __webpack_require__(/*! ./manage_sell_offer */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js\");\nvar _create_passive_sell_offer = __webpack_require__(/*! ./create_passive_sell_offer */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js\");\nvar _account_merge = __webpack_require__(/*! ./account_merge */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/account_merge.js\");\nvar _allow_trust = __webpack_require__(/*! ./allow_trust */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/allow_trust.js\");\nvar _bump_sequence = __webpack_require__(/*! ./bump_sequence */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js\");\nvar _change_trust = __webpack_require__(/*! ./change_trust */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/change_trust.js\");\nvar _create_account = __webpack_require__(/*! ./create_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_account.js\");\nvar _create_claimable_balance = __webpack_require__(/*! ./create_claimable_balance */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js\");\nvar _claim_claimable_balance = __webpack_require__(/*! ./claim_claimable_balance */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js\");\nvar _clawback_claimable_balance = __webpack_require__(/*! ./clawback_claimable_balance */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js\");\nvar _inflation = __webpack_require__(/*! ./inflation */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/inflation.js\");\nvar _manage_data = __webpack_require__(/*! ./manage_data */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_data.js\");\nvar _manage_buy_offer = __webpack_require__(/*! ./manage_buy_offer */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js\");\nvar _path_payment_strict_receive = __webpack_require__(/*! ./path_payment_strict_receive */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js\");\nvar _path_payment_strict_send = __webpack_require__(/*! ./path_payment_strict_send */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js\");\nvar _payment = __webpack_require__(/*! ./payment */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/payment.js\");\nvar _set_options = __webpack_require__(/*! ./set_options */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/set_options.js\");\nvar _begin_sponsoring_future_reserves = __webpack_require__(/*! ./begin_sponsoring_future_reserves */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js\");\nvar _end_sponsoring_future_reserves = __webpack_require__(/*! ./end_sponsoring_future_reserves */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js\");\nvar _revoke_sponsorship = __webpack_require__(/*! ./revoke_sponsorship */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js\");\nvar _clawback = __webpack_require__(/*! ./clawback */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/clawback.js\");\nvar _set_trustline_flags = __webpack_require__(/*! ./set_trustline_flags */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js\");\nvar _liquidity_pool_deposit = __webpack_require__(/*! ./liquidity_pool_deposit */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js\");\nvar _liquidity_pool_withdraw = __webpack_require__(/*! ./liquidity_pool_withdraw */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js\");\nvar _invoke_host_function = __webpack_require__(/*! ./invoke_host_function */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js\");\nvar _extend_footprint_ttl = __webpack_require__(/*! ./extend_footprint_ttl */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js\");\nvar _restore_footprint = __webpack_require__(/*! ./restore_footprint */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/inflation.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/inflation.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.inflation = inflation;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * This operation generates the inflation.\n * @function\n * @alias Operation.inflation\n * @param {object} [opts] Options object\n * @param {string} [opts.source] - The optional source account.\n * @returns {xdr.InflationOp} Inflation operation\n */\nfunction inflation() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.inflation();\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2luZmxhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixpQkFBaUI7QUFDakIsa0NBQWtDLG1CQUFPLENBQUMscUhBQVE7QUFDbEQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2luZmxhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5mbGF0aW9uID0gaW5mbGF0aW9uO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogVGhpcyBvcGVyYXRpb24gZ2VuZXJhdGVzIHRoZSBpbmZsYXRpb24uXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24uaW5mbGF0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdHNdIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBvcHRpb25hbCBzb3VyY2UgYWNjb3VudC5cbiAqIEByZXR1cm5zIHt4ZHIuSW5mbGF0aW9uT3B9IEluZmxhdGlvbiBvcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gaW5mbGF0aW9uKCkge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmluZmxhdGlvbigpO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/inflation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createCustomContract = createCustomContract;\nexports.createStellarAssetContract = createStellarAssetContract;\nexports.invokeContractFunction = invokeContractFunction;\nexports.invokeHostFunction = invokeHostFunction;\nexports.uploadContractWasm = uploadContractWasm;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _address = __webpack_require__(/*! ../address */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/address.js\");\nvar _asset = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n/**\n * Invokes a single smart contract host function.\n *\n * @function\n * @alias Operation.invokeHostFunction\n *\n * @param {object} opts - options object\n * @param {xdr.HostFunction} opts.func - host function to execute (with its\n *    wrapped parameters)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - list outlining the\n *    tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#function\n * @see Operation.invokeContractFunction\n * @see Operation.createCustomContract\n * @see Operation.createStellarAssetContract\n * @see Operation.uploadContractWasm\n * @see Contract.call\n */\nfunction invokeHostFunction(opts) {\n  if (!opts.func) {\n    throw new TypeError(\"host function invocation ('func') required (got \".concat(JSON.stringify(opts), \")\"));\n  }\n  var invokeHostFunctionOp = new _xdr[\"default\"].InvokeHostFunctionOp({\n    hostFunction: opts.func,\n    auth: opts.auth || []\n  });\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.invokeHostFunction(invokeHostFunctionOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Returns an operation that invokes a contract function.\n *\n * @function\n * @alias Operation.invokeContractFunction\n *\n * @param {any}         opts - the set of parameters\n * @param {string}      opts.contract - a strkey-fied contract address (`C...`)\n * @param {string}      opts.function - the name of the contract fn to invoke\n * @param {xdr.ScVal[]} opts.args - parameters to pass to the function\n *    invocation (try {@link nativeToScVal} or {@link ScInt} to make building\n *    these easier)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see Operation.invokeHostFunction\n * @see Contract.call\n * @see Address\n */\nfunction invokeContractFunction(opts) {\n  var c = new _address.Address(opts.contract);\n  if (c._type !== 'contract') {\n    throw new TypeError(\"expected contract strkey instance, got \".concat(c));\n  }\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeInvokeContract(new _xdr[\"default\"].InvokeContractArgs({\n      contractAddress: c.toScAddress(),\n      functionName: opts[\"function\"],\n      args: opts.args\n    }))\n  });\n}\n\n/**\n * Returns an operation that creates a custom WASM contract and atomically\n * invokes its constructor.\n *\n * @function\n * @alias Operation.createCustomContract\n *\n * @param {any}     opts - the set of parameters\n * @param {Address} opts.address - the contract uploader address\n * @param {Uint8Array|Buffer}  opts.wasmHash - the SHA-256 hash of the contract\n *    WASM you're uploading (see {@link hash} and\n *    {@link Operation.uploadContractWasm})\n * @param {xdr.ScVal[]} [opts.constructorArgs] - the optional parameters to pass\n *    to the constructor of this contract (see {@link nativeToScVal} for ways to\n *    easily create these parameters from native JS values)\n * @param {Uint8Array|Buffer} [opts.salt] - an optional, 32-byte salt to\n *    distinguish deployment instances of the same wasm from the same user (if\n *    omitted, one will be generated for you)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see\n * https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#function\n */\nfunction createCustomContract(opts) {\n  var _opts$constructorArgs;\n  var salt = Buffer.from(opts.salt || getSalty());\n  if (!opts.wasmHash || opts.wasmHash.length !== 32) {\n    throw new TypeError(\"expected hash(contract WASM) in 'opts.wasmHash', got \".concat(opts.wasmHash));\n  }\n  if (salt.length !== 32) {\n    throw new TypeError(\"expected 32-byte salt in 'opts.salt', got \".concat(opts.wasmHash));\n  }\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeCreateContractV2(new _xdr[\"default\"].CreateContractArgsV2({\n      executable: _xdr[\"default\"].ContractExecutable.contractExecutableWasm(Buffer.from(opts.wasmHash)),\n      contractIdPreimage: _xdr[\"default\"].ContractIdPreimage.contractIdPreimageFromAddress(new _xdr[\"default\"].ContractIdPreimageFromAddress({\n        address: opts.address.toScAddress(),\n        salt: salt\n      })),\n      constructorArgs: (_opts$constructorArgs = opts.constructorArgs) !== null && _opts$constructorArgs !== void 0 ? _opts$constructorArgs : []\n    }))\n  });\n}\n\n/**\n * Returns an operation that wraps a Stellar asset into a token contract.\n *\n * @function\n * @alias Operation.createStellarAssetContract\n *\n * @param {any}          opts - the set of parameters\n * @param {Asset|string} opts.asset - the Stellar asset to wrap, either as an\n *    {@link Asset} object or in canonical form (SEP-11, `code:issuer`)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see https://stellar.org/protocol/sep-11#alphanum4-alphanum12\n * @see\n * https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions\n * @see\n * https://soroban.stellar.org/docs/advanced-tutorials/stellar-asset-contract\n * @see Operation.invokeHostFunction\n */\nfunction createStellarAssetContract(opts) {\n  var asset = opts.asset;\n  if (typeof asset === 'string') {\n    var _asset$split = asset.split(':'),\n      _asset$split2 = _slicedToArray(_asset$split, 2),\n      code = _asset$split2[0],\n      issuer = _asset$split2[1];\n    asset = new _asset.Asset(code, issuer); // handles 'xlm' by default\n  }\n  if (!(asset instanceof _asset.Asset)) {\n    throw new TypeError(\"expected Asset in 'opts.asset', got \".concat(asset));\n  }\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeCreateContract(new _xdr[\"default\"].CreateContractArgs({\n      executable: _xdr[\"default\"].ContractExecutable.contractExecutableStellarAsset(),\n      contractIdPreimage: _xdr[\"default\"].ContractIdPreimage.contractIdPreimageFromAsset(asset.toXDRObject())\n    }))\n  });\n}\n\n/**\n * Returns an operation that uploads WASM for a contract.\n *\n * @function\n * @alias Operation.uploadContractWasm\n *\n * @param {any}               opts - the set of parameters\n * @param {Uint8Array|Buffer} opts.wasm - a WASM blob to upload to the ledger\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see\n * https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#function\n */\nfunction uploadContractWasm(opts) {\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeUploadContractWasm(Buffer.from(opts.wasm) // coalesce so we can drop `Buffer` someday\n    )\n  });\n}\n\n/** @returns {Buffer} a random 256-bit \"salt\" value. */\nfunction getSalty() {\n  return _keypair.Keypair.random().xdrPublicKey().value(); // ed25519 is 256 bits, too\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.liquidityPoolDeposit = liquidityPoolDeposit;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a liquidity pool deposit operation.\n *\n * @function\n * @alias Operation.liquidityPoolDeposit\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-deposit\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.maxAmountA - Maximum amount of first asset to deposit.\n * @param {string} opts.maxAmountB - Maximum amount of second asset to deposit.\n * @param {number|string|BigNumber|Object} opts.minPrice -  Minimum depositA/depositB price.\n * @param {number} opts.minPrice.n - If `opts.minPrice` is an object: the price numerator\n * @param {number} opts.minPrice.d - If `opts.minPrice` is an object: the price denominator\n * @param {number|string|BigNumber|Object} opts.maxPrice -  Maximum depositA/depositB price.\n * @param {number} opts.maxPrice.n - If `opts.maxPrice` is an object: the price numerator\n * @param {number} opts.maxPrice.d - If `opts.maxPrice` is an object: the price denominator\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} The resulting operation (xdr.LiquidityPoolDepositOp).\n */\nfunction liquidityPoolDeposit() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var liquidityPoolId = opts.liquidityPoolId,\n    maxAmountA = opts.maxAmountA,\n    maxAmountB = opts.maxAmountB,\n    minPrice = opts.minPrice,\n    maxPrice = opts.maxPrice;\n  var attributes = {};\n  if (!liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n  attributes.liquidityPoolId = _xdr[\"default\"].PoolId.fromXDR(liquidityPoolId, 'hex');\n  if (!this.isValidAmount(maxAmountA, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('maxAmountA'));\n  }\n  attributes.maxAmountA = this._toXDRAmount(maxAmountA);\n  if (!this.isValidAmount(maxAmountB, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('maxAmountB'));\n  }\n  attributes.maxAmountB = this._toXDRAmount(maxAmountB);\n  if (minPrice === undefined) {\n    throw new TypeError('minPrice argument is required');\n  }\n  attributes.minPrice = this._toXDRPrice(minPrice);\n  if (maxPrice === undefined) {\n    throw new TypeError('maxPrice argument is required');\n  }\n  attributes.maxPrice = this._toXDRPrice(maxPrice);\n  var liquidityPoolDepositOp = new _xdr[\"default\"].LiquidityPoolDepositOp(attributes);\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.liquidityPoolDeposit(liquidityPoolDepositOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2xpcXVpZGl0eV9wb29sX2RlcG9zaXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsNEJBQTRCO0FBQzVCLGtDQUFrQyxtQkFBTyxDQUFDLHFIQUFRO0FBQ2xELHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxnQ0FBZ0M7QUFDM0MsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLGdDQUFnQztBQUMzQyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvb3BlcmF0aW9ucy9saXF1aWRpdHlfcG9vbF9kZXBvc2l0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5saXF1aWRpdHlQb29sRGVwb3NpdCA9IGxpcXVpZGl0eVBvb2xEZXBvc2l0O1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQ3JlYXRlcyBhIGxpcXVpZGl0eSBwb29sIGRlcG9zaXQgb3BlcmF0aW9uLlxuICpcbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5saXF1aWRpdHlQb29sRGVwb3NpdFxuICogQHNlZSBodHRwczovL2RldmVsb3BlcnMuc3RlbGxhci5vcmcvZG9jcy9zdGFydC9saXN0LW9mLW9wZXJhdGlvbnMvI2xpcXVpZGl0eS1wb29sLWRlcG9zaXRcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5saXF1aWRpdHlQb29sSWQgLSBUaGUgbGlxdWlkaXR5IHBvb2wgSUQuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5tYXhBbW91bnRBIC0gTWF4aW11bSBhbW91bnQgb2YgZmlyc3QgYXNzZXQgdG8gZGVwb3NpdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm1heEFtb3VudEIgLSBNYXhpbXVtIGFtb3VudCBvZiBzZWNvbmQgYXNzZXQgdG8gZGVwb3NpdC5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ8T2JqZWN0fSBvcHRzLm1pblByaWNlIC0gIE1pbmltdW0gZGVwb3NpdEEvZGVwb3NpdEIgcHJpY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy5taW5QcmljZS5uIC0gSWYgYG9wdHMubWluUHJpY2VgIGlzIGFuIG9iamVjdDogdGhlIHByaWNlIG51bWVyYXRvclxuICogQHBhcmFtIHtudW1iZXJ9IG9wdHMubWluUHJpY2UuZCAtIElmIGBvcHRzLm1pblByaWNlYCBpcyBhbiBvYmplY3Q6IHRoZSBwcmljZSBkZW5vbWluYXRvclxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcnxPYmplY3R9IG9wdHMubWF4UHJpY2UgLSAgTWF4aW11bSBkZXBvc2l0QS9kZXBvc2l0QiBwcmljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLm1heFByaWNlLm4gLSBJZiBgb3B0cy5tYXhQcmljZWAgaXMgYW4gb2JqZWN0OiB0aGUgcHJpY2UgbnVtZXJhdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy5tYXhQcmljZS5kIC0gSWYgYG9wdHMubWF4UHJpY2VgIGlzIGFuIG9iamVjdDogdGhlIHByaWNlIGRlbm9taW5hdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIG9wZXJhdGlvbi4gRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKlxuICogQHJldHVybnMge3hkci5PcGVyYXRpb259IFRoZSByZXN1bHRpbmcgb3BlcmF0aW9uICh4ZHIuTGlxdWlkaXR5UG9vbERlcG9zaXRPcCkuXG4gKi9cbmZ1bmN0aW9uIGxpcXVpZGl0eVBvb2xEZXBvc2l0KCkge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBsaXF1aWRpdHlQb29sSWQgPSBvcHRzLmxpcXVpZGl0eVBvb2xJZCxcbiAgICBtYXhBbW91bnRBID0gb3B0cy5tYXhBbW91bnRBLFxuICAgIG1heEFtb3VudEIgPSBvcHRzLm1heEFtb3VudEIsXG4gICAgbWluUHJpY2UgPSBvcHRzLm1pblByaWNlLFxuICAgIG1heFByaWNlID0gb3B0cy5tYXhQcmljZTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgaWYgKCFsaXF1aWRpdHlQb29sSWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdsaXF1aWRpdHlQb29sSWQgYXJndW1lbnQgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBhdHRyaWJ1dGVzLmxpcXVpZGl0eVBvb2xJZCA9IF94ZHJbXCJkZWZhdWx0XCJdLlBvb2xJZC5mcm9tWERSKGxpcXVpZGl0eVBvb2xJZCwgJ2hleCcpO1xuICBpZiAoIXRoaXMuaXNWYWxpZEFtb3VudChtYXhBbW91bnRBLCB0cnVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignbWF4QW1vdW50QScpKTtcbiAgfVxuICBhdHRyaWJ1dGVzLm1heEFtb3VudEEgPSB0aGlzLl90b1hEUkFtb3VudChtYXhBbW91bnRBKTtcbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQobWF4QW1vdW50QiwgdHJ1ZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ21heEFtb3VudEInKSk7XG4gIH1cbiAgYXR0cmlidXRlcy5tYXhBbW91bnRCID0gdGhpcy5fdG9YRFJBbW91bnQobWF4QW1vdW50Qik7XG4gIGlmIChtaW5QcmljZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWluUHJpY2UgYXJndW1lbnQgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBhdHRyaWJ1dGVzLm1pblByaWNlID0gdGhpcy5fdG9YRFJQcmljZShtaW5QcmljZSk7XG4gIGlmIChtYXhQcmljZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4UHJpY2UgYXJndW1lbnQgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBhdHRyaWJ1dGVzLm1heFByaWNlID0gdGhpcy5fdG9YRFJQcmljZShtYXhQcmljZSk7XG4gIHZhciBsaXF1aWRpdHlQb29sRGVwb3NpdE9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkxpcXVpZGl0eVBvb2xEZXBvc2l0T3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7XG4gICAgYm9keTogX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5saXF1aWRpdHlQb29sRGVwb3NpdChsaXF1aWRpdHlQb29sRGVwb3NpdE9wKVxuICB9O1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.liquidityPoolWithdraw = liquidityPoolWithdraw;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a liquidity pool withdraw operation.\n *\n * @function\n * @alias Operation.liquidityPoolWithdraw\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-withdraw\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.amount - Amount of pool shares to withdraw.\n * @param {string} opts.minAmountA - Minimum amount of first asset to withdraw.\n * @param {string} opts.minAmountB - Minimum amount of second asset to withdraw.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting operation (xdr.LiquidityPoolWithdrawOp).\n */\nfunction liquidityPoolWithdraw() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n  if (!opts.liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n  attributes.liquidityPoolId = _xdr[\"default\"].PoolId.fromXDR(opts.liquidityPoolId, 'hex');\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (!this.isValidAmount(opts.minAmountA, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('minAmountA'));\n  }\n  attributes.minAmountA = this._toXDRAmount(opts.minAmountA);\n  if (!this.isValidAmount(opts.minAmountB, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('minAmountB'));\n  }\n  attributes.minAmountB = this._toXDRAmount(opts.minAmountB);\n  var liquidityPoolWithdrawOp = new _xdr[\"default\"].LiquidityPoolWithdrawOp(attributes);\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.liquidityPoolWithdraw(liquidityPoolWithdrawOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2xpcXVpZGl0eV9wb29sX3dpdGhkcmF3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDZCQUE2QjtBQUM3QixrQ0FBa0MsbUJBQU8sQ0FBQyxxSEFBUTtBQUNsRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvb3BlcmF0aW9ucy9saXF1aWRpdHlfcG9vbF93aXRoZHJhdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubGlxdWlkaXR5UG9vbFdpdGhkcmF3ID0gbGlxdWlkaXR5UG9vbFdpdGhkcmF3O1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQ3JlYXRlcyBhIGxpcXVpZGl0eSBwb29sIHdpdGhkcmF3IG9wZXJhdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24ubGlxdWlkaXR5UG9vbFdpdGhkcmF3XG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5zdGVsbGFyLm9yZy9kb2NzL3N0YXJ0L2xpc3Qtb2Ytb3BlcmF0aW9ucy8jbGlxdWlkaXR5LXBvb2wtd2l0aGRyYXdcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5saXF1aWRpdHlQb29sSWQgLSBUaGUgbGlxdWlkaXR5IHBvb2wgSUQuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5hbW91bnQgLSBBbW91bnQgb2YgcG9vbCBzaGFyZXMgdG8gd2l0aGRyYXcuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5taW5BbW91bnRBIC0gTWluaW11bSBhbW91bnQgb2YgZmlyc3QgYXNzZXQgdG8gd2l0aGRyYXcuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5taW5BbW91bnRCIC0gTWluaW11bSBhbW91bnQgb2Ygc2Vjb25kIGFzc2V0IHRvIHdpdGhkcmF3LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBvcGVyYXRpb24uIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICpcbiAqIEByZXR1cm5zIHt4ZHIuT3BlcmF0aW9ufSAgIFRoZSByZXN1bHRpbmcgb3BlcmF0aW9uICh4ZHIuTGlxdWlkaXR5UG9vbFdpdGhkcmF3T3ApLlxuICovXG5mdW5jdGlvbiBsaXF1aWRpdHlQb29sV2l0aGRyYXcoKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgaWYgKCFvcHRzLmxpcXVpZGl0eVBvb2xJZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xpcXVpZGl0eVBvb2xJZCBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMubGlxdWlkaXR5UG9vbElkID0gX3hkcltcImRlZmF1bHRcIl0uUG9vbElkLmZyb21YRFIob3B0cy5saXF1aWRpdHlQb29sSWQsICdoZXgnKTtcbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5hbW91bnQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdhbW91bnQnKSk7XG4gIH1cbiAgYXR0cmlidXRlcy5hbW91bnQgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLmFtb3VudCk7XG4gIGlmICghdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMubWluQW1vdW50QSwgdHJ1ZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ21pbkFtb3VudEEnKSk7XG4gIH1cbiAgYXR0cmlidXRlcy5taW5BbW91bnRBID0gdGhpcy5fdG9YRFJBbW91bnQob3B0cy5taW5BbW91bnRBKTtcbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5taW5BbW91bnRCLCB0cnVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignbWluQW1vdW50QicpKTtcbiAgfVxuICBhdHRyaWJ1dGVzLm1pbkFtb3VudEIgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLm1pbkFtb3VudEIpO1xuICB2YXIgbGlxdWlkaXR5UG9vbFdpdGhkcmF3T3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uTGlxdWlkaXR5UG9vbFdpdGhkcmF3T3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7XG4gICAgYm9keTogX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5saXF1aWRpdHlQb29sV2l0aGRyYXcobGlxdWlkaXR5UG9vbFdpdGhkcmF3T3ApXG4gIH07XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.manageBuyOffer = manageBuyOffer;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a XDR ManageBuyOfferOp. A \"manage buy offer\" operation creates, updates, or\n * deletes a buy offer.\n * @function\n * @alias Operation.manageBuyOffer\n * @param {object} opts Options object\n * @param {Asset} opts.selling - What you're selling.\n * @param {Asset} opts.buying - What you're buying.\n * @param {string} opts.buyAmount - The total amount you're buying. If 0, deletes the offer.\n * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `buying` in terms of `selling`.\n * @param {number} opts.price.n - If `opts.price` is an object: the price numerator\n * @param {number} opts.price.d - If `opts.price` is an object: the price denominator\n * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.\n * @returns {xdr.ManageBuyOfferOp} Manage Buy Offer operation\n */\nfunction manageBuyOffer(opts) {\n  var attributes = {};\n  attributes.selling = opts.selling.toXDRObject();\n  attributes.buying = opts.buying.toXDRObject();\n  if (!this.isValidAmount(opts.buyAmount, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('buyAmount'));\n  }\n  attributes.buyAmount = this._toXDRAmount(opts.buyAmount);\n  if (opts.price === undefined) {\n    throw new TypeError('price argument is required');\n  }\n  attributes.price = this._toXDRPrice(opts.price);\n  if (opts.offerId !== undefined) {\n    opts.offerId = opts.offerId.toString();\n  } else {\n    opts.offerId = '0';\n  }\n  attributes.offerId = _jsXdr.Hyper.fromString(opts.offerId);\n  var manageBuyOfferOp = new _xdr[\"default\"].ManageBuyOfferOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.manageBuyOffer(manageBuyOfferOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL21hbmFnZV9idXlfb2ZmZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysc0JBQXNCO0FBQ3RCLGFBQWEsbUJBQU8sQ0FBQyxtSEFBaUI7QUFDdEMsa0NBQWtDLG1CQUFPLENBQUMscUhBQVE7QUFDbEQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZ0NBQWdDO0FBQzNDLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixZQUFZLE9BQU87QUFDbkIsYUFBYSxzQkFBc0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL21hbmFnZV9idXlfb2ZmZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1hbmFnZUJ1eU9mZmVyID0gbWFuYWdlQnV5T2ZmZXI7XG52YXIgX2pzWGRyID0gcmVxdWlyZShcIkBzdGVsbGFyL2pzLXhkclwiKTtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIFJldHVybnMgYSBYRFIgTWFuYWdlQnV5T2ZmZXJPcC4gQSBcIm1hbmFnZSBidXkgb2ZmZXJcIiBvcGVyYXRpb24gY3JlYXRlcywgdXBkYXRlcywgb3JcbiAqIGRlbGV0ZXMgYSBidXkgb2ZmZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24ubWFuYWdlQnV5T2ZmZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge0Fzc2V0fSBvcHRzLnNlbGxpbmcgLSBXaGF0IHlvdSdyZSBzZWxsaW5nLlxuICogQHBhcmFtIHtBc3NldH0gb3B0cy5idXlpbmcgLSBXaGF0IHlvdSdyZSBidXlpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5idXlBbW91bnQgLSBUaGUgdG90YWwgYW1vdW50IHlvdSdyZSBidXlpbmcuIElmIDAsIGRlbGV0ZXMgdGhlIG9mZmVyLlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcnxPYmplY3R9IG9wdHMucHJpY2UgLSBQcmljZSBvZiAxIHVuaXQgb2YgYGJ1eWluZ2AgaW4gdGVybXMgb2YgYHNlbGxpbmdgLlxuICogQHBhcmFtIHtudW1iZXJ9IG9wdHMucHJpY2UubiAtIElmIGBvcHRzLnByaWNlYCBpcyBhbiBvYmplY3Q6IHRoZSBwcmljZSBudW1lcmF0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnByaWNlLmQgLSBJZiBgb3B0cy5wcmljZWAgaXMgYW4gb2JqZWN0OiB0aGUgcHJpY2UgZGVub21pbmF0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW29wdHMub2ZmZXJJZCBdIC0gSWYgYDBgLCB3aWxsIGNyZWF0ZSBhIG5ldyBvZmZlciAoZGVmYXVsdCkuIE90aGVyd2lzZSwgZWRpdHMgYW4gZXhpc2l0aW5nIG9mZmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgKGRlZmF1bHRzIHRvIHRyYW5zYWN0aW9uIHNvdXJjZSkuXG4gKiBAdGhyb3dzIHtFcnJvcn0gVGhyb3dzIGBFcnJvcmAgd2hlbiB0aGUgYmVzdCByYXRpb25hbCBhcHByb3hpbWF0aW9uIG9mIGBwcmljZWAgY2Fubm90IGJlIGZvdW5kLlxuICogQHJldHVybnMge3hkci5NYW5hZ2VCdXlPZmZlck9wfSBNYW5hZ2UgQnV5IE9mZmVyIG9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBtYW5hZ2VCdXlPZmZlcihvcHRzKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGF0dHJpYnV0ZXMuc2VsbGluZyA9IG9wdHMuc2VsbGluZy50b1hEUk9iamVjdCgpO1xuICBhdHRyaWJ1dGVzLmJ1eWluZyA9IG9wdHMuYnV5aW5nLnRvWERST2JqZWN0KCk7XG4gIGlmICghdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMuYnV5QW1vdW50LCB0cnVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignYnV5QW1vdW50JykpO1xuICB9XG4gIGF0dHJpYnV0ZXMuYnV5QW1vdW50ID0gdGhpcy5fdG9YRFJBbW91bnQob3B0cy5idXlBbW91bnQpO1xuICBpZiAob3B0cy5wcmljZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJpY2UgYXJndW1lbnQgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBhdHRyaWJ1dGVzLnByaWNlID0gdGhpcy5fdG9YRFJQcmljZShvcHRzLnByaWNlKTtcbiAgaWYgKG9wdHMub2ZmZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgb3B0cy5vZmZlcklkID0gb3B0cy5vZmZlcklkLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgb3B0cy5vZmZlcklkID0gJzAnO1xuICB9XG4gIGF0dHJpYnV0ZXMub2ZmZXJJZCA9IF9qc1hkci5IeXBlci5mcm9tU3RyaW5nKG9wdHMub2ZmZXJJZCk7XG4gIHZhciBtYW5hZ2VCdXlPZmZlck9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk1hbmFnZUJ1eU9mZmVyT3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5Lm1hbmFnZUJ1eU9mZmVyKG1hbmFnZUJ1eU9mZmVyT3ApO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_data.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_data.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.manageData = manageData;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * This operation adds data entry to the ledger.\n * @function\n * @alias Operation.manageData\n * @param {object} opts Options object\n * @param {string} opts.name - The name of the data entry.\n * @param {string|Buffer} opts.value - The value of the data entry.\n * @param {string} [opts.source] - The optional source account.\n * @returns {xdr.ManageDataOp} Manage Data operation\n */\nfunction manageData(opts) {\n  var attributes = {};\n  if (!(typeof opts.name === 'string' && opts.name.length <= 64)) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n  attributes.dataName = opts.name;\n  if (typeof opts.value !== 'string' && !Buffer.isBuffer(opts.value) && opts.value !== null) {\n    throw new Error('value must be a string, Buffer or null');\n  }\n  if (typeof opts.value === 'string') {\n    attributes.dataValue = Buffer.from(opts.value);\n  } else {\n    attributes.dataValue = opts.value;\n  }\n  if (attributes.dataValue !== null && attributes.dataValue.length > 64) {\n    throw new Error('value cannot be longer that 64 bytes');\n  }\n  var manageDataOp = new _xdr[\"default\"].ManageDataOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.manageData(manageDataOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL21hbmFnZV9kYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixrQ0FBa0MsbUJBQU8sQ0FBQyxxSEFBUTtBQUNsRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL29wZXJhdGlvbnMvbWFuYWdlX2RhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1hbmFnZURhdGEgPSBtYW5hZ2VEYXRhO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogVGhpcyBvcGVyYXRpb24gYWRkcyBkYXRhIGVudHJ5IHRvIHRoZSBsZWRnZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24ubWFuYWdlRGF0YVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZGF0YSBlbnRyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gb3B0cy52YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgZGF0YSBlbnRyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIG9wdGlvbmFsIHNvdXJjZSBhY2NvdW50LlxuICogQHJldHVybnMge3hkci5NYW5hZ2VEYXRhT3B9IE1hbmFnZSBEYXRhIG9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBtYW5hZ2VEYXRhKG9wdHMpIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgaWYgKCEodHlwZW9mIG9wdHMubmFtZSA9PT0gJ3N0cmluZycgJiYgb3B0cy5uYW1lLmxlbmd0aCA8PSA2NCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25hbWUgbXVzdCBiZSBhIHN0cmluZywgdXAgdG8gNjQgY2hhcmFjdGVycycpO1xuICB9XG4gIGF0dHJpYnV0ZXMuZGF0YU5hbWUgPSBvcHRzLm5hbWU7XG4gIGlmICh0eXBlb2Ygb3B0cy52YWx1ZSAhPT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0J1ZmZlcihvcHRzLnZhbHVlKSAmJiBvcHRzLnZhbHVlICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIgb3IgbnVsbCcpO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0cy52YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBhdHRyaWJ1dGVzLmRhdGFWYWx1ZSA9IEJ1ZmZlci5mcm9tKG9wdHMudmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGF0dHJpYnV0ZXMuZGF0YVZhbHVlID0gb3B0cy52YWx1ZTtcbiAgfVxuICBpZiAoYXR0cmlidXRlcy5kYXRhVmFsdWUgIT09IG51bGwgJiYgYXR0cmlidXRlcy5kYXRhVmFsdWUubGVuZ3RoID4gNjQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIGNhbm5vdCBiZSBsb25nZXIgdGhhdCA2NCBieXRlcycpO1xuICB9XG4gIHZhciBtYW5hZ2VEYXRhT3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uTWFuYWdlRGF0YU9wKGF0dHJpYnV0ZXMpO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge307XG4gIG9wQXR0cmlidXRlcy5ib2R5ID0gX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5tYW5hZ2VEYXRhKG1hbmFnZURhdGFPcCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.manageSellOffer = manageSellOffer;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a XDR ManageSellOfferOp. A \"manage sell offer\" operation creates, updates, or\n * deletes an offer.\n * @function\n * @alias Operation.manageSellOffer\n * @param {object} opts Options object\n * @param {Asset} opts.selling - What you're selling.\n * @param {Asset} opts.buying - What you're buying.\n * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.\n * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.\n * @param {number} opts.price.n - If `opts.price` is an object: the price numerator\n * @param {number} opts.price.d - If `opts.price` is an object: the price denominator\n * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.\n * @returns {xdr.ManageSellOfferOp} Manage Sell Offer operation\n */\nfunction manageSellOffer(opts) {\n  var attributes = {};\n  attributes.selling = opts.selling.toXDRObject();\n  attributes.buying = opts.buying.toXDRObject();\n  if (!this.isValidAmount(opts.amount, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (opts.price === undefined) {\n    throw new TypeError('price argument is required');\n  }\n  attributes.price = this._toXDRPrice(opts.price);\n  if (opts.offerId !== undefined) {\n    opts.offerId = opts.offerId.toString();\n  } else {\n    opts.offerId = '0';\n  }\n  attributes.offerId = _jsXdr.Hyper.fromString(opts.offerId);\n  var manageSellOfferOp = new _xdr[\"default\"].ManageSellOfferOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.manageSellOffer(manageSellOfferOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL21hbmFnZV9zZWxsX29mZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHVCQUF1QjtBQUN2QixhQUFhLG1CQUFPLENBQUMsbUhBQWlCO0FBQ3RDLGtDQUFrQyxtQkFBTyxDQUFDLHFIQUFRO0FBQ2xELHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLGdDQUFnQztBQUMzQyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZUFBZTtBQUMxQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CLGFBQWEsdUJBQXVCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvb3BlcmF0aW9ucy9tYW5hZ2Vfc2VsbF9vZmZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWFuYWdlU2VsbE9mZmVyID0gbWFuYWdlU2VsbE9mZmVyO1xudmFyIF9qc1hkciA9IHJlcXVpcmUoXCJAc3RlbGxhci9qcy14ZHJcIik7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBSZXR1cm5zIGEgWERSIE1hbmFnZVNlbGxPZmZlck9wLiBBIFwibWFuYWdlIHNlbGwgb2ZmZXJcIiBvcGVyYXRpb24gY3JlYXRlcywgdXBkYXRlcywgb3JcbiAqIGRlbGV0ZXMgYW4gb2ZmZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24ubWFuYWdlU2VsbE9mZmVyXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtBc3NldH0gb3B0cy5zZWxsaW5nIC0gV2hhdCB5b3UncmUgc2VsbGluZy5cbiAqIEBwYXJhbSB7QXNzZXR9IG9wdHMuYnV5aW5nIC0gV2hhdCB5b3UncmUgYnV5aW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuYW1vdW50IC0gVGhlIHRvdGFsIGFtb3VudCB5b3UncmUgc2VsbGluZy4gSWYgMCwgZGVsZXRlcyB0aGUgb2ZmZXIuXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8QmlnTnVtYmVyfE9iamVjdH0gb3B0cy5wcmljZSAtIFByaWNlIG9mIDEgdW5pdCBvZiBgc2VsbGluZ2AgaW4gdGVybXMgb2YgYGJ1eWluZ2AuXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy5wcmljZS5uIC0gSWYgYG9wdHMucHJpY2VgIGlzIGFuIG9iamVjdDogdGhlIHByaWNlIG51bWVyYXRvclxuICogQHBhcmFtIHtudW1iZXJ9IG9wdHMucHJpY2UuZCAtIElmIGBvcHRzLnByaWNlYCBpcyBhbiBvYmplY3Q6IHRoZSBwcmljZSBkZW5vbWluYXRvclxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbb3B0cy5vZmZlcklkIF0gLSBJZiBgMGAsIHdpbGwgY3JlYXRlIGEgbmV3IG9mZmVyIChkZWZhdWx0KS4gT3RoZXJ3aXNlLCBlZGl0cyBhbiBleGlzaXRpbmcgb2ZmZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCAoZGVmYXVsdHMgdG8gdHJhbnNhY3Rpb24gc291cmNlKS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBUaHJvd3MgYEVycm9yYCB3aGVuIHRoZSBiZXN0IHJhdGlvbmFsIGFwcHJveGltYXRpb24gb2YgYHByaWNlYCBjYW5ub3QgYmUgZm91bmQuXG4gKiBAcmV0dXJucyB7eGRyLk1hbmFnZVNlbGxPZmZlck9wfSBNYW5hZ2UgU2VsbCBPZmZlciBvcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gbWFuYWdlU2VsbE9mZmVyKG9wdHMpIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgYXR0cmlidXRlcy5zZWxsaW5nID0gb3B0cy5zZWxsaW5nLnRvWERST2JqZWN0KCk7XG4gIGF0dHJpYnV0ZXMuYnV5aW5nID0gb3B0cy5idXlpbmcudG9YRFJPYmplY3QoKTtcbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5hbW91bnQsIHRydWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdhbW91bnQnKSk7XG4gIH1cbiAgYXR0cmlidXRlcy5hbW91bnQgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLmFtb3VudCk7XG4gIGlmIChvcHRzLnByaWNlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmljZSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMucHJpY2UgPSB0aGlzLl90b1hEUlByaWNlKG9wdHMucHJpY2UpO1xuICBpZiAob3B0cy5vZmZlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICBvcHRzLm9mZmVySWQgPSBvcHRzLm9mZmVySWQudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICBvcHRzLm9mZmVySWQgPSAnMCc7XG4gIH1cbiAgYXR0cmlidXRlcy5vZmZlcklkID0gX2pzWGRyLkh5cGVyLmZyb21TdHJpbmcob3B0cy5vZmZlcklkKTtcbiAgdmFyIG1hbmFnZVNlbGxPZmZlck9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk1hbmFnZVNlbGxPZmZlck9wKGF0dHJpYnV0ZXMpO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge307XG4gIG9wQXR0cmlidXRlcy5ib2R5ID0gX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5tYW5hZ2VTZWxsT2ZmZXIobWFuYWdlU2VsbE9mZmVyT3ApO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.pathPaymentStrictReceive = pathPaymentStrictReceive;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a PathPaymentStrictReceive operation.\n *\n * A `PathPaymentStrictReceive` operation sends the specified amount to the\n * destination account. It credits the destination with `destAmount` of\n * `destAsset`, while debiting at most `sendMax` of `sendAsset` from the source.\n * The transfer optionally occurs through a path. XLM payments create the\n * destination account if it does not exist.\n *\n * @function\n * @alias Operation.pathPaymentStrictReceive\n * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-receive\n *\n * @param {object}  opts - Options object\n * @param {Asset}   opts.sendAsset    - asset to pay with\n * @param {string}  opts.sendMax      - maximum amount of sendAsset to send\n * @param {string}  opts.destination  - destination account to send to\n * @param {Asset}   opts.destAsset    - asset the destination will receive\n * @param {string}  opts.destAmount   - amount the destination receives\n * @param {Asset[]} opts.path         - array of Asset objects to use as the path\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.PathPaymentStrictReceiveOp} the resulting path payment op\n */\nfunction pathPaymentStrictReceive(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n    case !this.isValidAmount(opts.sendMax):\n      throw new TypeError(this.constructAmountRequirementsError('sendMax'));\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n    case !this.isValidAmount(opts.destAmount):\n      throw new TypeError(this.constructAmountRequirementsError('destAmount'));\n    default:\n      break;\n  }\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendMax = this._toXDRAmount(opts.sendMax);\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destAmount = this._toXDRAmount(opts.destAmount);\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n  var payment = new _xdr[\"default\"].PathPaymentStrictReceiveOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.pathPaymentStrictReceive(payment);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3BhdGhfcGF5bWVudF9zdHJpY3RfcmVjZWl2ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQ0FBZ0M7QUFDaEMsa0NBQWtDLG1CQUFPLENBQUMscUhBQVE7QUFDbEQsbUNBQW1DLG1CQUFPLENBQUMsK0tBQXFDO0FBQ2hGLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3BhdGhfcGF5bWVudF9zdHJpY3RfcmVjZWl2ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucGF0aFBheW1lbnRTdHJpY3RSZWNlaXZlID0gcGF0aFBheW1lbnRTdHJpY3RSZWNlaXZlO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xudmFyIF9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnQgPSByZXF1aXJlKFwiLi4vdXRpbC9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnRcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBDcmVhdGVzIGEgUGF0aFBheW1lbnRTdHJpY3RSZWNlaXZlIG9wZXJhdGlvbi5cbiAqXG4gKiBBIGBQYXRoUGF5bWVudFN0cmljdFJlY2VpdmVgIG9wZXJhdGlvbiBzZW5kcyB0aGUgc3BlY2lmaWVkIGFtb3VudCB0byB0aGVcbiAqIGRlc3RpbmF0aW9uIGFjY291bnQuIEl0IGNyZWRpdHMgdGhlIGRlc3RpbmF0aW9uIHdpdGggYGRlc3RBbW91bnRgIG9mXG4gKiBgZGVzdEFzc2V0YCwgd2hpbGUgZGViaXRpbmcgYXQgbW9zdCBgc2VuZE1heGAgb2YgYHNlbmRBc3NldGAgZnJvbSB0aGUgc291cmNlLlxuICogVGhlIHRyYW5zZmVyIG9wdGlvbmFsbHkgb2NjdXJzIHRocm91Z2ggYSBwYXRoLiBYTE0gcGF5bWVudHMgY3JlYXRlIHRoZVxuICogZGVzdGluYXRpb24gYWNjb3VudCBpZiBpdCBkb2VzIG5vdCBleGlzdC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24ucGF0aFBheW1lbnRTdHJpY3RSZWNlaXZlXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5zdGVsbGFyLm9yZy9kb2NzL3N0YXJ0L2xpc3Qtb2Ytb3BlcmF0aW9ucy8jcGF0aC1wYXltZW50LXN0cmljdC1yZWNlaXZlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9ICBvcHRzIC0gT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7QXNzZXR9ICAgb3B0cy5zZW5kQXNzZXQgICAgLSBhc3NldCB0byBwYXkgd2l0aFxuICogQHBhcmFtIHtzdHJpbmd9ICBvcHRzLnNlbmRNYXggICAgICAtIG1heGltdW0gYW1vdW50IG9mIHNlbmRBc3NldCB0byBzZW5kXG4gKiBAcGFyYW0ge3N0cmluZ30gIG9wdHMuZGVzdGluYXRpb24gIC0gZGVzdGluYXRpb24gYWNjb3VudCB0byBzZW5kIHRvXG4gKiBAcGFyYW0ge0Fzc2V0fSAgIG9wdHMuZGVzdEFzc2V0ICAgIC0gYXNzZXQgdGhlIGRlc3RpbmF0aW9uIHdpbGwgcmVjZWl2ZVxuICogQHBhcmFtIHtzdHJpbmd9ICBvcHRzLmRlc3RBbW91bnQgICAtIGFtb3VudCB0aGUgZGVzdGluYXRpb24gcmVjZWl2ZXNcbiAqIEBwYXJhbSB7QXNzZXRbXX0gb3B0cy5wYXRoICAgICAgICAgLSBhcnJheSBvZiBBc3NldCBvYmplY3RzIHRvIHVzZSBhcyB0aGUgcGF0aFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAgW29wdHMuc291cmNlXSAgICAgLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBwYXltZW50LlxuICogICAgIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICpcbiAqIEByZXR1cm5zIHt4ZHIuUGF0aFBheW1lbnRTdHJpY3RSZWNlaXZlT3B9IHRoZSByZXN1bHRpbmcgcGF0aCBwYXltZW50IG9wXG4gKi9cbmZ1bmN0aW9uIHBhdGhQYXltZW50U3RyaWN0UmVjZWl2ZShvcHRzKSB7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgIW9wdHMuc2VuZEFzc2V0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHNwZWNpZnkgYSBzZW5kIGFzc2V0Jyk7XG4gICAgY2FzZSAhdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMuc2VuZE1heCk6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ3NlbmRNYXgnKSk7XG4gICAgY2FzZSAhb3B0cy5kZXN0QXNzZXQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBhIGRlc3RBc3NldCBmb3IgYSBwYXltZW50IG9wZXJhdGlvbicpO1xuICAgIGNhc2UgIXRoaXMuaXNWYWxpZEFtb3VudChvcHRzLmRlc3RBbW91bnQpOlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdkZXN0QW1vdW50JykpO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBhdHRyaWJ1dGVzLnNlbmRBc3NldCA9IG9wdHMuc2VuZEFzc2V0LnRvWERST2JqZWN0KCk7XG4gIGF0dHJpYnV0ZXMuc2VuZE1heCA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMuc2VuZE1heCk7XG4gIHRyeSB7XG4gICAgYXR0cmlidXRlcy5kZXN0aW5hdGlvbiA9ICgwLCBfZGVjb2RlX2VuY29kZV9tdXhlZF9hY2NvdW50LmRlY29kZUFkZHJlc3NUb011eGVkQWNjb3VudCkob3B0cy5kZXN0aW5hdGlvbik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Rlc3RpbmF0aW9uIGlzIGludmFsaWQnKTtcbiAgfVxuICBhdHRyaWJ1dGVzLmRlc3RBc3NldCA9IG9wdHMuZGVzdEFzc2V0LnRvWERST2JqZWN0KCk7XG4gIGF0dHJpYnV0ZXMuZGVzdEFtb3VudCA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMuZGVzdEFtb3VudCk7XG4gIHZhciBwYXRoID0gb3B0cy5wYXRoID8gb3B0cy5wYXRoIDogW107XG4gIGF0dHJpYnV0ZXMucGF0aCA9IHBhdGgubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHgudG9YRFJPYmplY3QoKTtcbiAgfSk7XG4gIHZhciBwYXltZW50ID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLlBhdGhQYXltZW50U3RyaWN0UmVjZWl2ZU9wKGF0dHJpYnV0ZXMpO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge307XG4gIG9wQXR0cmlidXRlcy5ib2R5ID0gX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5wYXRoUGF5bWVudFN0cmljdFJlY2VpdmUocGF5bWVudCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.pathPaymentStrictSend = pathPaymentStrictSend;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a PathPaymentStrictSend operation.\n *\n * A `PathPaymentStrictSend` operation sends the specified amount to the\n * destination account crediting at least `destMin` of `destAsset`, optionally\n * through a path. XLM payments create the destination account if it does not\n * exist.\n *\n * @function\n * @alias Operation.pathPaymentStrictSend\n * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-send\n *\n * @param {object}  opts - Options object\n * @param {Asset}   opts.sendAsset    - asset to pay with\n * @param {string}  opts.sendAmount   - amount of sendAsset to send (excluding fees)\n * @param {string}  opts.destination  - destination account to send to\n * @param {Asset}   opts.destAsset    - asset the destination will receive\n * @param {string}  opts.destMin      - minimum amount of destAsset to be receive\n * @param {Asset[]} opts.path         - array of Asset objects to use as the path\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   the resulting path payment operation\n *     (xdr.PathPaymentStrictSendOp)\n */\nfunction pathPaymentStrictSend(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n    case !this.isValidAmount(opts.sendAmount):\n      throw new TypeError(this.constructAmountRequirementsError('sendAmount'));\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n    case !this.isValidAmount(opts.destMin):\n      throw new TypeError(this.constructAmountRequirementsError('destMin'));\n    default:\n      break;\n  }\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendAmount = this._toXDRAmount(opts.sendAmount);\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destMin = this._toXDRAmount(opts.destMin);\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n  var payment = new _xdr[\"default\"].PathPaymentStrictSendOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.pathPaymentStrictSend(payment);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3BhdGhfcGF5bWVudF9zdHJpY3Rfc2VuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw2QkFBNkI7QUFDN0Isa0NBQWtDLG1CQUFPLENBQUMscUhBQVE7QUFDbEQsbUNBQW1DLG1CQUFPLENBQUMsK0tBQXFDO0FBQ2hGLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3BhdGhfcGF5bWVudF9zdHJpY3Rfc2VuZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucGF0aFBheW1lbnRTdHJpY3RTZW5kID0gcGF0aFBheW1lbnRTdHJpY3RTZW5kO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xudmFyIF9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnQgPSByZXF1aXJlKFwiLi4vdXRpbC9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnRcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBDcmVhdGVzIGEgUGF0aFBheW1lbnRTdHJpY3RTZW5kIG9wZXJhdGlvbi5cbiAqXG4gKiBBIGBQYXRoUGF5bWVudFN0cmljdFNlbmRgIG9wZXJhdGlvbiBzZW5kcyB0aGUgc3BlY2lmaWVkIGFtb3VudCB0byB0aGVcbiAqIGRlc3RpbmF0aW9uIGFjY291bnQgY3JlZGl0aW5nIGF0IGxlYXN0IGBkZXN0TWluYCBvZiBgZGVzdEFzc2V0YCwgb3B0aW9uYWxseVxuICogdGhyb3VnaCBhIHBhdGguIFhMTSBwYXltZW50cyBjcmVhdGUgdGhlIGRlc3RpbmF0aW9uIGFjY291bnQgaWYgaXQgZG9lcyBub3RcbiAqIGV4aXN0LlxuICpcbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5wYXRoUGF5bWVudFN0cmljdFNlbmRcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLnN0ZWxsYXIub3JnL2RvY3Mvc3RhcnQvbGlzdC1vZi1vcGVyYXRpb25zLyNwYXRoLXBheW1lbnQtc3RyaWN0LXNlbmRcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gIG9wdHMgLSBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtBc3NldH0gICBvcHRzLnNlbmRBc3NldCAgICAtIGFzc2V0IHRvIHBheSB3aXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gIG9wdHMuc2VuZEFtb3VudCAgIC0gYW1vdW50IG9mIHNlbmRBc3NldCB0byBzZW5kIChleGNsdWRpbmcgZmVlcylcbiAqIEBwYXJhbSB7c3RyaW5nfSAgb3B0cy5kZXN0aW5hdGlvbiAgLSBkZXN0aW5hdGlvbiBhY2NvdW50IHRvIHNlbmQgdG9cbiAqIEBwYXJhbSB7QXNzZXR9ICAgb3B0cy5kZXN0QXNzZXQgICAgLSBhc3NldCB0aGUgZGVzdGluYXRpb24gd2lsbCByZWNlaXZlXG4gKiBAcGFyYW0ge3N0cmluZ30gIG9wdHMuZGVzdE1pbiAgICAgIC0gbWluaW11bSBhbW91bnQgb2YgZGVzdEFzc2V0IHRvIGJlIHJlY2VpdmVcbiAqIEBwYXJhbSB7QXNzZXRbXX0gb3B0cy5wYXRoICAgICAgICAgLSBhcnJheSBvZiBBc3NldCBvYmplY3RzIHRvIHVzZSBhcyB0aGUgcGF0aFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAgW29wdHMuc291cmNlXSAgICAgLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBwYXltZW50LlxuICogICAgIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICpcbiAqIEByZXR1cm5zIHt4ZHIuT3BlcmF0aW9ufSAgIHRoZSByZXN1bHRpbmcgcGF0aCBwYXltZW50IG9wZXJhdGlvblxuICogICAgICh4ZHIuUGF0aFBheW1lbnRTdHJpY3RTZW5kT3ApXG4gKi9cbmZ1bmN0aW9uIHBhdGhQYXltZW50U3RyaWN0U2VuZChvcHRzKSB7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgIW9wdHMuc2VuZEFzc2V0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHNwZWNpZnkgYSBzZW5kIGFzc2V0Jyk7XG4gICAgY2FzZSAhdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMuc2VuZEFtb3VudCk6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ3NlbmRBbW91bnQnKSk7XG4gICAgY2FzZSAhb3B0cy5kZXN0QXNzZXQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBhIGRlc3RBc3NldCBmb3IgYSBwYXltZW50IG9wZXJhdGlvbicpO1xuICAgIGNhc2UgIXRoaXMuaXNWYWxpZEFtb3VudChvcHRzLmRlc3RNaW4pOlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdkZXN0TWluJykpO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBhdHRyaWJ1dGVzLnNlbmRBc3NldCA9IG9wdHMuc2VuZEFzc2V0LnRvWERST2JqZWN0KCk7XG4gIGF0dHJpYnV0ZXMuc2VuZEFtb3VudCA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMuc2VuZEFtb3VudCk7XG4gIHRyeSB7XG4gICAgYXR0cmlidXRlcy5kZXN0aW5hdGlvbiA9ICgwLCBfZGVjb2RlX2VuY29kZV9tdXhlZF9hY2NvdW50LmRlY29kZUFkZHJlc3NUb011eGVkQWNjb3VudCkob3B0cy5kZXN0aW5hdGlvbik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Rlc3RpbmF0aW9uIGlzIGludmFsaWQnKTtcbiAgfVxuICBhdHRyaWJ1dGVzLmRlc3RBc3NldCA9IG9wdHMuZGVzdEFzc2V0LnRvWERST2JqZWN0KCk7XG4gIGF0dHJpYnV0ZXMuZGVzdE1pbiA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMuZGVzdE1pbik7XG4gIHZhciBwYXRoID0gb3B0cy5wYXRoID8gb3B0cy5wYXRoIDogW107XG4gIGF0dHJpYnV0ZXMucGF0aCA9IHBhdGgubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHgudG9YRFJPYmplY3QoKTtcbiAgfSk7XG4gIHZhciBwYXltZW50ID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLlBhdGhQYXltZW50U3RyaWN0U2VuZE9wKGF0dHJpYnV0ZXMpO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge307XG4gIG9wQXR0cmlidXRlcy5ib2R5ID0gX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5wYXRoUGF5bWVudFN0cmljdFNlbmQocGF5bWVudCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/payment.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/payment.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.payment = payment;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a payment operation.\n *\n * @function\n * @alias Operation.payment\n * @see https://developers.stellar.org/docs/start/list-of-operations/#payment\n *\n * @param {object}  opts - Options object\n * @param {string}  opts.destination  - destination account ID\n * @param {Asset}   opts.asset        - asset to send\n * @param {string}  opts.amount       - amount to send\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)\n */\nfunction payment(opts) {\n  if (!opts.asset) {\n    throw new Error('Must provide an asset for a payment operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  var attributes = {};\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  var paymentOp = new _xdr[\"default\"].PaymentOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.payment(paymentOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3BheW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmLGtDQUFrQyxtQkFBTyxDQUFDLHFIQUFRO0FBQ2xELG1DQUFtQyxtQkFBTyxDQUFDLCtLQUFxQztBQUNoRixxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL29wZXJhdGlvbnMvcGF5bWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucGF5bWVudCA9IHBheW1lbnQ7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudCA9IHJlcXVpcmUoXCIuLi91dGlsL2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIENyZWF0ZSBhIHBheW1lbnQgb3BlcmF0aW9uLlxuICpcbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5wYXltZW50XG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5zdGVsbGFyLm9yZy9kb2NzL3N0YXJ0L2xpc3Qtb2Ytb3BlcmF0aW9ucy8jcGF5bWVudFxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSAgb3B0cyAtIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gIG9wdHMuZGVzdGluYXRpb24gIC0gZGVzdGluYXRpb24gYWNjb3VudCBJRFxuICogQHBhcmFtIHtBc3NldH0gICBvcHRzLmFzc2V0ICAgICAgICAtIGFzc2V0IHRvIHNlbmRcbiAqIEBwYXJhbSB7c3RyaW5nfSAgb3B0cy5hbW91bnQgICAgICAgLSBhbW91bnQgdG8gc2VuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAgW29wdHMuc291cmNlXSAgICAgLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBwYXltZW50LlxuICogICAgIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICpcbiAqIEByZXR1cm5zIHt4ZHIuT3BlcmF0aW9ufSAgIFRoZSByZXN1bHRpbmcgcGF5bWVudCBvcGVyYXRpb24gKHhkci5QYXltZW50T3ApXG4gKi9cbmZ1bmN0aW9uIHBheW1lbnQob3B0cykge1xuICBpZiAoIW9wdHMuYXNzZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBhbiBhc3NldCBmb3IgYSBwYXltZW50IG9wZXJhdGlvbicpO1xuICB9XG4gIGlmICghdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMuYW1vdW50KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignYW1vdW50JykpO1xuICB9XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIHRyeSB7XG4gICAgYXR0cmlidXRlcy5kZXN0aW5hdGlvbiA9ICgwLCBfZGVjb2RlX2VuY29kZV9tdXhlZF9hY2NvdW50LmRlY29kZUFkZHJlc3NUb011eGVkQWNjb3VudCkob3B0cy5kZXN0aW5hdGlvbik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Rlc3RpbmF0aW9uIGlzIGludmFsaWQnKTtcbiAgfVxuICBhdHRyaWJ1dGVzLmFzc2V0ID0gb3B0cy5hc3NldC50b1hEUk9iamVjdCgpO1xuICBhdHRyaWJ1dGVzLmFtb3VudCA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMuYW1vdW50KTtcbiAgdmFyIHBheW1lbnRPcCA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5QYXltZW50T3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LnBheW1lbnQocGF5bWVudE9wKTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/payment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.restoreFootprint = restoreFootprint;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Builds an operation to restore the archived ledger entries specified\n * by the ledger keys.\n *\n * The ledger keys to restore are specified separately from the operation\n * in read-write footprint of the transaction.\n *\n * It takes no parameters because the relevant footprint is derived from the\n * transaction itself. See {@link TransactionBuilder}'s `opts.sorobanData`\n * parameter (or {@link TransactionBuilder.setSorobanData} /\n * {@link TransactionBuilder.setLedgerKeys}), which is a\n * {@link xdr.SorobanTransactionData} instance that contains fee data & resource\n * usage as part of {@link xdr.SorobanTransactionData}.\n *\n * @function\n * @alias Operation.restoreFootprint\n *\n * @param {object} [opts] - an optional set of parameters\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} a Bump Footprint Expiration operation\n *    (xdr.RestoreFootprintOp)\n */\nfunction restoreFootprint() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var op = new _xdr[\"default\"].RestoreFootprintOp({\n    ext: new _xdr[\"default\"].ExtensionPoint(0)\n  });\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.restoreFootprint(op)\n  };\n  this.setSourceAccount(opAttributes, opts !== null && opts !== void 0 ? opts : {});\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3Jlc3RvcmVfZm9vdHByaW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHdCQUF3QjtBQUN4QixrQ0FBa0MsbUJBQU8sQ0FBQyxxSEFBUTtBQUNsRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseUJBQXlCO0FBQ3JELGtCQUFrQix5Q0FBeUM7QUFDM0QsSUFBSSx1Q0FBdUM7QUFDM0MsSUFBSSxrQ0FBa0M7QUFDdEMscUJBQXFCLGlDQUFpQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRjtBQUNsRjtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL29wZXJhdGlvbnMvcmVzdG9yZV9mb290cHJpbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnJlc3RvcmVGb290cHJpbnQgPSByZXN0b3JlRm9vdHByaW50O1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQnVpbGRzIGFuIG9wZXJhdGlvbiB0byByZXN0b3JlIHRoZSBhcmNoaXZlZCBsZWRnZXIgZW50cmllcyBzcGVjaWZpZWRcbiAqIGJ5IHRoZSBsZWRnZXIga2V5cy5cbiAqXG4gKiBUaGUgbGVkZ2VyIGtleXMgdG8gcmVzdG9yZSBhcmUgc3BlY2lmaWVkIHNlcGFyYXRlbHkgZnJvbSB0aGUgb3BlcmF0aW9uXG4gKiBpbiByZWFkLXdyaXRlIGZvb3RwcmludCBvZiB0aGUgdHJhbnNhY3Rpb24uXG4gKlxuICogSXQgdGFrZXMgbm8gcGFyYW1ldGVycyBiZWNhdXNlIHRoZSByZWxldmFudCBmb290cHJpbnQgaXMgZGVyaXZlZCBmcm9tIHRoZVxuICogdHJhbnNhY3Rpb24gaXRzZWxmLiBTZWUge0BsaW5rIFRyYW5zYWN0aW9uQnVpbGRlcn0ncyBgb3B0cy5zb3JvYmFuRGF0YWBcbiAqIHBhcmFtZXRlciAob3Ige0BsaW5rIFRyYW5zYWN0aW9uQnVpbGRlci5zZXRTb3JvYmFuRGF0YX0gL1xuICoge0BsaW5rIFRyYW5zYWN0aW9uQnVpbGRlci5zZXRMZWRnZXJLZXlzfSksIHdoaWNoIGlzIGFcbiAqIHtAbGluayB4ZHIuU29yb2JhblRyYW5zYWN0aW9uRGF0YX0gaW5zdGFuY2UgdGhhdCBjb250YWlucyBmZWUgZGF0YSAmIHJlc291cmNlXG4gKiB1c2FnZSBhcyBwYXJ0IG9mIHtAbGluayB4ZHIuU29yb2JhblRyYW5zYWN0aW9uRGF0YX0uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLnJlc3RvcmVGb290cHJpbnRcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdHNdIC0gYW4gb3B0aW9uYWwgc2V0IG9mIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gYW4gb3B0aW9uYWwgc291cmNlIGFjY291bnRcbiAqXG4gKiBAcmV0dXJucyB7eGRyLk9wZXJhdGlvbn0gYSBCdW1wIEZvb3RwcmludCBFeHBpcmF0aW9uIG9wZXJhdGlvblxuICogICAgKHhkci5SZXN0b3JlRm9vdHByaW50T3ApXG4gKi9cbmZ1bmN0aW9uIHJlc3RvcmVGb290cHJpbnQoKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIG9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLlJlc3RvcmVGb290cHJpbnRPcCh7XG4gICAgZXh0OiBuZXcgX3hkcltcImRlZmF1bHRcIl0uRXh0ZW5zaW9uUG9pbnQoMClcbiAgfSk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7XG4gICAgYm9keTogX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5yZXN0b3JlRm9vdHByaW50KG9wKVxuICB9O1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzICE9PSBudWxsICYmIG9wdHMgIT09IHZvaWQgMCA/IG9wdHMgOiB7fSk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.revokeAccountSponsorship = revokeAccountSponsorship;\nexports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;\nexports.revokeDataSponsorship = revokeDataSponsorship;\nexports.revokeLiquidityPoolSponsorship = revokeLiquidityPoolSponsorship;\nexports.revokeOfferSponsorship = revokeOfferSponsorship;\nexports.revokeSignerSponsorship = revokeSignerSponsorship;\nexports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _asset = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _liquidity_pool_id = __webpack_require__(/*! ../liquidity_pool_id */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a \"revoke sponsorship\" operation for an account.\n *\n * @function\n * @alias Operation.revokeAccountSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The sponsored account ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeAccountSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n * });\n *\n */\nfunction revokeAccountSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.account(new _xdr[\"default\"].LedgerKeyAccount({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a trustline.\n *\n * @function\n * @alias Operation.revokeTrustlineSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the trustline.\n * @param {Asset | LiquidityPoolId} opts.asset - The trustline asset.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeTrustlineSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   asset: new StellarBase.LiquidityPoolId(\n *     'USDUSD',\n *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n *   )\n * });\n *\n */\nfunction revokeTrustlineSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var asset;\n  if (opts.asset instanceof _asset.Asset) {\n    asset = opts.asset.toTrustLineXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_id.LiquidityPoolId) {\n    asset = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be an Asset or LiquidityPoolId');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.trustline(new _xdr[\"default\"].LedgerKeyTrustLine({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    asset: asset\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for an offer.\n *\n * @function\n * @alias Operation.revokeOfferSponsorship\n * @param {object} opts Options object\n * @param {string} opts.seller - The account ID which created the offer.\n * @param {string} opts.offerId - The offer ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeOfferSponsorship({\n *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   offerId: '1234'\n * });\n *\n */\nfunction revokeOfferSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) {\n    throw new Error('seller is invalid');\n  }\n  if (typeof opts.offerId !== 'string') {\n    throw new Error('offerId is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.offer(new _xdr[\"default\"].LedgerKeyOffer({\n    sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),\n    offerId: _xdr[\"default\"].Int64.fromString(opts.offerId)\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a data entry.\n *\n * @function\n * @alias Operation.revokeDataSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the data entry.\n * @param {string} opts.name - The name of the data entry\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeDataSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   name: 'foo'\n * });\n *\n */\nfunction revokeDataSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  if (typeof opts.name !== 'string' || opts.name.length > 64) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.data(new _xdr[\"default\"].LedgerKeyData({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    dataName: opts.name\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a claimable balance.\n *\n * @function\n * @alias Operation.revokeClaimableBalanceSponsorship\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The sponsored claimable balance ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeClaimableBalanceSponsorship({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction revokeClaimableBalanceSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof opts.balanceId !== 'string') {\n    throw new Error('balanceId is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.claimableBalance(new _xdr[\"default\"].LedgerKeyClaimableBalance({\n    balanceId: _xdr[\"default\"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Creates a \"revoke sponsorship\" operation for a liquidity pool.\n *\n * @function\n * @alias Operation.revokeLiquidityPoolSponsorship\n * @param {object} opts – Options object.\n * @param {string} opts.liquidityPoolId - The sponsored liquidity pool ID in 'hex' string.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr Operation.\n *\n * @example\n * const op = Operation.revokeLiquidityPoolSponsorship({\n *   liquidityPoolId: 'dd7b1ab831c273310ddbec6f97870aa83c2fbd78ce22aded37ecbf4f3380fac7',\n * });\n *\n */\nfunction revokeLiquidityPoolSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof opts.liquidityPoolId !== 'string') {\n    throw new Error('liquidityPoolId is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.liquidityPool(new _xdr[\"default\"].LedgerKeyLiquidityPool({\n    liquidityPoolId: _xdr[\"default\"].PoolId.fromXDR(opts.liquidityPoolId, 'hex')\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.revokeSponsorship(op)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a signer.\n *\n * @function\n * @alias Operation.revokeSignerSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.\n * @param {object} opts.signer - The signer whose sponsorship is being removed.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeSignerSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   signer: {\n *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'\n *   }\n * })\n *\n */\nfunction revokeSignerSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var key;\n  if (opts.signer.ed25519PublicKey) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n      throw new Error('signer.ed25519PublicKey is invalid.');\n    }\n    var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n    key = new _xdr[\"default\"].SignerKey.signerKeyTypeEd25519(rawKey);\n  } else if (opts.signer.preAuthTx) {\n    var buffer;\n    if (typeof opts.signer.preAuthTx === 'string') {\n      buffer = Buffer.from(opts.signer.preAuthTx, 'hex');\n    } else {\n      buffer = opts.signer.preAuthTx;\n    }\n    if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) {\n      throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n    }\n    key = new _xdr[\"default\"].SignerKey.signerKeyTypePreAuthTx(buffer);\n  } else if (opts.signer.sha256Hash) {\n    var _buffer;\n    if (typeof opts.signer.sha256Hash === 'string') {\n      _buffer = Buffer.from(opts.signer.sha256Hash, 'hex');\n    } else {\n      _buffer = opts.signer.sha256Hash;\n    }\n    if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) {\n      throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n    }\n    key = new _xdr[\"default\"].SignerKey.signerKeyTypeHashX(_buffer);\n  } else {\n    throw new Error('signer is invalid');\n  }\n  var signer = new _xdr[\"default\"].RevokeSponsorshipOpSigner({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    signerKey: key\n  });\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipSigner(signer);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/set_options.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/set_options.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.setOptions = setOptions;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/* eslint-disable no-param-reassign */\n\nfunction weightCheckFunction(value, name) {\n  if (value >= 0 && value <= 255) {\n    return true;\n  }\n  throw new Error(\"\".concat(name, \" value must be between 0 and 255\"));\n}\n\n/**\n * Returns an XDR SetOptionsOp. A \"set options\" operations set or clear account flags,\n * set the account's inflation destination, and/or add new signers to the account.\n * The flags used in `opts.clearFlags` and `opts.setFlags` can be the following:\n *   - `{@link AuthRequiredFlag}`\n *   - `{@link AuthRevocableFlag}`\n *   - `{@link AuthImmutableFlag}`\n *   - `{@link AuthClawbackEnabledFlag}`\n *\n * It's possible to set/clear multiple flags at once using logical or.\n *\n * @function\n * @alias Operation.setOptions\n *\n * @param {object} opts Options object\n * @param {string} [opts.inflationDest] - Set this account ID as the account's inflation destination.\n * @param {(number|string)} [opts.clearFlags] - Bitmap integer for which account flags to clear.\n * @param {(number|string)} [opts.setFlags] - Bitmap integer for which account flags to set.\n * @param {number|string} [opts.masterWeight] - The master key weight.\n * @param {number|string} [opts.lowThreshold] - The sum weight for the low threshold.\n * @param {number|string} [opts.medThreshold] - The sum weight for the medium threshold.\n * @param {number|string} [opts.highThreshold] - The sum weight for the high threshold.\n * @param {object} [opts.signer] - Add or remove a signer from the account. The signer is\n *                                 deleted if the weight is 0. Only one of `ed25519PublicKey`, `sha256Hash`, `preAuthTx` should be defined.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string) of preimage that will unlock funds. Preimage should be used as signature of future transaction.\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction that will unlock funds.\n * @param {string} [opts.signer.ed25519SignedPayload] - Signed payload signer (ed25519 public key + raw payload) for atomic transaction signature disclosure.\n * @param {number|string} [opts.signer.weight] - The weight of the new signer (0 to delete or 1-255)\n * @param {string} [opts.homeDomain] - sets the home domain used for reverse federation lookup.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.SetOptionsOp}  XDR operation\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nfunction setOptions(opts) {\n  var attributes = {};\n  if (opts.inflationDest) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.inflationDest)) {\n      throw new Error('inflationDest is invalid');\n    }\n    attributes.inflationDest = _keypair.Keypair.fromPublicKey(opts.inflationDest).xdrAccountId();\n  }\n  attributes.clearFlags = this._checkUnsignedIntValue('clearFlags', opts.clearFlags);\n  attributes.setFlags = this._checkUnsignedIntValue('setFlags', opts.setFlags);\n  attributes.masterWeight = this._checkUnsignedIntValue('masterWeight', opts.masterWeight, weightCheckFunction);\n  attributes.lowThreshold = this._checkUnsignedIntValue('lowThreshold', opts.lowThreshold, weightCheckFunction);\n  attributes.medThreshold = this._checkUnsignedIntValue('medThreshold', opts.medThreshold, weightCheckFunction);\n  attributes.highThreshold = this._checkUnsignedIntValue('highThreshold', opts.highThreshold, weightCheckFunction);\n  if (opts.homeDomain !== undefined && typeof opts.homeDomain !== 'string') {\n    throw new TypeError('homeDomain argument must be of type String');\n  }\n  attributes.homeDomain = opts.homeDomain;\n  if (opts.signer) {\n    var weight = this._checkUnsignedIntValue('signer.weight', opts.signer.weight, weightCheckFunction);\n    var key;\n    var setValues = 0;\n    if (opts.signer.ed25519PublicKey) {\n      if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n        throw new Error('signer.ed25519PublicKey is invalid.');\n      }\n      var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr[\"default\"].SignerKey.signerKeyTypeEd25519(rawKey);\n      setValues += 1;\n    }\n    if (opts.signer.preAuthTx) {\n      if (typeof opts.signer.preAuthTx === 'string') {\n        opts.signer.preAuthTx = Buffer.from(opts.signer.preAuthTx, 'hex');\n      }\n      if (!(Buffer.isBuffer(opts.signer.preAuthTx) && opts.signer.preAuthTx.length === 32)) {\n        throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr[\"default\"].SignerKey.signerKeyTypePreAuthTx(opts.signer.preAuthTx);\n      setValues += 1;\n    }\n    if (opts.signer.sha256Hash) {\n      if (typeof opts.signer.sha256Hash === 'string') {\n        opts.signer.sha256Hash = Buffer.from(opts.signer.sha256Hash, 'hex');\n      }\n      if (!(Buffer.isBuffer(opts.signer.sha256Hash) && opts.signer.sha256Hash.length === 32)) {\n        throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr[\"default\"].SignerKey.signerKeyTypeHashX(opts.signer.sha256Hash);\n      setValues += 1;\n    }\n    if (opts.signer.ed25519SignedPayload) {\n      if (!_strkey.StrKey.isValidSignedPayload(opts.signer.ed25519SignedPayload)) {\n        throw new Error('signer.ed25519SignedPayload is invalid.');\n      }\n      var _rawKey = _strkey.StrKey.decodeSignedPayload(opts.signer.ed25519SignedPayload);\n      var signedPayloadXdr = _xdr[\"default\"].SignerKeyEd25519SignedPayload.fromXDR(_rawKey);\n\n      // eslint-disable-next-line new-cap\n      key = _xdr[\"default\"].SignerKey.signerKeyTypeEd25519SignedPayload(signedPayloadXdr);\n      setValues += 1;\n    }\n    if (setValues !== 1) {\n      throw new Error('Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.');\n    }\n    attributes.signer = new _xdr[\"default\"].Signer({\n      key: key,\n      weight: weight\n    });\n  }\n  var setOptionsOp = new _xdr[\"default\"].SetOptionsOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.setOptions(setOptionsOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/set_options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.setTrustLineFlags = setTrustLineFlags;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n * Creates a trustline flag configuring operation.\n *\n * For the flags, set them to true to enable them and false to disable them. Any\n * unmodified operations will be marked `undefined` in the result.\n *\n * Note that you can only **clear** the clawbackEnabled flag set; it must be set\n * account-wide via operations.SetOptions (setting\n * xdr.AccountFlags.clawbackEnabled).\n *\n * @function\n * @alias Operation.setTrustLineFlags\n *\n * @param {object} opts - Options object\n * @param {string} opts.trustor     - the account whose trustline this is\n * @param {Asset}  opts.asset       - the asset on the trustline\n * @param {object} opts.flags       - the set of flags to modify\n *\n * @param {bool}   [opts.flags.authorized]  - authorize account to perform\n *     transactions with its credit\n * @param {bool}   [opts.flags.authorizedToMaintainLiabilities] - authorize\n *     account to maintain and reduce liabilities for its credit\n * @param {bool}   [opts.flags.clawbackEnabled] - stop claimable balances on\n *     this trustlines from having clawbacks enabled (this flag can only be set\n *     to false!)\n * @param {string} [opts.source] - The source account for the operation.\n *                                 Defaults to the transaction's source account.\n *\n * @note You must include at least one flag.\n *\n * @return {xdr.SetTrustLineFlagsOp}\n *\n * @link xdr.AccountFlags\n * @link xdr.TrustLineFlags\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#set-trustline-flags-operation\n * @see https://developers.stellar.org/docs/start/list-of-operations/#set-options\n */\nfunction setTrustLineFlags() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n  if (_typeof(opts.flags) !== 'object' || Object.keys(opts.flags).length === 0) {\n    throw new Error('opts.flags must be a map of boolean flags to modify');\n  }\n  var mapping = {\n    authorized: _xdr[\"default\"].TrustLineFlags.authorizedFlag(),\n    authorizedToMaintainLiabilities: _xdr[\"default\"].TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n    clawbackEnabled: _xdr[\"default\"].TrustLineFlags.trustlineClawbackEnabledFlag()\n  };\n\n  /* eslint no-bitwise: \"off\" */\n  var clearFlag = 0;\n  var setFlag = 0;\n  Object.keys(opts.flags).forEach(function (flagName) {\n    if (!Object.prototype.hasOwnProperty.call(mapping, flagName)) {\n      throw new Error(\"unsupported flag name specified: \".concat(flagName));\n    }\n    var flagValue = opts.flags[flagName];\n    var bit = mapping[flagName].value;\n    if (flagValue === true) {\n      setFlag |= bit;\n    } else if (flagValue === false) {\n      clearFlag |= bit;\n    }\n  });\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.clearFlags = clearFlag;\n  attributes.setFlags = setFlag;\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.setTrustLineFlags(new _xdr[\"default\"].SetTrustLineFlagsOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3NldF90cnVzdGxpbmVfZmxhZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YseUJBQXlCO0FBQ3pCLGtDQUFrQyxtQkFBTyxDQUFDLHFIQUFRO0FBQ2xELGVBQWUsbUJBQU8sQ0FBQyw2SEFBWTtBQUNuQyxxQ0FBcUMsaUNBQWlDO0FBQ3RFLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3NldF90cnVzdGxpbmVfZmxhZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnNldFRydXN0TGluZUZsYWdzID0gc2V0VHJ1c3RMaW5lRmxhZ3M7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2tleXBhaXIgPSByZXF1aXJlKFwiLi4va2V5cGFpclwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG4vKipcbiAqIENyZWF0ZXMgYSB0cnVzdGxpbmUgZmxhZyBjb25maWd1cmluZyBvcGVyYXRpb24uXG4gKlxuICogRm9yIHRoZSBmbGFncywgc2V0IHRoZW0gdG8gdHJ1ZSB0byBlbmFibGUgdGhlbSBhbmQgZmFsc2UgdG8gZGlzYWJsZSB0aGVtLiBBbnlcbiAqIHVubW9kaWZpZWQgb3BlcmF0aW9ucyB3aWxsIGJlIG1hcmtlZCBgdW5kZWZpbmVkYCBpbiB0aGUgcmVzdWx0LlxuICpcbiAqIE5vdGUgdGhhdCB5b3UgY2FuIG9ubHkgKipjbGVhcioqIHRoZSBjbGF3YmFja0VuYWJsZWQgZmxhZyBzZXQ7IGl0IG11c3QgYmUgc2V0XG4gKiBhY2NvdW50LXdpZGUgdmlhIG9wZXJhdGlvbnMuU2V0T3B0aW9ucyAoc2V0dGluZ1xuICogeGRyLkFjY291bnRGbGFncy5jbGF3YmFja0VuYWJsZWQpLlxuICpcbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5zZXRUcnVzdExpbmVGbGFnc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnRydXN0b3IgICAgIC0gdGhlIGFjY291bnQgd2hvc2UgdHJ1c3RsaW5lIHRoaXMgaXNcbiAqIEBwYXJhbSB7QXNzZXR9ICBvcHRzLmFzc2V0ICAgICAgIC0gdGhlIGFzc2V0IG9uIHRoZSB0cnVzdGxpbmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzLmZsYWdzICAgICAgIC0gdGhlIHNldCBvZiBmbGFncyB0byBtb2RpZnlcbiAqXG4gKiBAcGFyYW0ge2Jvb2x9ICAgW29wdHMuZmxhZ3MuYXV0aG9yaXplZF0gIC0gYXV0aG9yaXplIGFjY291bnQgdG8gcGVyZm9ybVxuICogICAgIHRyYW5zYWN0aW9ucyB3aXRoIGl0cyBjcmVkaXRcbiAqIEBwYXJhbSB7Ym9vbH0gICBbb3B0cy5mbGFncy5hdXRob3JpemVkVG9NYWludGFpbkxpYWJpbGl0aWVzXSAtIGF1dGhvcml6ZVxuICogICAgIGFjY291bnQgdG8gbWFpbnRhaW4gYW5kIHJlZHVjZSBsaWFiaWxpdGllcyBmb3IgaXRzIGNyZWRpdFxuICogQHBhcmFtIHtib29sfSAgIFtvcHRzLmZsYWdzLmNsYXdiYWNrRW5hYmxlZF0gLSBzdG9wIGNsYWltYWJsZSBiYWxhbmNlcyBvblxuICogICAgIHRoaXMgdHJ1c3RsaW5lcyBmcm9tIGhhdmluZyBjbGF3YmFja3MgZW5hYmxlZCAodGhpcyBmbGFnIGNhbiBvbmx5IGJlIHNldFxuICogICAgIHRvIGZhbHNlISlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIHNvdXJjZSBhY2NvdW50IGZvciB0aGUgb3BlcmF0aW9uLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB0aGUgdHJhbnNhY3Rpb24ncyBzb3VyY2UgYWNjb3VudC5cbiAqXG4gKiBAbm90ZSBZb3UgbXVzdCBpbmNsdWRlIGF0IGxlYXN0IG9uZSBmbGFnLlxuICpcbiAqIEByZXR1cm4ge3hkci5TZXRUcnVzdExpbmVGbGFnc09wfVxuICpcbiAqIEBsaW5rIHhkci5BY2NvdW50RmxhZ3NcbiAqIEBsaW5rIHhkci5UcnVzdExpbmVGbGFnc1xuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vc3RlbGxhci9zdGVsbGFyLXByb3RvY29sL2Jsb2IvbWFzdGVyL2NvcmUvY2FwLTAwMzUubWQjc2V0LXRydXN0bGluZS1mbGFncy1vcGVyYXRpb25cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLnN0ZWxsYXIub3JnL2RvY3Mvc3RhcnQvbGlzdC1vZi1vcGVyYXRpb25zLyNzZXQtb3B0aW9uc1xuICovXG5mdW5jdGlvbiBzZXRUcnVzdExpbmVGbGFncygpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBpZiAoX3R5cGVvZihvcHRzLmZsYWdzKSAhPT0gJ29iamVjdCcgfHwgT2JqZWN0LmtleXMob3B0cy5mbGFncykubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvcHRzLmZsYWdzIG11c3QgYmUgYSBtYXAgb2YgYm9vbGVhbiBmbGFncyB0byBtb2RpZnknKTtcbiAgfVxuICB2YXIgbWFwcGluZyA9IHtcbiAgICBhdXRob3JpemVkOiBfeGRyW1wiZGVmYXVsdFwiXS5UcnVzdExpbmVGbGFncy5hdXRob3JpemVkRmxhZygpLFxuICAgIGF1dGhvcml6ZWRUb01haW50YWluTGlhYmlsaXRpZXM6IF94ZHJbXCJkZWZhdWx0XCJdLlRydXN0TGluZUZsYWdzLmF1dGhvcml6ZWRUb01haW50YWluTGlhYmlsaXRpZXNGbGFnKCksXG4gICAgY2xhd2JhY2tFbmFibGVkOiBfeGRyW1wiZGVmYXVsdFwiXS5UcnVzdExpbmVGbGFncy50cnVzdGxpbmVDbGF3YmFja0VuYWJsZWRGbGFnKClcbiAgfTtcblxuICAvKiBlc2xpbnQgbm8tYml0d2lzZTogXCJvZmZcIiAqL1xuICB2YXIgY2xlYXJGbGFnID0gMDtcbiAgdmFyIHNldEZsYWcgPSAwO1xuICBPYmplY3Qua2V5cyhvcHRzLmZsYWdzKS5mb3JFYWNoKGZ1bmN0aW9uIChmbGFnTmFtZSkge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcHBpbmcsIGZsYWdOYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgZmxhZyBuYW1lIHNwZWNpZmllZDogXCIuY29uY2F0KGZsYWdOYW1lKSk7XG4gICAgfVxuICAgIHZhciBmbGFnVmFsdWUgPSBvcHRzLmZsYWdzW2ZsYWdOYW1lXTtcbiAgICB2YXIgYml0ID0gbWFwcGluZ1tmbGFnTmFtZV0udmFsdWU7XG4gICAgaWYgKGZsYWdWYWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgc2V0RmxhZyB8PSBiaXQ7XG4gICAgfSBlbHNlIGlmIChmbGFnVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICBjbGVhckZsYWcgfD0gYml0O1xuICAgIH1cbiAgfSk7XG4gIGF0dHJpYnV0ZXMudHJ1c3RvciA9IF9rZXlwYWlyLktleXBhaXIuZnJvbVB1YmxpY0tleShvcHRzLnRydXN0b3IpLnhkckFjY291bnRJZCgpO1xuICBhdHRyaWJ1dGVzLmFzc2V0ID0gb3B0cy5hc3NldC50b1hEUk9iamVjdCgpO1xuICBhdHRyaWJ1dGVzLmNsZWFyRmxhZ3MgPSBjbGVhckZsYWc7XG4gIGF0dHJpYnV0ZXMuc2V0RmxhZ3MgPSBzZXRGbGFnO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge1xuICAgIGJvZHk6IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuc2V0VHJ1c3RMaW5lRmxhZ3MobmV3IF94ZHJbXCJkZWZhdWx0XCJdLlNldFRydXN0TGluZUZsYWdzT3AoYXR0cmlidXRlcykpXG4gIH07XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/scval.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/scval.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.nativeToScVal = nativeToScVal;\nexports.scValToNative = scValToNative;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/address.js\");\nvar _contract = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/contract.js\");\nvar _index = __webpack_require__(/*! ./numbers/index */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/numbers/index.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n * Attempts to convert native types into smart contract values\n * ({@link xdr.ScVal}).\n *\n * Provides conversions from smart contract XDR values ({@link xdr.ScVal}) to\n * native JavaScript types.\n *\n * The conversions are as follows:\n *\n *  - xdr.ScVal -> passthrough\n *  - null/undefined -> scvVoid\n *  - string -> scvString (a copy is made)\n *  - UintArray8 -> scvBytes (a copy is made)\n *  - boolean -> scvBool\n *\n *  - number/bigint -> the smallest possible XDR integer type that will fit the\n *    input value (if you want a specific type, use {@link ScInt})\n *\n *  - {@link Address} or {@link Contract} -> scvAddress (for contracts and\n *    public keys)\n *\n *  - Array<T> -> scvVec after attempting to convert each item of type `T` to an\n *    xdr.ScVal (recursively). note that all values must be the same type!\n *\n *  - object -> scvMap after attempting to convert each key and value to an\n *    xdr.ScVal (recursively). note that there is no restriction on types\n *    matching anywhere (unlike arrays)\n *\n * When passing an integer-like native value, you can also optionally specify a\n * type which will force a particular interpretation of that value.\n *\n * Note that not all type specifications are compatible with all `ScVal`s, e.g.\n * `toScVal(\"a string\", {type: \"i256\"})` will throw.\n *\n * @param {any} val -       a native (or convertible) input value to wrap\n * @param {object} [opts] - an optional set of hints around the type of\n *    conversion you'd like to see\n * @param {string} [opts.type] - there is different behavior for different input\n *    types for `val`:\n *\n *     - when `val` is an integer-like type (i.e. number|bigint), this will be\n *       forwarded to {@link ScInt} or forced to be u32/i32.\n *\n *     - when `val` is an array type, this is forwarded to the recursion\n *\n *     - when `val` is an object type (key-value entries), this should be an\n *       object in which each key has a pair of types (to represent forced types\n *       for the key and the value), where `null` (or a missing entry) indicates\n *       the default interpretation(s) (refer to the examples, below)\n *\n *     - when `val` is a string type, this can be 'string' or 'symbol' to force\n *       a particular interpretation of `val`.\n *\n *     - when `val` is a bytes-like type, this can be 'string', 'symbol', or\n *       'bytes' to force a particular interpretation\n *\n *    As a simple example, `nativeToScVal(\"hello\", {type: 'symbol'})` will\n *    return an `scvSymbol`, whereas without the type it would have been an\n *    `scvString`.\n *\n * @returns {xdr.ScVal} a wrapped, smart, XDR version of the input value\n * @throws {TypeError} if...\n *  - there are arrays with more than one type in them\n *  - there are values that do not have a sensible conversion (e.g. random XDR\n *    types, custom classes)\n *  - the type of the input object (or some inner value of said object) cannot\n *    be determined (via `typeof`)\n *  - the type you specified (via `opts.type`) is incompatible with the value\n *    you passed in (`val`), e.g. `nativeToScVal(\"a string\", { type: 'i128' })`,\n *    though this does not apply for types that ignore `opts` (e.g. addresses).\n * @see scValToNative\n *\n * @example\n * nativeToScVal(1000);                   // gives ScValType === scvU64\n * nativeToScVal(1000n);                  // gives ScValType === scvU64\n * nativeToScVal(1n << 100n);             // gives ScValType === scvU128\n * nativeToScVal(1000, { type: 'u32' });  // gives ScValType === scvU32\n * nativeToScVal(1000, { type: 'i125' }); // gives ScValType === scvI256\n * nativeToScVal(\"a string\");                     // gives ScValType === scvString\n * nativeToScVal(\"a string\", { type: 'symbol' }); // gives scvSymbol\n * nativeToScVal(new Uint8Array(5));                      // scvBytes\n * nativeToScVal(new Uint8Array(5), { type: 'symbol' });  // scvSymbol\n * nativeToScVal(null); // scvVoid\n * nativeToScVal(true); // scvBool\n * nativeToScVal([1, 2, 3]);                    // gives scvVec with each element as scvU64\n * nativeToScVal([1, 2, 3], { type: 'i128' });  // scvVec<scvI128>\n * nativeToScVal({ 'hello': 1, 'world': [ true, false ] }, {\n *   type: {\n *     'hello': [ 'symbol', 'i128' ],\n *   }\n * })\n * // gives scvMap with entries: [\n * //     [ scvSymbol, scvI128 ],\n * //     [ scvString, scvArray<scvBool> ]\n * // ]\n *\n * @example\n * import {\n *   nativeToScVal,\n *   scValToNative,\n *   ScInt,\n *   xdr\n * } from '@stellar/stellar-base';\n *\n * let gigaMap = {\n *   bool: true,\n *   void: null,\n *   u32: xdr.ScVal.scvU32(1),\n *   i32: xdr.ScVal.scvI32(1),\n *   u64: 1n,\n *   i64: -1n,\n *   u128: new ScInt(1).toU128(),\n *   i128: new ScInt(1).toI128(),\n *   u256: new ScInt(1).toU256(),\n *   i256: new ScInt(1).toI256(),\n *   map: {\n *     arbitrary: 1n,\n *     nested: 'values',\n *     etc: false\n *   },\n *   vec: ['same', 'type', 'list'],\n * };\n *\n * // then, simply:\n * let scv = nativeToScVal(gigaMap);    // scv.switch() == xdr.ScValType.scvMap()\n *\n * // then...\n * someContract.call(\"method\", scv);\n *\n * // Similarly, the inverse should work:\n * scValToNative(scv) == gigaMap;       // true\n */\nfunction nativeToScVal(val) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (_typeof(val)) {\n    case 'object':\n      {\n        var _val$constructor$name, _val$constructor;\n        if (val === null) {\n          return _xdr[\"default\"].ScVal.scvVoid();\n        }\n        if (val instanceof _xdr[\"default\"].ScVal) {\n          return val; // should we copy?\n        }\n        if (val instanceof _address.Address) {\n          return val.toScVal();\n        }\n        if (val instanceof _keypair.Keypair) {\n          return nativeToScVal(val.publicKey(), {\n            type: 'address'\n          });\n        }\n        if (val instanceof _contract.Contract) {\n          return val.address().toScVal();\n        }\n        if (val instanceof Uint8Array || Buffer.isBuffer(val)) {\n          var _opts$type;\n          var copy = Uint8Array.from(val);\n          switch ((_opts$type = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type !== void 0 ? _opts$type : 'bytes') {\n            case 'bytes':\n              return _xdr[\"default\"].ScVal.scvBytes(copy);\n            case 'symbol':\n              return _xdr[\"default\"].ScVal.scvSymbol(copy);\n            case 'string':\n              return _xdr[\"default\"].ScVal.scvString(copy);\n            default:\n              throw new TypeError(\"invalid type (\".concat(opts.type, \") specified for bytes-like value\"));\n          }\n        }\n        if (Array.isArray(val)) {\n          return _xdr[\"default\"].ScVal.scvVec(val.map(function (v) {\n            return nativeToScVal(v, opts);\n          }));\n        }\n        if (((_val$constructor$name = (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) !== null && _val$constructor$name !== void 0 ? _val$constructor$name : '') !== 'Object') {\n          var _val$constructor2;\n          throw new TypeError(\"cannot interpret \".concat((_val$constructor2 = val.constructor) === null || _val$constructor2 === void 0 ? void 0 : _val$constructor2.name, \" value as ScVal (\").concat(JSON.stringify(val), \")\"));\n        }\n        return _xdr[\"default\"].ScVal.scvMap(Object.entries(val)\n        // The Soroban runtime expects maps to have their keys in sorted\n        // order, so let's do that here as part of the conversion to prevent\n        // confusing error messages on execution.\n        .sort(function (_ref, _ref2) {\n          var _ref3 = _slicedToArray(_ref, 1),\n            key1 = _ref3[0];\n          var _ref4 = _slicedToArray(_ref2, 1),\n            key2 = _ref4[0];\n          return key1.localeCompare(key2);\n        }).map(function (_ref5) {\n          var _k, _opts$type2;\n          var _ref6 = _slicedToArray(_ref5, 2),\n            k = _ref6[0],\n            v = _ref6[1];\n          // the type can be specified with an entry for the key and the value,\n          // e.g. val = { 'hello': 1 } and opts.type = { hello: [ 'symbol',\n          // 'u128' ]} or you can use `null` for the default interpretation\n          var _ref7 = (_k = ((_opts$type2 = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type2 !== void 0 ? _opts$type2 : {})[k]) !== null && _k !== void 0 ? _k : [null, null],\n            _ref8 = _slicedToArray(_ref7, 2),\n            keyType = _ref8[0],\n            valType = _ref8[1];\n          var keyOpts = keyType ? {\n            type: keyType\n          } : {};\n          var valOpts = valType ? {\n            type: valType\n          } : {};\n          return new _xdr[\"default\"].ScMapEntry({\n            key: nativeToScVal(k, keyOpts),\n            val: nativeToScVal(v, valOpts)\n          });\n        }));\n      }\n    case 'number':\n    case 'bigint':\n      switch (opts === null || opts === void 0 ? void 0 : opts.type) {\n        case 'u32':\n          return _xdr[\"default\"].ScVal.scvU32(val);\n        case 'i32':\n          return _xdr[\"default\"].ScVal.scvI32(val);\n        default:\n          break;\n      }\n      return new _index.ScInt(val, {\n        type: opts === null || opts === void 0 ? void 0 : opts.type\n      }).toScVal();\n    case 'string':\n      {\n        var _opts$type3;\n        var optType = (_opts$type3 = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type3 !== void 0 ? _opts$type3 : 'string';\n        switch (optType) {\n          case 'string':\n            return _xdr[\"default\"].ScVal.scvString(val);\n          case 'symbol':\n            return _xdr[\"default\"].ScVal.scvSymbol(val);\n          case 'address':\n            return new _address.Address(val).toScVal();\n          case 'u32':\n            return _xdr[\"default\"].ScVal.scvU32(parseInt(val, 10));\n          case 'i32':\n            return _xdr[\"default\"].ScVal.scvI32(parseInt(val, 10));\n          default:\n            if (_index.XdrLargeInt.isType(optType)) {\n              return new _index.XdrLargeInt(optType, val).toScVal();\n            }\n            throw new TypeError(\"invalid type (\".concat(opts.type, \") specified for string value\"));\n        }\n      }\n    case 'boolean':\n      return _xdr[\"default\"].ScVal.scvBool(val);\n    case 'undefined':\n      return _xdr[\"default\"].ScVal.scvVoid();\n    case 'function':\n      // FIXME: Is this too helpful?\n      return nativeToScVal(val());\n    default:\n      throw new TypeError(\"failed to convert typeof \".concat(_typeof(val), \" (\").concat(val, \")\"));\n  }\n}\n\n/**\n * Given a smart contract value, attempt to convert it to a native type.\n * Possible conversions include:\n *\n *  - void -> `null`\n *  - u32, i32 -> `number`\n *  - u64, i64, u128, i128, u256, i256 -> `bigint`\n *  - vec -> `Array` of any of the above (via recursion)\n *  - map -> key-value object of any of the above (via recursion)\n *  - bool -> `boolean`\n *  - bytes -> `Uint8Array`\n *  - symbol -> `string`\n *  - string -> `string` IF the underlying buffer can be decoded as ascii/utf8,\n *              `Uint8Array` of the raw contents in any error case\n *\n * If no viable conversion can be determined, this just \"unwraps\" the smart\n * value to return its underlying XDR value.\n *\n * @param {xdr.ScVal} scv - the input smart contract value\n *\n * @returns {any}\n * @see nativeToScVal\n */\nfunction scValToNative(scv) {\n  var _scv$vec, _scv$map;\n  // we use the verbose xdr.ScValType.<type>.value form here because it's faster\n  // than string comparisons and the underlying constants never need to be\n  // updated\n  switch (scv[\"switch\"]().value) {\n    case _xdr[\"default\"].ScValType.scvVoid().value:\n      return null;\n\n    // these can be converted to bigints directly\n    case _xdr[\"default\"].ScValType.scvU64().value:\n    case _xdr[\"default\"].ScValType.scvI64().value:\n      return scv.value().toBigInt();\n\n    // these can be parsed by internal abstractions note that this can also\n    // handle the above two cases, but it's not as efficient (another\n    // type-check, parsing, etc.)\n    case _xdr[\"default\"].ScValType.scvU128().value:\n    case _xdr[\"default\"].ScValType.scvI128().value:\n    case _xdr[\"default\"].ScValType.scvU256().value:\n    case _xdr[\"default\"].ScValType.scvI256().value:\n      return (0, _index.scValToBigInt)(scv);\n    case _xdr[\"default\"].ScValType.scvVec().value:\n      return ((_scv$vec = scv.vec()) !== null && _scv$vec !== void 0 ? _scv$vec : []).map(scValToNative);\n    case _xdr[\"default\"].ScValType.scvAddress().value:\n      return _address.Address.fromScVal(scv).toString();\n    case _xdr[\"default\"].ScValType.scvMap().value:\n      return Object.fromEntries(((_scv$map = scv.map()) !== null && _scv$map !== void 0 ? _scv$map : []).map(function (entry) {\n        return [scValToNative(entry.key()), scValToNative(entry.val())];\n      }));\n\n    // these return the primitive type directly\n    case _xdr[\"default\"].ScValType.scvBool().value:\n    case _xdr[\"default\"].ScValType.scvU32().value:\n    case _xdr[\"default\"].ScValType.scvI32().value:\n    case _xdr[\"default\"].ScValType.scvBytes().value:\n      return scv.value();\n\n    // Symbols are limited to [a-zA-Z0-9_]+, so we can safely make ascii strings\n    //\n    // Strings, however, are \"presented\" as strings and we treat them as such\n    // (in other words, string = bytes with a hint that it's text). If the user\n    // encoded non-printable bytes in their string value, that's on them.\n    //\n    // Note that we assume a utf8 encoding (ascii-compatible). For other\n    // encodings, you should probably use bytes anyway. If it cannot be decoded,\n    // the raw bytes are returned.\n    case _xdr[\"default\"].ScValType.scvSymbol().value:\n    case _xdr[\"default\"].ScValType.scvString().value:\n      {\n        var v = scv.value(); // string|Buffer\n        if (Buffer.isBuffer(v) || ArrayBuffer.isView(v)) {\n          try {\n            return new TextDecoder().decode(v);\n          } catch (e) {\n            return new Uint8Array(v.buffer); // copy of bytes\n          }\n        }\n        return v; // string already\n      }\n\n    // these can be converted to bigint\n    case _xdr[\"default\"].ScValType.scvTimepoint().value:\n    case _xdr[\"default\"].ScValType.scvDuration().value:\n      return new _xdr[\"default\"].Uint64(scv.value()).toBigInt();\n    case _xdr[\"default\"].ScValType.scvError().value:\n      switch (scv.error()[\"switch\"]().value) {\n        // Distinguish errors from the user contract.\n        case _xdr[\"default\"].ScErrorType.sceContract().value:\n          return {\n            type: 'contract',\n            code: scv.error().contractCode()\n          };\n        default:\n          {\n            var err = scv.error();\n            return {\n              type: 'system',\n              code: err.code().value,\n              value: err.code().name\n            };\n          }\n      }\n\n    // in the fallthrough case, just return the underlying value directly\n    default:\n      return scv.value();\n  }\n}\n\n/// Inject a sortable map builder into the xdr module.\n_xdr[\"default\"].scvSortedMap = function (items) {\n  var sorted = Array.from(items).sort(function (a, b) {\n    // Both a and b are `ScMapEntry`s, so we need to sort by underlying key.\n    //\n    // We couldn't possibly handle every combination of keys since Soroban\n    // maps don't enforce consistent types, so we do a best-effort and try\n    // sorting by \"number-like\" or \"string-like.\"\n    var nativeA = scValToNative(a.key());\n    var nativeB = scValToNative(b.key());\n    switch (_typeof(nativeA)) {\n      case 'number':\n      case 'bigint':\n        return nativeA < nativeB ? -1 : 1;\n      default:\n        return nativeA.toString().localeCompare(nativeB.toString());\n    }\n  });\n  return _xdr[\"default\"].ScVal.scvMap(sorted);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/scval.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signerkey.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signerkey.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SignerKey = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A container class with helpers to convert between signer keys\n * (`xdr.SignerKey`) and {@link StrKey}s.\n *\n * It's primarly used for manipulating the `extraSigners` precondition on a\n * {@link Transaction}.\n *\n * @see {@link TransactionBuilder.setExtraSigners}\n */\nvar SignerKey = exports.SignerKey = /*#__PURE__*/function () {\n  function SignerKey() {\n    _classCallCheck(this, SignerKey);\n  }\n  return _createClass(SignerKey, null, [{\n    key: \"decodeAddress\",\n    value:\n    /**\n     * Decodes a StrKey address into an xdr.SignerKey instance.\n     *\n     * Only ED25519 public keys (G...), pre-auth transactions (T...), hashes\n     * (H...), and signed payloads (P...) can be signer keys.\n     *\n     * @param   {string} address  a StrKey-encoded signer address\n     * @returns {xdr.SignerKey}\n     */\n    function decodeAddress(address) {\n      var signerKeyMap = {\n        ed25519PublicKey: _xdr[\"default\"].SignerKey.signerKeyTypeEd25519,\n        preAuthTx: _xdr[\"default\"].SignerKey.signerKeyTypePreAuthTx,\n        sha256Hash: _xdr[\"default\"].SignerKey.signerKeyTypeHashX,\n        signedPayload: _xdr[\"default\"].SignerKey.signerKeyTypeEd25519SignedPayload\n      };\n      var vb = _strkey.StrKey.getVersionByteForPrefix(address);\n      var encoder = signerKeyMap[vb];\n      if (!encoder) {\n        throw new Error(\"invalid signer key type (\".concat(vb, \")\"));\n      }\n      var raw = (0, _strkey.decodeCheck)(vb, address);\n      switch (vb) {\n        case 'signedPayload':\n          return encoder(new _xdr[\"default\"].SignerKeyEd25519SignedPayload({\n            ed25519: raw.slice(0, 32),\n            payload: raw.slice(32 + 4)\n          }));\n        case 'ed25519PublicKey': // falls through\n        case 'preAuthTx': // falls through\n        case 'sha256Hash': // falls through\n        default:\n          return encoder(raw);\n      }\n    }\n\n    /**\n     * Encodes a signer key into its StrKey equivalent.\n     *\n     * @param   {xdr.SignerKey} signerKey   the signer\n     * @returns {string} the StrKey representation of the signer\n     */\n  }, {\n    key: \"encodeSignerKey\",\n    value: function encodeSignerKey(signerKey) {\n      var strkeyType;\n      var raw;\n      switch (signerKey[\"switch\"]()) {\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypeEd25519():\n          strkeyType = 'ed25519PublicKey';\n          raw = signerKey.value();\n          break;\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypePreAuthTx():\n          strkeyType = 'preAuthTx';\n          raw = signerKey.value();\n          break;\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypeHashX():\n          strkeyType = 'sha256Hash';\n          raw = signerKey.value();\n          break;\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypeEd25519SignedPayload():\n          strkeyType = 'signedPayload';\n          raw = signerKey.ed25519SignedPayload().toXDR('raw');\n          break;\n        default:\n          throw new Error(\"invalid SignerKey (type: \".concat(signerKey[\"switch\"](), \")\"));\n      }\n      return (0, _strkey.encodeCheck)(strkeyType, raw);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signerkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signing.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signing.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FastSigning = void 0;\nexports.generate = generate;\nexports.sign = sign;\nexports.verify = verify;\n//  This module provides the signing functionality used by the stellar network\n//  The code below may look a little strange... this is because we try to provide\n//  the most efficient signing method possible.  First, we try to load the\n//  native `sodium-native` package for node.js environments, and if that fails we\n//  fallback to `tweetnacl`\n\nvar actualMethods = {};\n\n/**\n * Use this flag to check if fast signing (provided by `sodium-native` package) is available.\n * If your app is signing a large number of transaction or verifying a large number\n * of signatures make sure `sodium-native` package is installed.\n */\nvar FastSigning = exports.FastSigning = checkFastSigning();\nfunction sign(data, secretKey) {\n  return actualMethods.sign(data, secretKey);\n}\nfunction verify(data, signature, publicKey) {\n  return actualMethods.verify(data, signature, publicKey);\n}\nfunction generate(secretKey) {\n  return actualMethods.generate(secretKey);\n}\nfunction checkFastSigning() {\n  return typeof window === 'undefined' ? checkFastSigningNode() : checkFastSigningBrowser();\n}\nfunction checkFastSigningNode() {\n  // NOTE: we use commonjs style require here because es6 imports\n  // can only occur at the top level.  thanks, obama.\n  var sodium;\n  try {\n    // eslint-disable-next-line\n    sodium = __webpack_require__(/*! sodium-native */ \"(ssr)/./node_modules/.pnpm/sodium-native@4.3.3/node_modules/sodium-native/index.js\");\n  } catch (err) {\n    return checkFastSigningBrowser();\n  }\n  if (!Object.keys(sodium).length) {\n    return checkFastSigningBrowser();\n  }\n  actualMethods.generate = function (secretKey) {\n    var pk = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n    var sk = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n    sodium.crypto_sign_seed_keypair(pk, sk, secretKey);\n    return pk;\n  };\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    var signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n    sodium.crypto_sign_detached(signature, data, secretKey);\n    return signature;\n  };\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    try {\n      return sodium.crypto_sign_verify_detached(signature, data, publicKey);\n    } catch (e) {\n      return false;\n    }\n  };\n  return true;\n}\nfunction checkFastSigningBrowser() {\n  // fallback to `tweetnacl` if we're in the browser or\n  // if there was a failure installing `sodium-native`\n  // eslint-disable-next-line\n  var nacl = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl/nacl-fast.js\");\n  actualMethods.generate = function (secretKey) {\n    var secretKeyUint8 = new Uint8Array(secretKey);\n    var naclKeys = nacl.sign.keyPair.fromSeed(secretKeyUint8);\n    return Buffer.from(naclKeys.publicKey);\n  };\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    secretKey = new Uint8Array(secretKey.toJSON().data);\n    var signature = nacl.sign.detached(data, secretKey);\n    return Buffer.from(signature);\n  };\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    signature = new Uint8Array(signature.toJSON().data);\n    publicKey = new Uint8Array(publicKey.toJSON().data);\n    return nacl.sign.detached.verify(data, signature, publicKey);\n  };\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9zaWduaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLG1CQUFtQjtBQUNuQixnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyx5R0FBZTtBQUNwQyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxpR0FBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvc2lnbmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRmFzdFNpZ25pbmcgPSB2b2lkIDA7XG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLnNpZ24gPSBzaWduO1xuZXhwb3J0cy52ZXJpZnkgPSB2ZXJpZnk7XG4vLyAgVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIHNpZ25pbmcgZnVuY3Rpb25hbGl0eSB1c2VkIGJ5IHRoZSBzdGVsbGFyIG5ldHdvcmtcbi8vICBUaGUgY29kZSBiZWxvdyBtYXkgbG9vayBhIGxpdHRsZSBzdHJhbmdlLi4uIHRoaXMgaXMgYmVjYXVzZSB3ZSB0cnkgdG8gcHJvdmlkZVxuLy8gIHRoZSBtb3N0IGVmZmljaWVudCBzaWduaW5nIG1ldGhvZCBwb3NzaWJsZS4gIEZpcnN0LCB3ZSB0cnkgdG8gbG9hZCB0aGVcbi8vICBuYXRpdmUgYHNvZGl1bS1uYXRpdmVgIHBhY2thZ2UgZm9yIG5vZGUuanMgZW52aXJvbm1lbnRzLCBhbmQgaWYgdGhhdCBmYWlscyB3ZVxuLy8gIGZhbGxiYWNrIHRvIGB0d2VldG5hY2xgXG5cbnZhciBhY3R1YWxNZXRob2RzID0ge307XG5cbi8qKlxuICogVXNlIHRoaXMgZmxhZyB0byBjaGVjayBpZiBmYXN0IHNpZ25pbmcgKHByb3ZpZGVkIGJ5IGBzb2RpdW0tbmF0aXZlYCBwYWNrYWdlKSBpcyBhdmFpbGFibGUuXG4gKiBJZiB5b3VyIGFwcCBpcyBzaWduaW5nIGEgbGFyZ2UgbnVtYmVyIG9mIHRyYW5zYWN0aW9uIG9yIHZlcmlmeWluZyBhIGxhcmdlIG51bWJlclxuICogb2Ygc2lnbmF0dXJlcyBtYWtlIHN1cmUgYHNvZGl1bS1uYXRpdmVgIHBhY2thZ2UgaXMgaW5zdGFsbGVkLlxuICovXG52YXIgRmFzdFNpZ25pbmcgPSBleHBvcnRzLkZhc3RTaWduaW5nID0gY2hlY2tGYXN0U2lnbmluZygpO1xuZnVuY3Rpb24gc2lnbihkYXRhLCBzZWNyZXRLZXkpIHtcbiAgcmV0dXJuIGFjdHVhbE1ldGhvZHMuc2lnbihkYXRhLCBzZWNyZXRLZXkpO1xufVxuZnVuY3Rpb24gdmVyaWZ5KGRhdGEsIHNpZ25hdHVyZSwgcHVibGljS2V5KSB7XG4gIHJldHVybiBhY3R1YWxNZXRob2RzLnZlcmlmeShkYXRhLCBzaWduYXR1cmUsIHB1YmxpY0tleSk7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZShzZWNyZXRLZXkpIHtcbiAgcmV0dXJuIGFjdHVhbE1ldGhvZHMuZ2VuZXJhdGUoc2VjcmV0S2V5KTtcbn1cbmZ1bmN0aW9uIGNoZWNrRmFzdFNpZ25pbmcoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGNoZWNrRmFzdFNpZ25pbmdOb2RlKCkgOiBjaGVja0Zhc3RTaWduaW5nQnJvd3NlcigpO1xufVxuZnVuY3Rpb24gY2hlY2tGYXN0U2lnbmluZ05vZGUoKSB7XG4gIC8vIE5PVEU6IHdlIHVzZSBjb21tb25qcyBzdHlsZSByZXF1aXJlIGhlcmUgYmVjYXVzZSBlczYgaW1wb3J0c1xuICAvLyBjYW4gb25seSBvY2N1ciBhdCB0aGUgdG9wIGxldmVsLiAgdGhhbmtzLCBvYmFtYS5cbiAgdmFyIHNvZGl1bTtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzb2RpdW0gPSByZXF1aXJlKCdzb2RpdW0tbmF0aXZlJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBjaGVja0Zhc3RTaWduaW5nQnJvd3NlcigpO1xuICB9XG4gIGlmICghT2JqZWN0LmtleXMoc29kaXVtKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2hlY2tGYXN0U2lnbmluZ0Jyb3dzZXIoKTtcbiAgfVxuICBhY3R1YWxNZXRob2RzLmdlbmVyYXRlID0gZnVuY3Rpb24gKHNlY3JldEtleSkge1xuICAgIHZhciBwayA9IEJ1ZmZlci5hbGxvYyhzb2RpdW0uY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMpO1xuICAgIHZhciBzayA9IEJ1ZmZlci5hbGxvYyhzb2RpdW0uY3J5cHRvX3NpZ25fU0VDUkVUS0VZQllURVMpO1xuICAgIHNvZGl1bS5jcnlwdG9fc2lnbl9zZWVkX2tleXBhaXIocGssIHNrLCBzZWNyZXRLZXkpO1xuICAgIHJldHVybiBwaztcbiAgfTtcbiAgYWN0dWFsTWV0aG9kcy5zaWduID0gZnVuY3Rpb24gKGRhdGEsIHNlY3JldEtleSkge1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgICB2YXIgc2lnbmF0dXJlID0gQnVmZmVyLmFsbG9jKHNvZGl1bS5jcnlwdG9fc2lnbl9CWVRFUyk7XG4gICAgc29kaXVtLmNyeXB0b19zaWduX2RldGFjaGVkKHNpZ25hdHVyZSwgZGF0YSwgc2VjcmV0S2V5KTtcbiAgICByZXR1cm4gc2lnbmF0dXJlO1xuICB9O1xuICBhY3R1YWxNZXRob2RzLnZlcmlmeSA9IGZ1bmN0aW9uIChkYXRhLCBzaWduYXR1cmUsIHB1YmxpY0tleSkge1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHNvZGl1bS5jcnlwdG9fc2lnbl92ZXJpZnlfZGV0YWNoZWQoc2lnbmF0dXJlLCBkYXRhLCBwdWJsaWNLZXkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gY2hlY2tGYXN0U2lnbmluZ0Jyb3dzZXIoKSB7XG4gIC8vIGZhbGxiYWNrIHRvIGB0d2VldG5hY2xgIGlmIHdlJ3JlIGluIHRoZSBicm93c2VyIG9yXG4gIC8vIGlmIHRoZXJlIHdhcyBhIGZhaWx1cmUgaW5zdGFsbGluZyBgc29kaXVtLW5hdGl2ZWBcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIHZhciBuYWNsID0gcmVxdWlyZSgndHdlZXRuYWNsJyk7XG4gIGFjdHVhbE1ldGhvZHMuZ2VuZXJhdGUgPSBmdW5jdGlvbiAoc2VjcmV0S2V5KSB7XG4gICAgdmFyIHNlY3JldEtleVVpbnQ4ID0gbmV3IFVpbnQ4QXJyYXkoc2VjcmV0S2V5KTtcbiAgICB2YXIgbmFjbEtleXMgPSBuYWNsLnNpZ24ua2V5UGFpci5mcm9tU2VlZChzZWNyZXRLZXlVaW50OCk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKG5hY2xLZXlzLnB1YmxpY0tleSk7XG4gIH07XG4gIGFjdHVhbE1ldGhvZHMuc2lnbiA9IGZ1bmN0aW9uIChkYXRhLCBzZWNyZXRLZXkpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEudG9KU09OKCkuZGF0YSk7XG4gICAgc2VjcmV0S2V5ID0gbmV3IFVpbnQ4QXJyYXkoc2VjcmV0S2V5LnRvSlNPTigpLmRhdGEpO1xuICAgIHZhciBzaWduYXR1cmUgPSBuYWNsLnNpZ24uZGV0YWNoZWQoZGF0YSwgc2VjcmV0S2V5KTtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2lnbmF0dXJlKTtcbiAgfTtcbiAgYWN0dWFsTWV0aG9kcy52ZXJpZnkgPSBmdW5jdGlvbiAoZGF0YSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEudG9KU09OKCkuZGF0YSk7XG4gICAgc2lnbmF0dXJlID0gbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlLnRvSlNPTigpLmRhdGEpO1xuICAgIHB1YmxpY0tleSA9IG5ldyBVaW50OEFycmF5KHB1YmxpY0tleS50b0pTT04oKS5kYXRhKTtcbiAgICByZXR1cm4gbmFjbC5zaWduLmRldGFjaGVkLnZlcmlmeShkYXRhLCBzaWduYXR1cmUsIHB1YmxpY0tleSk7XG4gIH07XG4gIHJldHVybiBmYWxzZTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/soroban.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/soroban.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Soroban = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toArray(r) { return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* Helper class to assist with formatting and parsing token amounts. */\nvar Soroban = exports.Soroban = /*#__PURE__*/function () {\n  function Soroban() {\n    _classCallCheck(this, Soroban);\n  }\n  return _createClass(Soroban, null, [{\n    key: \"formatTokenAmount\",\n    value:\n    /**\n     * Given a whole number smart contract amount of a token and an amount of\n     * decimal places (if the token has any), it returns a \"display\" value.\n     *\n     * All arithmetic inside the contract is performed on integers to avoid\n     * potential precision and consistency issues of floating-point.\n     *\n     * @param {string} amount   the token amount you want to display\n     * @param {number} decimals specify how many decimal places a token has\n     *\n     * @returns {string} the display value\n     * @throws {TypeError} if the given amount has a decimal point already\n     * @example\n     * formatTokenAmount(\"123000\", 4) === \"12.3\";\n     */\n    function formatTokenAmount(amount, decimals) {\n      if (amount.includes('.')) {\n        throw new TypeError('No decimals are allowed');\n      }\n      var formatted = amount;\n      if (decimals > 0) {\n        if (decimals > formatted.length) {\n          formatted = ['0', formatted.toString().padStart(decimals, '0')].join('.');\n        } else {\n          formatted = [formatted.slice(0, -decimals), formatted.slice(-decimals)].join('.');\n        }\n      }\n\n      // remove trailing zero if any\n      return formatted.replace(/(\\.\\d*?)0+$/, '$1');\n    }\n\n    /**\n     * Parse a token amount to use it on smart contract\n     *\n     * This function takes the display value and its decimals (if the token has\n     * any) and returns a string that'll be used within the smart contract.\n     *\n     * @param {string} value      the token amount you want to use it on smart\n     *    contract which you've been displaying in a UI\n     * @param {number} decimals   the number of decimal places expected in the\n     *    display value (different than the \"actual\" number, because suffix zeroes\n     *    might not be present)\n     *\n     * @returns {string}  the whole number token amount represented by the display\n     *    value with the decimal places shifted over\n     *\n     * @example\n     * const displayValueAmount = \"123.4560\"\n     * const parsedAmtForSmartContract = parseTokenAmount(displayValueAmount, 5);\n     * parsedAmtForSmartContract === \"12345600\"\n     */\n  }, {\n    key: \"parseTokenAmount\",\n    value: function parseTokenAmount(value, decimals) {\n      var _fraction$padEnd;\n      var _value$split$slice = value.split('.').slice(),\n        _value$split$slice2 = _toArray(_value$split$slice),\n        whole = _value$split$slice2[0],\n        fraction = _value$split$slice2[1],\n        rest = _value$split$slice2.slice(2);\n      if (rest.length) {\n        throw new Error(\"Invalid decimal value: \".concat(value));\n      }\n      var shifted = BigInt(whole + ((_fraction$padEnd = fraction === null || fraction === void 0 ? void 0 : fraction.padEnd(decimals, '0')) !== null && _fraction$padEnd !== void 0 ? _fraction$padEnd : '0'.repeat(decimals)));\n      return shifted.toString();\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/soroban.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/sorobandata_builder.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/sorobandata_builder.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SorobanDataBuilder = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Supports building {@link xdr.SorobanTransactionData} structures with various\n * items set to specific values.\n *\n * This is recommended for when you are building\n * {@link Operation.extendFootprintTtl} / {@link Operation.restoreFootprint}\n * operations and need to {@link TransactionBuilder.setSorobanData} to avoid\n * (re)building the entire data structure from scratch.\n *\n * @constructor\n *\n * @param {string | xdr.SorobanTransactionData} [sorobanData]  either a\n *      base64-encoded string that represents an\n *      {@link xdr.SorobanTransactionData} instance or an XDR instance itself\n *      (it will be copied); if omitted or \"falsy\" (e.g. an empty string), it\n *      starts with an empty instance\n *\n * @example\n * // You want to use an existing data blob but override specific parts.\n * const newData = new SorobanDataBuilder(existing)\n *   .setReadOnly(someLedgerKeys)\n *   .setRefundableFee(\"1000\")\n *   .build();\n *\n * // You want an instance from scratch\n * const newData = new SorobanDataBuilder()\n *   .setFootprint([someLedgerKey], [])\n *   .setRefundableFee(\"1000\")\n *   .build();\n */\nvar SorobanDataBuilder = exports.SorobanDataBuilder = /*#__PURE__*/function () {\n  function SorobanDataBuilder(sorobanData) {\n    _classCallCheck(this, SorobanDataBuilder);\n    _defineProperty(this, \"_data\", void 0);\n    var data;\n    if (!sorobanData) {\n      data = new _xdr[\"default\"].SorobanTransactionData({\n        resources: new _xdr[\"default\"].SorobanResources({\n          footprint: new _xdr[\"default\"].LedgerFootprint({\n            readOnly: [],\n            readWrite: []\n          }),\n          instructions: 0,\n          readBytes: 0,\n          writeBytes: 0\n        }),\n        ext: new _xdr[\"default\"].ExtensionPoint(0),\n        resourceFee: new _xdr[\"default\"].Int64(0)\n      });\n    } else if (typeof sorobanData === 'string' || ArrayBuffer.isView(sorobanData)) {\n      data = SorobanDataBuilder.fromXDR(sorobanData);\n    } else {\n      data = SorobanDataBuilder.fromXDR(sorobanData.toXDR()); // copy\n    }\n    this._data = data;\n  }\n\n  /**\n   * Decodes and builds a {@link xdr.SorobanTransactionData} instance.\n   * @param {Uint8Array|Buffer|string} data   raw input to decode\n   * @returns {xdr.SorobanTransactionData}\n   */\n  return _createClass(SorobanDataBuilder, [{\n    key: \"setResourceFee\",\n    value:\n    /**\n     * Sets the resource fee portion of the Soroban data.\n     * @param {number | bigint | string} fee  the resource fee to set (int64)\n     * @returns {SorobanDataBuilder}\n     */\n    function setResourceFee(fee) {\n      this._data.resourceFee(new _xdr[\"default\"].Int64(fee));\n      return this;\n    }\n\n    /**\n     * Sets up the resource metrics.\n     *\n     * You should almost NEVER need this, as its often generated / provided to you\n     * by transaction simulation/preflight from a Soroban RPC server.\n     *\n     * @param {number} cpuInstrs      number of CPU instructions\n     * @param {number} readBytes      number of bytes being read\n     * @param {number} writeBytes     number of bytes being written\n     *\n     * @returns {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setResources\",\n    value: function setResources(cpuInstrs, readBytes, writeBytes) {\n      this._data.resources().instructions(cpuInstrs);\n      this._data.resources().readBytes(readBytes);\n      this._data.resources().writeBytes(writeBytes);\n      return this;\n    }\n\n    /**\n     * Appends the given ledger keys to the existing storage access footprint.\n     * @param {xdr.LedgerKey[]} readOnly   read-only keys to add\n     * @param {xdr.LedgerKey[]} readWrite  read-write keys to add\n     * @returns {SorobanDataBuilder} this builder instance\n     */\n  }, {\n    key: \"appendFootprint\",\n    value: function appendFootprint(readOnly, readWrite) {\n      return this.setFootprint(this.getReadOnly().concat(readOnly), this.getReadWrite().concat(readWrite));\n    }\n\n    /**\n     * Sets the storage access footprint to be a certain set of ledger keys.\n     *\n     * You can also set each field explicitly via\n     * {@link SorobanDataBuilder.setReadOnly} and\n     * {@link SorobanDataBuilder.setReadWrite} or add to the existing footprint\n     * via {@link SorobanDataBuilder.appendFootprint}.\n     *\n     * Passing `null|undefined` to either parameter will IGNORE the existing\n     * values. If you want to clear them, pass `[]`, instead.\n     *\n     * @param {xdr.LedgerKey[]|null} [readOnly]   the set of ledger keys to set in\n     *    the read-only portion of the transaction's `sorobanData`, or `null |\n     *    undefined` to keep the existing keys\n     * @param {xdr.LedgerKey[]|null} [readWrite]  the set of ledger keys to set in\n     *    the read-write portion of the transaction's `sorobanData`, or `null |\n     *    undefined` to keep the existing keys\n     * @returns {SorobanDataBuilder} this builder instance\n     */\n  }, {\n    key: \"setFootprint\",\n    value: function setFootprint(readOnly, readWrite) {\n      if (readOnly !== null) {\n        // null means \"leave me alone\"\n        this.setReadOnly(readOnly);\n      }\n      if (readWrite !== null) {\n        this.setReadWrite(readWrite);\n      }\n      return this;\n    }\n\n    /**\n     * @param {xdr.LedgerKey[]} readOnly  read-only keys in the access footprint\n     * @returns {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setReadOnly\",\n    value: function setReadOnly(readOnly) {\n      this._data.resources().footprint().readOnly(readOnly !== null && readOnly !== void 0 ? readOnly : []);\n      return this;\n    }\n\n    /**\n     * @param {xdr.LedgerKey[]} readWrite  read-write keys in the access footprint\n     * @returns {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setReadWrite\",\n    value: function setReadWrite(readWrite) {\n      this._data.resources().footprint().readWrite(readWrite !== null && readWrite !== void 0 ? readWrite : []);\n      return this;\n    }\n\n    /**\n     * @returns {xdr.SorobanTransactionData} a copy of the final data structure\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      return _xdr[\"default\"].SorobanTransactionData.fromXDR(this._data.toXDR()); // clone\n    }\n\n    //\n    // getters follow\n    //\n\n    /** @returns {xdr.LedgerKey[]} the read-only storage access pattern */\n  }, {\n    key: \"getReadOnly\",\n    value: function getReadOnly() {\n      return this.getFootprint().readOnly();\n    }\n\n    /** @returns {xdr.LedgerKey[]} the read-write storage access pattern */\n  }, {\n    key: \"getReadWrite\",\n    value: function getReadWrite() {\n      return this.getFootprint().readWrite();\n    }\n\n    /** @returns {xdr.LedgerFootprint} the storage access pattern */\n  }, {\n    key: \"getFootprint\",\n    value: function getFootprint() {\n      return this._data.resources().footprint();\n    }\n  }], [{\n    key: \"fromXDR\",\n    value: function fromXDR(data) {\n      return _xdr[\"default\"].SorobanTransactionData.fromXDR(data, typeof data === 'string' ? 'base64' : 'raw');\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/sorobandata_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.StrKey = void 0;\nexports.decodeCheck = decodeCheck;\nexports.encodeCheck = encodeCheck;\nvar _base = _interopRequireDefault(__webpack_require__(/*! base32.js */ \"(ssr)/./node_modules/.pnpm/base32.js@0.1.0/node_modules/base32.js/index.js\"));\nvar _checksum = __webpack_require__(/*! ./util/checksum */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/checksum.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint no-bitwise: [\"error\", {\"allow\": [\"<<\", \">>\", \"^\", \"&\", \"&=\"]}] */\nvar versionBytes = {\n  ed25519PublicKey: 6 << 3,\n  // G (when encoded in base32)\n  ed25519SecretSeed: 18 << 3,\n  // S\n  med25519PublicKey: 12 << 3,\n  // M\n  preAuthTx: 19 << 3,\n  // T\n  sha256Hash: 23 << 3,\n  // X\n  signedPayload: 15 << 3,\n  // P\n  contract: 2 << 3 // C\n};\nvar strkeyTypes = {\n  G: 'ed25519PublicKey',\n  S: 'ed25519SecretSeed',\n  M: 'med25519PublicKey',\n  T: 'preAuthTx',\n  X: 'sha256Hash',\n  P: 'signedPayload',\n  C: 'contract'\n};\n\n/**\n * StrKey is a helper class that allows encoding and decoding Stellar keys\n * to/from strings, i.e. between their binary (Buffer, xdr.PublicKey, etc.) and\n * string (i.e. \"GABCD...\", etc.) representations.\n */\nvar StrKey = exports.StrKey = /*#__PURE__*/function () {\n  function StrKey() {\n    _classCallCheck(this, StrKey);\n  }\n  return _createClass(StrKey, null, [{\n    key: \"encodeEd25519PublicKey\",\n    value:\n    /**\n     * Encodes `data` to strkey ed25519 public key.\n     *\n     * @param   {Buffer} data   raw data to encode\n     * @returns {string}        \"G...\" representation of the key\n     */\n    function encodeEd25519PublicKey(data) {\n      return encodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 public key to raw data.\n     *\n     * If the parameter is a muxed account key (\"M...\"), this will only encode it\n     * as a basic Ed25519 key (as if in \"G...\" format).\n     *\n     * @param   {string} data   \"G...\" (or \"M...\") key representation to decode\n     * @returns {Buffer}        raw key\n     */\n  }, {\n    key: \"decodeEd25519PublicKey\",\n    value: function decodeEd25519PublicKey(data) {\n      return decodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid ed25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidEd25519PublicKey\",\n    value: function isValidEd25519PublicKey(publicKey) {\n      return isValid('ed25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey ed25519 seed.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeEd25519SecretSeed\",\n    value: function encodeEd25519SecretSeed(data) {\n      return encodeCheck('ed25519SecretSeed', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 seed to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeEd25519SecretSeed\",\n    value: function decodeEd25519SecretSeed(address) {\n      return decodeCheck('ed25519SecretSeed', address);\n    }\n\n    /**\n     * Returns true if the given Stellar secret key is a valid ed25519 secret seed.\n     * @param {string} seed seed to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidEd25519SecretSeed\",\n    value: function isValidEd25519SecretSeed(seed) {\n      return isValid('ed25519SecretSeed', seed);\n    }\n\n    /**\n     * Encodes data to strkey med25519 public key.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeMed25519PublicKey\",\n    value: function encodeMed25519PublicKey(data) {\n      return encodeCheck('med25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey med25519 public key to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeMed25519PublicKey\",\n    value: function decodeMed25519PublicKey(address) {\n      return decodeCheck('med25519PublicKey', address);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid med25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidMed25519PublicKey\",\n    value: function isValidMed25519PublicKey(publicKey) {\n      return isValid('med25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey preAuthTx.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodePreAuthTx\",\n    value: function encodePreAuthTx(data) {\n      return encodeCheck('preAuthTx', data);\n    }\n\n    /**\n     * Decodes strkey PreAuthTx to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodePreAuthTx\",\n    value: function decodePreAuthTx(address) {\n      return decodeCheck('preAuthTx', address);\n    }\n\n    /**\n     * Encodes data to strkey sha256 hash.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeSha256Hash\",\n    value: function encodeSha256Hash(data) {\n      return encodeCheck('sha256Hash', data);\n    }\n\n    /**\n     * Decodes strkey sha256 hash to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeSha256Hash\",\n    value: function decodeSha256Hash(address) {\n      return decodeCheck('sha256Hash', address);\n    }\n\n    /**\n     * Encodes raw data to strkey signed payload (P...).\n     * @param   {Buffer} data  data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeSignedPayload\",\n    value: function encodeSignedPayload(data) {\n      return encodeCheck('signedPayload', data);\n    }\n\n    /**\n     * Decodes strkey signed payload (P...) to raw data.\n     * @param   {string} address  address to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeSignedPayload\",\n    value: function decodeSignedPayload(address) {\n      return decodeCheck('signedPayload', address);\n    }\n\n    /**\n     * Checks validity of alleged signed payload (P...) strkey address.\n     * @param   {string} address  signer key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidSignedPayload\",\n    value: function isValidSignedPayload(address) {\n      return isValid('signedPayload', address);\n    }\n\n    /**\n     * Encodes raw data to strkey contract (C...).\n     * @param   {Buffer} data  data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeContract\",\n    value: function encodeContract(data) {\n      return encodeCheck('contract', data);\n    }\n\n    /**\n     * Decodes strkey contract (C...) to raw data.\n     * @param   {string} address  address to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeContract\",\n    value: function decodeContract(address) {\n      return decodeCheck('contract', address);\n    }\n\n    /**\n     * Checks validity of alleged contract (C...) strkey address.\n     * @param   {string} address  signer key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidContract\",\n    value: function isValidContract(address) {\n      return isValid('contract', address);\n    }\n  }, {\n    key: \"getVersionByteForPrefix\",\n    value: function getVersionByteForPrefix(address) {\n      return strkeyTypes[address[0]];\n    }\n  }]);\n}();\n/**\n * Sanity-checks whether or not a strkey *appears* valid.\n *\n * @param  {string}  versionByteName the type of strkey to expect in `encoded`\n * @param  {string}  encoded         the strkey to validate\n *\n * @return {Boolean} whether or not the `encoded` strkey appears valid for the\n *     `versionByteName` strkey type (see `versionBytes`, above).\n *\n * @note This isn't a *definitive* check of validity, but rather a best-effort\n *     check based on (a) input length, (b) whether or not it can be decoded,\n *     and (c) output length.\n */\nfunction isValid(versionByteName, encoded) {\n  if (typeof encoded !== 'string') {\n    return false;\n  }\n\n  // basic length checks on the strkey lengths\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash': // falls through\n    case 'contract':\n      if (encoded.length !== 56) {\n        return false;\n      }\n      break;\n    case 'med25519PublicKey':\n      if (encoded.length !== 69) {\n        return false;\n      }\n      break;\n    case 'signedPayload':\n      if (encoded.length < 56 || encoded.length > 165) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n  }\n  var decoded = '';\n  try {\n    decoded = decodeCheck(versionByteName, encoded);\n  } catch (err) {\n    return false;\n  }\n\n  // basic length checks on the resulting buffer sizes\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash': // falls through\n    case 'contract':\n      return decoded.length === 32;\n    case 'med25519PublicKey':\n      return decoded.length === 40;\n    // +8 bytes for the ID\n\n    case 'signedPayload':\n      return (\n        // 32 for the signer, +4 for the payload size, then either +4 for the\n        // min or +64 for the max payload\n        decoded.length >= 32 + 4 + 4 && decoded.length <= 32 + 4 + 64\n      );\n    default:\n      return false;\n  }\n}\nfunction decodeCheck(versionByteName, encoded) {\n  if (typeof encoded !== 'string') {\n    throw new TypeError('encoded argument must be of type String');\n  }\n  var decoded = _base[\"default\"].decode(encoded);\n  var versionByte = decoded[0];\n  var payload = decoded.slice(0, -2);\n  var data = payload.slice(1);\n  var checksum = decoded.slice(-2);\n  if (encoded !== _base[\"default\"].encode(decoded)) {\n    throw new Error('invalid encoded string');\n  }\n  var expectedVersion = versionBytes[versionByteName];\n  if (expectedVersion === undefined) {\n    throw new Error(\"\".concat(versionByteName, \" is not a valid version byte name. \") + \"Expected one of \".concat(Object.keys(versionBytes).join(', ')));\n  }\n  if (versionByte !== expectedVersion) {\n    throw new Error(\"invalid version byte. expected \".concat(expectedVersion, \", got \").concat(versionByte));\n  }\n  var expectedChecksum = calculateChecksum(payload);\n  if (!(0, _checksum.verifyChecksum)(expectedChecksum, checksum)) {\n    throw new Error(\"invalid checksum\");\n  }\n  return Buffer.from(data);\n}\nfunction encodeCheck(versionByteName, data) {\n  if (data === null || data === undefined) {\n    throw new Error('cannot encode null data');\n  }\n  var versionByte = versionBytes[versionByteName];\n  if (versionByte === undefined) {\n    throw new Error(\"\".concat(versionByteName, \" is not a valid version byte name. \") + \"Expected one of \".concat(Object.keys(versionBytes).join(', ')));\n  }\n  data = Buffer.from(data);\n  var versionBuffer = Buffer.from([versionByte]);\n  var payload = Buffer.concat([versionBuffer, data]);\n  var checksum = Buffer.from(calculateChecksum(payload));\n  var unencoded = Buffer.concat([payload, checksum]);\n  return _base[\"default\"].encode(unencoded);\n}\n\n// Computes the CRC16-XModem checksum of `payload` in little-endian order\nfunction calculateChecksum(payload) {\n  var crcTable = [0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0];\n  var crc16 = 0x0;\n  for (var i = 0; i < payload.length; i += 1) {\n    var _byte = payload[i];\n    var lookupIndex = crc16 >> 8 ^ _byte;\n    crc16 = crc16 << 8 ^ crcTable[lookupIndex];\n    crc16 &= 0xffff;\n  }\n  var checksum = new Uint8Array(2);\n  checksum[0] = crc16 & 0xff;\n  checksum[1] = crc16 >> 8 & 0xff;\n  return checksum;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Transaction = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _operation = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/operation.js\");\nvar _memo = __webpack_require__(/*! ./memo */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/memo.js\");\nvar _transaction_base = __webpack_require__(/*! ./transaction_base */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_base.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Use {@link TransactionBuilder} to build a transaction object. If you have an\n * object or base64-encoded string of the transaction envelope XDR, use {@link\n * TransactionBuilder.fromXDR}.\n *\n * Once a Transaction has been created, its attributes and operations should not\n * be changed. You should only add signatures (using {@link Transaction#sign})\n * to a Transaction object before submitting to the network or forwarding on to\n * additional signers.\n *\n * @constructor\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string\n * @param {string}  [networkPassphrase] - passphrase of the target stellar\n *     network (e.g. \"Public Global Stellar Network ; September 2015\")\n *\n * @extends TransactionBase\n */\nvar Transaction = exports.Transaction = /*#__PURE__*/function (_TransactionBase) {\n  function Transaction(envelope, networkPassphrase) {\n    var _this;\n    _classCallCheck(this, Transaction);\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _xdr[\"default\"].TransactionEnvelope.fromXDR(buffer);\n    }\n    var envelopeType = envelope[\"switch\"]();\n    if (!(envelopeType === _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0() || envelopeType === _xdr[\"default\"].EnvelopeType.envelopeTypeTx())) {\n      throw new Error(\"Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an \".concat(envelopeType.name, \".\"));\n    }\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    var signatures = (txEnvelope.signatures() || []).slice();\n    _this = _callSuper(this, Transaction, [tx, signatures, fee, networkPassphrase]);\n    _this._envelopeType = envelopeType;\n    _this._memo = tx.memo();\n    _this._sequence = tx.seqNum().toString();\n    switch (_this._envelopeType) {\n      case _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0():\n        _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());\n        break;\n      default:\n        _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount());\n        break;\n    }\n    var cond = null;\n    var timeBounds = null;\n    switch (_this._envelopeType) {\n      case _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0():\n        timeBounds = tx.timeBounds();\n        break;\n      case _xdr[\"default\"].EnvelopeType.envelopeTypeTx():\n        switch (tx.cond()[\"switch\"]()) {\n          case _xdr[\"default\"].PreconditionType.precondTime():\n            timeBounds = tx.cond().timeBounds();\n            break;\n          case _xdr[\"default\"].PreconditionType.precondV2():\n            cond = tx.cond().v2();\n            timeBounds = cond.timeBounds();\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    if (timeBounds) {\n      _this._timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n    if (cond) {\n      var ledgerBounds = cond.ledgerBounds();\n      if (ledgerBounds) {\n        _this._ledgerBounds = {\n          minLedger: ledgerBounds.minLedger(),\n          maxLedger: ledgerBounds.maxLedger()\n        };\n      }\n      var minSeq = cond.minSeqNum();\n      if (minSeq) {\n        _this._minAccountSequence = minSeq.toString();\n      }\n      _this._minAccountSequenceAge = cond.minSeqAge();\n      _this._minAccountSequenceLedgerGap = cond.minSeqLedgerGap();\n      _this._extraSigners = cond.extraSigners();\n    }\n    var operations = tx.operations() || [];\n    _this._operations = operations.map(function (op) {\n      return _operation.Operation.fromXDRObject(op);\n    });\n    return _this;\n  }\n\n  /**\n   * @type {object}\n   * @property {string} 64 bit unix timestamp\n   * @property {string} 64 bit unix timestamp\n   * @readonly\n   */\n  _inherits(Transaction, _TransactionBase);\n  return _createClass(Transaction, [{\n    key: \"timeBounds\",\n    get: function get() {\n      return this._timeBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {object}\n     * @property {number} minLedger - smallest ledger bound (uint32)\n     * @property {number} maxLedger - largest ledger bound (or 0 for inf)\n     * @readonly\n     */\n  }, {\n    key: \"ledgerBounds\",\n    get: function get() {\n      return this._ledgerBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * 64 bit account sequence\n     * @readonly\n     * @type {string}\n     */\n  }, {\n    key: \"minAccountSequence\",\n    get: function get() {\n      return this._minAccountSequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * 64 bit number of seconds\n     * @type {number}\n     * @readonly\n     */\n  }, {\n    key: \"minAccountSequenceAge\",\n    get: function get() {\n      return this._minAccountSequenceAge;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * 32 bit number of ledgers\n     * @type {number}\n     * @readonly\n     */\n  }, {\n    key: \"minAccountSequenceLedgerGap\",\n    get: function get() {\n      return this._minAccountSequenceLedgerGap;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * array of extra signers ({@link StrKey}s)\n     * @type {string[]}\n     * @readonly\n     */\n  }, {\n    key: \"extraSigners\",\n    get: function get() {\n      return this._extraSigners;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"sequence\",\n    get: function get() {\n      return this._sequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"source\",\n    get: function get() {\n      return this._source;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {Array.<xdr.Operation>}\n     * @readonly\n     */\n  }, {\n    key: \"operations\",\n    get: function get() {\n      return this._operations;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"memo\",\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"signatureBase\",\n    value: function signatureBase() {\n      var tx = this.tx;\n\n      // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n      // we need a Transaction to generate the signature base\n      if (this._envelopeType === _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0()) {\n        tx = _xdr[\"default\"].Transaction.fromXDR(Buffer.concat([\n        // TransactionV0 is a transaction with the AccountID discriminant\n        // stripped off, we need to put it back to build a valid transaction\n        // which we can use to build a TransactionSignaturePayloadTaggedTransaction\n        _xdr[\"default\"].PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));\n      }\n      var taggedTransaction = new _xdr[\"default\"].TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);\n      var txSignature = new _xdr[\"default\"].TransactionSignaturePayload({\n        networkId: _xdr[\"default\"].Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n  }, {\n    key: \"toEnvelope\",\n    value: function toEnvelope() {\n      var rawTx = this.tx.toXDR();\n      var signatures = this.signatures.slice(); // make a copy of the signatures\n\n      var envelope;\n      switch (this._envelopeType) {\n        case _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0():\n          envelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTxV0(new _xdr[\"default\"].TransactionV0Envelope({\n            tx: _xdr[\"default\"].TransactionV0.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        case _xdr[\"default\"].EnvelopeType.envelopeTypeTx():\n          envelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(new _xdr[\"default\"].TransactionV1Envelope({\n            tx: _xdr[\"default\"].Transaction.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        default:\n          throw new Error(\"Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an \".concat(this._envelopeType.name, \".\"));\n      }\n      return envelope;\n    }\n\n    /**\n     * Calculate the claimable balance ID for an operation within the transaction.\n     *\n     * @param   {integer}  opIndex   the index of the CreateClaimableBalance op\n     * @returns {string}   a hex string representing the claimable balance ID\n     *\n     * @throws {RangeError}   for invalid `opIndex` value\n     * @throws {TypeError}    if op at `opIndex` is not `CreateClaimableBalance`\n     * @throws for general XDR un/marshalling failures\n     *\n     * @see https://github.com/stellar/go/blob/d712346e61e288d450b0c08038c158f8848cc3e4/txnbuild/transaction.go#L392-L435\n     *\n     */\n  }, {\n    key: \"getClaimableBalanceId\",\n    value: function getClaimableBalanceId(opIndex) {\n      // Validate and then extract the operation from the transaction.\n      if (!Number.isInteger(opIndex) || opIndex < 0 || opIndex >= this.operations.length) {\n        throw new RangeError('invalid operation index');\n      }\n      var op = this.operations[opIndex];\n      try {\n        op = _operation.Operation.createClaimableBalance(op);\n      } catch (err) {\n        throw new TypeError(\"expected createClaimableBalance, got \".concat(op.type, \": \").concat(err));\n      }\n\n      // Always use the transaction's *unmuxed* source.\n      var account = _strkey.StrKey.decodeEd25519PublicKey((0, _decode_encode_muxed_account.extractBaseAddress)(this.source));\n      var operationId = _xdr[\"default\"].HashIdPreimage.envelopeTypeOpId(new _xdr[\"default\"].HashIdPreimageOperationId({\n        sourceAccount: _xdr[\"default\"].AccountId.publicKeyTypeEd25519(account),\n        seqNum: _xdr[\"default\"].SequenceNumber.fromString(this.sequence),\n        opNum: opIndex\n      }));\n      var opIdHash = (0, _hashing.hash)(operationId.toXDR('raw'));\n      var balanceId = _xdr[\"default\"].ClaimableBalanceId.claimableBalanceIdTypeV0(opIdHash);\n      return balanceId.toXDR('hex');\n    }\n  }]);\n}(_transaction_base.TransactionBase);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_base.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_base.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TransactionBase = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/keypair.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * @ignore\n */\nvar TransactionBase = exports.TransactionBase = /*#__PURE__*/function () {\n  function TransactionBase(tx, signatures, fee, networkPassphrase) {\n    _classCallCheck(this, TransactionBase);\n    if (typeof networkPassphrase !== 'string') {\n      throw new Error(\"Invalid passphrase provided to Transaction: expected a string but got a \".concat(_typeof(networkPassphrase)));\n    }\n    this._networkPassphrase = networkPassphrase;\n    this._tx = tx;\n    this._signatures = signatures;\n    this._fee = fee;\n  }\n\n  /**\n   * @type {Array.<xdr.DecoratedSignature>}\n   * @readonly\n   */\n  return _createClass(TransactionBase, [{\n    key: \"signatures\",\n    get: function get() {\n      return this._signatures;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }, {\n    key: \"tx\",\n    get: function get() {\n      return this._tx;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"fee\",\n    get: function get() {\n      return this._fee;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"networkPassphrase\",\n    get: function get() {\n      return this._networkPassphrase;\n    },\n    set: function set(networkPassphrase) {\n      this._networkPassphrase = networkPassphrase;\n    }\n\n    /**\n     * Signs the transaction with the given {@link Keypair}.\n     * @param {...Keypair} keypairs Keypairs of signers\n     * @returns {void}\n     */\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      var _this = this;\n      var txHash = this.hash();\n      for (var _len = arguments.length, keypairs = new Array(_len), _key = 0; _key < _len; _key++) {\n        keypairs[_key] = arguments[_key];\n      }\n      keypairs.forEach(function (kp) {\n        var sig = kp.signDecorated(txHash);\n        _this.signatures.push(sig);\n      });\n    }\n\n    /**\n     * Signs a transaction with the given {@link Keypair}. Useful if someone sends\n     * you a transaction XDR for you to sign and return (see\n     * [addSignature](#addSignature) for more information).\n     *\n     * When you get a transaction XDR to sign....\n     * - Instantiate a `Transaction` object with the XDR\n     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.\n     * - Run `getKeypairSignature` with that keypair\n     * - Send back the signature along with your publicKey (not your secret seed!)\n     *\n     * Example:\n     * ```javascript\n     * // `transactionXDR` is a string from the person generating the transaction\n     * const transaction = new Transaction(transactionXDR, networkPassphrase);\n     * const keypair = Keypair.fromSecret(myStellarSeed);\n     * return transaction.getKeypairSignature(keypair);\n     * ```\n     *\n     * @param {Keypair} keypair Keypair of signer\n     * @returns {string} Signature string\n     */\n  }, {\n    key: \"getKeypairSignature\",\n    value: function getKeypairSignature(keypair) {\n      return keypair.sign(this.hash()).toString('base64');\n    }\n\n    /**\n     * Add a signature to the transaction. Useful when a party wants to pre-sign\n     * a transaction but doesn't want to give access to their secret keys.\n     * This will also verify whether the signature is valid.\n     *\n     * Here's how you would use this feature to solicit multiple signatures.\n     * - Use `TransactionBuilder` to build a new transaction.\n     * - Make sure to set a long enough timeout on that transaction to give your\n     * signers enough time to sign!\n     * - Once you build the transaction, use `transaction.toXDR()` to get the\n     * base64-encoded XDR string.\n     * - _Warning!_ Once you've built this transaction, don't submit any other\n     * transactions onto your account! Doing so will invalidate this pre-compiled\n     * transaction!\n     * - Send this XDR string to your other parties. They can use the instructions\n     * for [getKeypairSignature](#getKeypairSignature) to sign the transaction.\n     * - They should send you back their `publicKey` and the `signature` string\n     * from [getKeypairSignature](#getKeypairSignature), both of which you pass to\n     * this function.\n     *\n     * @param {string} publicKey The public key of the signer\n     * @param {string} signature The base64 value of the signature XDR\n     * @returns {void}\n     */\n  }, {\n    key: \"addSignature\",\n    value: function addSignature() {\n      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      if (!signature || typeof signature !== 'string') {\n        throw new Error('Invalid signature');\n      }\n      if (!publicKey || typeof publicKey !== 'string') {\n        throw new Error('Invalid publicKey');\n      }\n      var keypair;\n      var hint;\n      var signatureBuffer = Buffer.from(signature, 'base64');\n      try {\n        keypair = _keypair.Keypair.fromPublicKey(publicKey);\n        hint = keypair.signatureHint();\n      } catch (e) {\n        throw new Error('Invalid publicKey');\n      }\n      if (!keypair.verify(this.hash(), signatureBuffer)) {\n        throw new Error('Invalid signature');\n      }\n      this.signatures.push(new _xdr[\"default\"].DecoratedSignature({\n        hint: hint,\n        signature: signatureBuffer\n      }));\n    }\n\n    /**\n     * Add a decorated signature directly to the transaction envelope.\n     *\n     * @param {xdr.DecoratedSignature} signature    raw signature to add\n     * @returns {void}\n     *\n     * @see Keypair.signDecorated\n     * @see Keypair.signPayloadDecorated\n     */\n  }, {\n    key: \"addDecoratedSignature\",\n    value: function addDecoratedSignature(signature) {\n      this.signatures.push(signature);\n    }\n\n    /**\n     * Add `hashX` signer preimage as signature.\n     * @param {Buffer|String} preimage Preimage of hash used as signer\n     * @returns {void}\n     */\n  }, {\n    key: \"signHashX\",\n    value: function signHashX(preimage) {\n      if (typeof preimage === 'string') {\n        preimage = Buffer.from(preimage, 'hex');\n      }\n      if (preimage.length > 64) {\n        throw new Error('preimage cannnot be longer than 64 bytes');\n      }\n      var signature = preimage;\n      var hashX = (0, _hashing.hash)(preimage);\n      var hint = hashX.slice(hashX.length - 4);\n      this.signatures.push(new _xdr[\"default\"].DecoratedSignature({\n        hint: hint,\n        signature: signature\n      }));\n    }\n\n    /**\n     * Returns a hash for this transaction, suitable for signing.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return (0, _hashing.hash)(this.signatureBase());\n    }\n  }, {\n    key: \"signatureBase\",\n    value: function signatureBase() {\n      throw new Error('Implement in subclass');\n    }\n  }, {\n    key: \"toEnvelope\",\n    value: function toEnvelope() {\n      throw new Error('Implement in subclass');\n    }\n\n    /**\n     * Get the transaction envelope as a base64-encoded string\n     * @returns {string} XDR string\n     */\n  }, {\n    key: \"toXDR\",\n    value: function toXDR() {\n      return this.toEnvelope().toXDR().toString('base64');\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_builder.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_builder.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TransactionBuilder = exports.TimeoutInfinite = exports.BASE_FEE = void 0;\nexports.isValidDate = isValidDate;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+js-xdr@3.1.2/node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./util/bignumber */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _account = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/account.js\");\nvar _muxed_account = __webpack_require__(/*! ./muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/muxed_account.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nvar _transaction = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction.js\");\nvar _fee_bump_transaction = __webpack_require__(/*! ./fee_bump_transaction */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js\");\nvar _sorobandata_builder = __webpack_require__(/*! ./sorobandata_builder */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/sorobandata_builder.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _signerkey = __webpack_require__(/*! ./signerkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/signerkey.js\");\nvar _memo = __webpack_require__(/*! ./memo */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/memo.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Minimum base fee for transactions. If this fee is below the network\n * minimum, the transaction will fail. The more operations in the\n * transaction, the greater the required fee. Use {@link\n * Server#fetchBaseFee} to get an accurate value of minimum transaction\n * fee on the network.\n *\n * @constant\n * @see [Fees](https://developers.stellar.org/docs/glossary/fees/)\n */\nvar BASE_FEE = exports.BASE_FEE = '100'; // Stroops\n\n/**\n * @constant\n * @see {@link TransactionBuilder#setTimeout}\n * @see [Timeout](https://developers.stellar.org/api/resources/transactions/post/)\n */\nvar TimeoutInfinite = exports.TimeoutInfinite = 0;\n\n/**\n * <p>Transaction builder helps constructs a new `{@link Transaction}` using the\n * given {@link Account} as the transaction's \"source account\". The transaction\n * will use the current sequence number of the given account as its sequence\n * number and increment the given account's sequence number by one. The given\n * source account must include a private key for signing the transaction or an\n * error will be thrown.</p>\n *\n * <p>Operations can be added to the transaction via their corresponding builder\n * methods, and each returns the TransactionBuilder object so they can be\n * chained together. After adding the desired operations, call the `build()`\n * method on the `TransactionBuilder` to return a fully constructed `{@link\n * Transaction}` that can be signed. The returned transaction will contain the\n * sequence number of the source account and include the signature from the\n * source account.</p>\n *\n * <p><strong>Be careful about unsubmitted transactions!</strong> When you build\n * a transaction, `stellar-sdk` automatically increments the source account's\n * sequence number. If you end up not submitting this transaction and submitting\n * another one instead, it'll fail due to the sequence number being wrong. So if\n * you decide not to use a built transaction, make sure to update the source\n * account's sequence number with\n * [Server.loadAccount](https://stellar.github.io/js-stellar-sdk/Server.html#loadAccount)\n * before creating another transaction.</p>\n *\n * <p>The following code example creates a new transaction with {@link\n * Operation.createAccount} and {@link Operation.payment} operations. The\n * Transaction's source account first funds `destinationA`, then sends a payment\n * to `destinationB`. The built transaction is then signed by\n * `sourceKeypair`.</p>\n *\n * ```\n * var transaction = new TransactionBuilder(source, { fee, networkPassphrase: Networks.TESTNET })\n * .addOperation(Operation.createAccount({\n *     destination: destinationA,\n *     startingBalance: \"20\"\n * })) // <- funds and creates destinationA\n * .addOperation(Operation.payment({\n *     destination: destinationB,\n *     amount: \"100\",\n *     asset: Asset.native()\n * })) // <- sends 100 XLM to destinationB\n * .setTimeout(30)\n * .build();\n *\n * transaction.sign(sourceKeypair);\n * ```\n *\n * @constructor\n *\n * @param {Account} sourceAccount - source account for this transaction\n * @param {object}  opts          - Options object\n * @param {string}  opts.fee      - max fee you're willing to pay per\n *     operation in this transaction (**in stroops**)\n *\n * @param {object}              [opts.timebounds] - timebounds for the\n *     validity of this transaction\n * @param {number|string|Date}  [opts.timebounds.minTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {number|string|Date}  [opts.timebounds.maxTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {object}              [opts.ledgerbounds] - ledger bounds for the\n *     validity of this transaction\n * @param {number}              [opts.ledgerbounds.minLedger] - number of the minimum\n *     ledger sequence\n * @param {number}              [opts.ledgerbounds.maxLedger] - number of the maximum\n *     ledger sequence\n * @param {string}              [opts.minAccountSequence] - number for\n *     the minimum account sequence\n * @param {number}              [opts.minAccountSequenceAge] - number of\n *     seconds for the minimum account sequence age\n * @param {number}              [opts.minAccountSequenceLedgerGap] - number of\n *     ledgers for the minimum account sequence ledger gap\n * @param {string[]}            [opts.extraSigners] - list of the extra signers\n *     required for this transaction\n * @param {Memo}                [opts.memo] - memo for the transaction\n * @param {string}              [opts.networkPassphrase] passphrase of the\n *     target Stellar network (e.g. \"Public Global Stellar Network ; September\n *     2015\" for the pubnet)\n * @param {xdr.SorobanTransactionData | string}  [opts.sorobanData] - an\n *     optional instance of {@link xdr.SorobanTransactionData} to be set as the\n *     internal `Transaction.Ext.SorobanData` field (either the xdr object or a\n *     base64 string). In the case of Soroban transactions, this can be obtained\n *     from a prior simulation of the transaction with a contract invocation and\n *     provides necessary resource estimations. You can also use\n *     {@link SorobanDataBuilder} to construct complicated combinations of\n *     parameters without mucking with XDR directly. **Note:** For\n *     non-contract(non-Soroban) transactions, this has no effect.\n */\nvar TransactionBuilder = exports.TransactionBuilder = /*#__PURE__*/function () {\n  function TransactionBuilder(sourceAccount) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, TransactionBuilder);\n    if (!sourceAccount) {\n      throw new Error('must specify source account for the transaction');\n    }\n    if (opts.fee === undefined) {\n      throw new Error('must specify fee for the transaction (in stroops)');\n    }\n    this.source = sourceAccount;\n    this.operations = [];\n    this.baseFee = opts.fee;\n    this.timebounds = opts.timebounds ? _objectSpread({}, opts.timebounds) : null;\n    this.ledgerbounds = opts.ledgerbounds ? _objectSpread({}, opts.ledgerbounds) : null;\n    this.minAccountSequence = opts.minAccountSequence || null;\n    this.minAccountSequenceAge = opts.minAccountSequenceAge || null;\n    this.minAccountSequenceLedgerGap = opts.minAccountSequenceLedgerGap || null;\n    this.extraSigners = opts.extraSigners ? _toConsumableArray(opts.extraSigners) : null;\n    this.memo = opts.memo || _memo.Memo.none();\n    this.networkPassphrase = opts.networkPassphrase || null;\n    this.sorobanData = opts.sorobanData ? new _sorobandata_builder.SorobanDataBuilder(opts.sorobanData).build() : null;\n  }\n\n  /**\n   * Creates a builder instance using an existing {@link Transaction} as a\n   * template, ignoring any existing envelope signatures.\n   *\n   * Note that the sequence number WILL be cloned, so EITHER this transaction or\n   * the one it was cloned from will be valid. This is useful in situations\n   * where you are constructing a transaction in pieces and need to make\n   * adjustments as you go (for example, when filling out Soroban resource\n   * information).\n   *\n   * @param {Transaction} tx  a \"template\" transaction to clone exactly\n   * @param {object} [opts]   additional options to override the clone, e.g.\n   *    {fee: '1000'} will override the existing base fee derived from `tx` (see\n   *    the {@link TransactionBuilder} constructor for detailed options)\n   *\n   * @returns {TransactionBuilder} a \"prepared\" builder instance with the same\n   *    configuration and operations as the given transaction\n   *\n   * @warning This does not clone the transaction's\n   *    {@link xdr.SorobanTransactionData} (if applicable), use\n   *    {@link SorobanDataBuilder} and {@link TransactionBuilder.setSorobanData}\n   *    as needed, instead..\n   *\n   * @todo This cannot clone {@link FeeBumpTransaction}s, yet.\n   */\n  return _createClass(TransactionBuilder, [{\n    key: \"addOperation\",\n    value:\n    /**\n     * Adds an operation to the transaction.\n     *\n     * @param {xdr.Operation} operation   The xdr operation object, use {@link\n     *     Operation} static methods.\n     *\n     * @returns {TransactionBuilder}\n     */\n    function addOperation(operation) {\n      this.operations.push(operation);\n      return this;\n    }\n\n    /**\n     * Adds an operation to the transaction at a specific index.\n     *\n     * @param {xdr.Operation} operation - The xdr operation object to add, use {@link Operation} static methods.\n     * @param {number} index - The index at which to insert the operation.\n     *\n     * @returns {TransactionBuilder} - The TransactionBuilder instance for method chaining.\n     */\n  }, {\n    key: \"addOperationAt\",\n    value: function addOperationAt(operation, index) {\n      this.operations.splice(index, 0, operation);\n      return this;\n    }\n\n    /**\n     * Removes the operations from the builder (useful when cloning).\n     * @returns {TransactionBuilder} this builder instance\n     */\n  }, {\n    key: \"clearOperations\",\n    value: function clearOperations() {\n      this.operations = [];\n      return this;\n    }\n\n    /**\n     * Removes the operation at the specified index from the transaction.\n     *\n     * @param {number} index - The index of the operation to remove.\n     *\n     * @returns {TransactionBuilder} The TransactionBuilder instance for method chaining.\n     */\n  }, {\n    key: \"clearOperationAt\",\n    value: function clearOperationAt(index) {\n      this.operations.splice(index, 1);\n      return this;\n    }\n\n    /**\n     * Adds a memo to the transaction.\n     * @param {Memo} memo {@link Memo} object\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"addMemo\",\n    value: function addMemo(memo) {\n      this.memo = memo;\n      return this;\n    }\n\n    /**\n     * Sets a timeout precondition on the transaction.\n     *\n     *  Because of the distributed nature of the Stellar network it is possible\n     *  that the status of your transaction will be determined after a long time\n     *  if the network is highly congested. If you want to be sure to receive the\n     *  status of the transaction within a given period you should set the {@link\n     *  TimeBounds} with `maxTime` on the transaction (this is what `setTimeout`\n     *  does internally; if there's `minTime` set but no `maxTime` it will be\n     *  added).\n     *\n     *  A call to `TransactionBuilder.setTimeout` is **required** if Transaction\n     *  does not have `max_time` set. If you don't want to set timeout, use\n     *  `{@link TimeoutInfinite}`. In general you should set `{@link\n     *  TimeoutInfinite}` only in smart contracts.\n     *\n     *  Please note that Horizon may still return <code>504 Gateway Timeout</code>\n     *  error, even for short timeouts. In such case you need to resubmit the same\n     *  transaction again without making any changes to receive a status. This\n     *  method is using the machine system time (UTC), make sure it is set\n     *  correctly.\n     *\n     * @param {number} timeoutSeconds   Number of seconds the transaction is good.\n     *     Can't be negative. If the value is {@link TimeoutInfinite}, the\n     *     transaction is good indefinitely.\n     *\n     * @returns {TransactionBuilder}\n     *\n     * @see {@link TimeoutInfinite}\n     * @see https://developers.stellar.org/docs/tutorials/handling-errors/\n     */\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeoutSeconds) {\n      if (this.timebounds !== null && this.timebounds.maxTime > 0) {\n        throw new Error('TimeBounds.max_time has been already set - setting timeout would overwrite it.');\n      }\n      if (timeoutSeconds < 0) {\n        throw new Error('timeout cannot be negative');\n      }\n      if (timeoutSeconds > 0) {\n        var timeoutTimestamp = Math.floor(Date.now() / 1000) + timeoutSeconds;\n        if (this.timebounds === null) {\n          this.timebounds = {\n            minTime: 0,\n            maxTime: timeoutTimestamp\n          };\n        } else {\n          this.timebounds = {\n            minTime: this.timebounds.minTime,\n            maxTime: timeoutTimestamp\n          };\n        }\n      } else {\n        this.timebounds = {\n          minTime: 0,\n          maxTime: 0\n        };\n      }\n      return this;\n    }\n\n    /**\n     * If you want to prepare a transaction which will become valid at some point\n     * in the future, or be invalid after some time, you can set a timebounds\n     * precondition. Internally this will set the `minTime`, and `maxTime`\n     * preconditions. Conflicts with `setTimeout`, so use one or the other.\n     *\n     * @param {Date|number} minEpochOrDate  Either a JS Date object, or a number\n     *     of UNIX epoch seconds. The transaction is valid after this timestamp.\n     *     Can't be negative. If the value is `0`, the transaction is valid\n     *     immediately.\n     * @param {Date|number} maxEpochOrDate  Either a JS Date object, or a number\n     *     of UNIX epoch seconds. The transaction is valid until this timestamp.\n     *     Can't be negative. If the value is `0`, the transaction is valid\n     *     indefinitely.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setTimebounds\",\n    value: function setTimebounds(minEpochOrDate, maxEpochOrDate) {\n      // Force it to a date type\n      if (typeof minEpochOrDate === 'number') {\n        minEpochOrDate = new Date(minEpochOrDate * 1000);\n      }\n      if (typeof maxEpochOrDate === 'number') {\n        maxEpochOrDate = new Date(maxEpochOrDate * 1000);\n      }\n      if (this.timebounds !== null) {\n        throw new Error('TimeBounds has been already set - setting timebounds would overwrite it.');\n      }\n\n      // Convert that date to the epoch seconds\n      var minTime = Math.floor(minEpochOrDate.valueOf() / 1000);\n      var maxTime = Math.floor(maxEpochOrDate.valueOf() / 1000);\n      if (minTime < 0) {\n        throw new Error('min_time cannot be negative');\n      }\n      if (maxTime < 0) {\n        throw new Error('max_time cannot be negative');\n      }\n      if (maxTime > 0 && minTime > maxTime) {\n        throw new Error('min_time cannot be greater than max_time');\n      }\n      this.timebounds = {\n        minTime: minTime,\n        maxTime: maxTime\n      };\n      return this;\n    }\n\n    /**\n     * If you want to prepare a transaction which will only be valid within some\n     * range of ledgers, you can set a ledgerbounds precondition.\n     * Internally this will set the `minLedger` and `maxLedger` preconditions.\n     *\n     * @param {number} minLedger  The minimum ledger this transaction is valid at\n     *     or after. Cannot be negative. If the value is `0` (the default), the\n     *     transaction is valid immediately.\n     *\n     * @param {number} maxLedger  The maximum ledger this transaction is valid\n     *     before. Cannot be negative. If the value is `0`, the transaction is\n     *     valid indefinitely.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setLedgerbounds\",\n    value: function setLedgerbounds(minLedger, maxLedger) {\n      if (this.ledgerbounds !== null) {\n        throw new Error('LedgerBounds has been already set - setting ledgerbounds would overwrite it.');\n      }\n      if (minLedger < 0) {\n        throw new Error('min_ledger cannot be negative');\n      }\n      if (maxLedger < 0) {\n        throw new Error('max_ledger cannot be negative');\n      }\n      if (maxLedger > 0 && minLedger > maxLedger) {\n        throw new Error('min_ledger cannot be greater than max_ledger');\n      }\n      this.ledgerbounds = {\n        minLedger: minLedger,\n        maxLedger: maxLedger\n      };\n      return this;\n    }\n\n    /**\n     * If you want to prepare a transaction which will be valid only while the\n     * account sequence number is\n     *\n     *     minAccountSequence <= sourceAccountSequence < tx.seqNum\n     *\n     * Note that after execution the account's sequence number is always raised to\n     * `tx.seqNum`. Internally this will set the `minAccountSequence`\n     * precondition.\n     *\n     * @param {string} minAccountSequence   The minimum source account sequence\n     *     number this transaction is valid for. If the value is `0` (the\n     *     default), the transaction is valid when `sourceAccount's sequence\n     *     number == tx.seqNum- 1`.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setMinAccountSequence\",\n    value: function setMinAccountSequence(minAccountSequence) {\n      if (this.minAccountSequence !== null) {\n        throw new Error('min_account_sequence has been already set - setting min_account_sequence would overwrite it.');\n      }\n      this.minAccountSequence = minAccountSequence;\n      return this;\n    }\n\n    /**\n     * For the transaction to be valid, the current ledger time must be at least\n     * `minAccountSequenceAge` greater than sourceAccount's `sequenceTime`.\n     * Internally this will set the `minAccountSequenceAge` precondition.\n     *\n     * @param {number} durationInSeconds  The minimum amount of time between\n     *     source account sequence time and the ledger time when this transaction\n     *     will become valid. If the value is `0`, the transaction is unrestricted\n     *     by the account sequence age. Cannot be negative.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setMinAccountSequenceAge\",\n    value: function setMinAccountSequenceAge(durationInSeconds) {\n      if (typeof durationInSeconds !== 'number') {\n        throw new Error('min_account_sequence_age must be a number');\n      }\n      if (this.minAccountSequenceAge !== null) {\n        throw new Error('min_account_sequence_age has been already set - setting min_account_sequence_age would overwrite it.');\n      }\n      if (durationInSeconds < 0) {\n        throw new Error('min_account_sequence_age cannot be negative');\n      }\n      this.minAccountSequenceAge = durationInSeconds;\n      return this;\n    }\n\n    /**\n     * For the transaction to be valid, the current ledger number must be at least\n     * `minAccountSequenceLedgerGap` greater than sourceAccount's ledger sequence.\n     * Internally this will set the `minAccountSequenceLedgerGap` precondition.\n     *\n     * @param {number} gap  The minimum number of ledgers between source account\n     *     sequence and the ledger number when this transaction will become valid.\n     *     If the value is `0`, the transaction is unrestricted by the account\n     *     sequence ledger. Cannot be negative.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setMinAccountSequenceLedgerGap\",\n    value: function setMinAccountSequenceLedgerGap(gap) {\n      if (this.minAccountSequenceLedgerGap !== null) {\n        throw new Error('min_account_sequence_ledger_gap has been already set - setting min_account_sequence_ledger_gap would overwrite it.');\n      }\n      if (gap < 0) {\n        throw new Error('min_account_sequence_ledger_gap cannot be negative');\n      }\n      this.minAccountSequenceLedgerGap = gap;\n      return this;\n    }\n\n    /**\n     * For the transaction to be valid, there must be a signature corresponding to\n     * every Signer in this array, even if the signature is not otherwise required\n     * by the sourceAccount or operations. Internally this will set the\n     * `extraSigners` precondition.\n     *\n     * @param {string[]} extraSigners   required extra signers (as {@link StrKey}s)\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setExtraSigners\",\n    value: function setExtraSigners(extraSigners) {\n      if (!Array.isArray(extraSigners)) {\n        throw new Error('extra_signers must be an array of strings.');\n      }\n      if (this.extraSigners !== null) {\n        throw new Error('extra_signers has been already set - setting extra_signers would overwrite it.');\n      }\n      if (extraSigners.length > 2) {\n        throw new Error('extra_signers cannot be longer than 2 elements.');\n      }\n      this.extraSigners = _toConsumableArray(extraSigners);\n      return this;\n    }\n\n    /**\n     * Set network nassphrase for the Transaction that will be built.\n     *\n     * @param {string} networkPassphrase    passphrase of the target Stellar\n     *     network (e.g. \"Public Global Stellar Network ; September 2015\").\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setNetworkPassphrase\",\n    value: function setNetworkPassphrase(networkPassphrase) {\n      this.networkPassphrase = networkPassphrase;\n      return this;\n    }\n\n    /**\n     * Sets the transaction's internal Soroban transaction data (resources,\n     * footprint, etc.).\n     *\n     * For non-contract(non-Soroban) transactions, this setting has no effect. In\n     * the case of Soroban transactions, this is either an instance of\n     * {@link xdr.SorobanTransactionData} or a base64-encoded string of said\n     * structure. This is usually obtained from the simulation response based on a\n     * transaction with a Soroban operation (e.g.\n     * {@link Operation.invokeHostFunction}, providing necessary resource\n     * and storage footprint estimations for contract invocation.\n     *\n     * @param {xdr.SorobanTransactionData | string} sorobanData    the\n     *    {@link xdr.SorobanTransactionData} as a raw xdr object or a base64\n     *    string to be decoded\n     *\n     * @returns {TransactionBuilder}\n     * @see {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setSorobanData\",\n    value: function setSorobanData(sorobanData) {\n      this.sorobanData = new _sorobandata_builder.SorobanDataBuilder(sorobanData).build();\n      return this;\n    }\n\n    /**\n     * This will build the transaction.\n     * It will also increment the source account's sequence number by 1.\n     * @returns {Transaction} This method will return the built {@link Transaction}.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      var sequenceNumber = new _bignumber[\"default\"](this.source.sequenceNumber()).plus(1);\n      var fee = new _bignumber[\"default\"](this.baseFee).times(this.operations.length).toNumber();\n      var attrs = {\n        fee: fee,\n        seqNum: _xdr[\"default\"].SequenceNumber.fromString(sequenceNumber.toString()),\n        memo: this.memo ? this.memo.toXDRObject() : null\n      };\n      if (this.timebounds === null || typeof this.timebounds.minTime === 'undefined' || typeof this.timebounds.maxTime === 'undefined') {\n        throw new Error('TimeBounds has to be set or you must call setTimeout(TimeoutInfinite).');\n      }\n      if (isValidDate(this.timebounds.minTime)) {\n        this.timebounds.minTime = this.timebounds.minTime.getTime() / 1000;\n      }\n      if (isValidDate(this.timebounds.maxTime)) {\n        this.timebounds.maxTime = this.timebounds.maxTime.getTime() / 1000;\n      }\n      this.timebounds.minTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.minTime.toString());\n      this.timebounds.maxTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.maxTime.toString());\n      var timeBounds = new _xdr[\"default\"].TimeBounds(this.timebounds);\n      if (this.hasV2Preconditions()) {\n        var ledgerBounds = null;\n        if (this.ledgerbounds !== null) {\n          ledgerBounds = new _xdr[\"default\"].LedgerBounds(this.ledgerbounds);\n        }\n        var minSeqNum = this.minAccountSequence || '0';\n        minSeqNum = _xdr[\"default\"].SequenceNumber.fromString(minSeqNum);\n        var minSeqAge = _jsXdr.UnsignedHyper.fromString(this.minAccountSequenceAge !== null ? this.minAccountSequenceAge.toString() : '0');\n        var minSeqLedgerGap = this.minAccountSequenceLedgerGap || 0;\n        var extraSigners = this.extraSigners !== null ? this.extraSigners.map(_signerkey.SignerKey.decodeAddress) : [];\n        attrs.cond = _xdr[\"default\"].Preconditions.precondV2(new _xdr[\"default\"].PreconditionsV2({\n          timeBounds: timeBounds,\n          ledgerBounds: ledgerBounds,\n          minSeqNum: minSeqNum,\n          minSeqAge: minSeqAge,\n          minSeqLedgerGap: minSeqLedgerGap,\n          extraSigners: extraSigners\n        }));\n      } else {\n        attrs.cond = _xdr[\"default\"].Preconditions.precondTime(timeBounds);\n      }\n      attrs.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(this.source.accountId());\n\n      // TODO - remove this workaround for TransactionExt ts constructor\n      //       and use the typescript generated static factory method once fixed\n      //       https://github.com/stellar/dts-xdr/issues/5\n      if (this.sorobanData) {\n        // @ts-ignore\n        attrs.ext = new _xdr[\"default\"].TransactionExt(1, this.sorobanData);\n      } else {\n        // @ts-ignore\n        attrs.ext = new _xdr[\"default\"].TransactionExt(0, _xdr[\"default\"].Void);\n      }\n      var xtx = new _xdr[\"default\"].Transaction(attrs);\n      xtx.operations(this.operations);\n      var txEnvelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(new _xdr[\"default\"].TransactionV1Envelope({\n        tx: xtx\n      }));\n      var tx = new _transaction.Transaction(txEnvelope, this.networkPassphrase);\n      this.source.incrementSequenceNumber();\n      return tx;\n    }\n  }, {\n    key: \"hasV2Preconditions\",\n    value: function hasV2Preconditions() {\n      return this.ledgerbounds !== null || this.minAccountSequence !== null || this.minAccountSequenceAge !== null || this.minAccountSequenceLedgerGap !== null || this.extraSigners !== null && this.extraSigners.length > 0;\n    }\n\n    /**\n     * Builds a {@link FeeBumpTransaction}, enabling you to resubmit an existing\n     * transaction with a higher fee.\n     *\n     * @param {Keypair|string}  feeSource - account paying for the transaction,\n     *     in the form of either a Keypair (only the public key is used) or\n     *     an account ID (in G... or M... form, but refer to `withMuxing`)\n     * @param {string}          baseFee   - max fee willing to pay per operation\n     *     in inner transaction (**in stroops**)\n     * @param {Transaction}     innerTx   - {@link Transaction} to be bumped by\n     *     the fee bump transaction\n     * @param {string}          networkPassphrase - passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September 2015\",\n     *     see {@link Networks})\n     *\n     * @todo Alongside the next major version bump, this type signature can be\n     *       changed to be less awkward: accept a MuxedAccount as the `feeSource`\n     *       rather than a keypair or string.\n     *\n     * @note Your fee-bump amount should be >= 10x the original fee.\n     * @see  https://developers.stellar.org/docs/glossary/fee-bumps/#replace-by-fee\n     *\n     * @returns {FeeBumpTransaction}\n     */\n  }], [{\n    key: \"cloneFrom\",\n    value: function cloneFrom(tx) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!(tx instanceof _transaction.Transaction)) {\n        throw new TypeError(\"expected a 'Transaction', got: \".concat(tx));\n      }\n      var sequenceNum = (BigInt(tx.sequence) - 1n).toString();\n      var source;\n      // rebuild the source account based on the strkey\n      if (_strkey.StrKey.isValidMed25519PublicKey(tx.source)) {\n        source = _muxed_account.MuxedAccount.fromAddress(tx.source, sequenceNum);\n      } else if (_strkey.StrKey.isValidEd25519PublicKey(tx.source)) {\n        source = new _account.Account(tx.source, sequenceNum);\n      } else {\n        throw new TypeError(\"unsupported tx source account: \".concat(tx.source));\n      }\n\n      // the initial fee passed to the builder gets scaled up based on the number\n      // of operations at the end, so we have to down-scale first\n      var unscaledFee = parseInt(tx.fee, 10) / tx.operations.length;\n      var builder = new TransactionBuilder(source, _objectSpread({\n        fee: (unscaledFee || BASE_FEE).toString(),\n        memo: tx.memo,\n        networkPassphrase: tx.networkPassphrase,\n        timebounds: tx.timeBounds,\n        ledgerbounds: tx.ledgerBounds,\n        minAccountSequence: tx.minAccountSequence,\n        minAccountSequenceAge: tx.minAccountSequenceAge,\n        minAccountSequenceLedgerGap: tx.minAccountSequenceLedgerGap,\n        extraSigners: tx.extraSigners\n      }, opts));\n      tx._tx.operations().forEach(function (op) {\n        return builder.addOperation(op);\n      });\n      return builder;\n    }\n  }, {\n    key: \"buildFeeBumpTransaction\",\n    value: function buildFeeBumpTransaction(feeSource, baseFee, innerTx, networkPassphrase) {\n      var innerOps = innerTx.operations.length;\n      var innerBaseFeeRate = new _bignumber[\"default\"](innerTx.fee).div(innerOps);\n      var base = new _bignumber[\"default\"](baseFee);\n\n      // The fee rate for fee bump is at least the fee rate of the inner transaction\n      if (base.lt(innerBaseFeeRate)) {\n        throw new Error(\"Invalid baseFee, it should be at least \".concat(innerBaseFeeRate, \" stroops.\"));\n      }\n      var minBaseFee = new _bignumber[\"default\"](BASE_FEE);\n\n      // The fee rate is at least the minimum fee\n      if (base.lt(minBaseFee)) {\n        throw new Error(\"Invalid baseFee, it should be at least \".concat(minBaseFee, \" stroops.\"));\n      }\n      var innerTxEnvelope = innerTx.toEnvelope();\n      if (innerTxEnvelope[\"switch\"]() === _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0()) {\n        var v0Tx = innerTxEnvelope.v0().tx();\n        var v1Tx = new _xdr[\"default\"].Transaction({\n          sourceAccount: new _xdr[\"default\"].MuxedAccount.keyTypeEd25519(v0Tx.sourceAccountEd25519()),\n          fee: v0Tx.fee(),\n          seqNum: v0Tx.seqNum(),\n          cond: _xdr[\"default\"].Preconditions.precondTime(v0Tx.timeBounds()),\n          memo: v0Tx.memo(),\n          operations: v0Tx.operations(),\n          ext: new _xdr[\"default\"].TransactionExt(0)\n        });\n        innerTxEnvelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(new _xdr[\"default\"].TransactionV1Envelope({\n          tx: v1Tx,\n          signatures: innerTxEnvelope.v0().signatures()\n        }));\n      }\n      var feeSourceAccount;\n      if (typeof feeSource === 'string') {\n        feeSourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(feeSource);\n      } else {\n        feeSourceAccount = feeSource.xdrMuxedAccount();\n      }\n      var tx = new _xdr[\"default\"].FeeBumpTransaction({\n        feeSource: feeSourceAccount,\n        fee: _xdr[\"default\"].Int64.fromString(base.times(innerOps + 1).toString()),\n        innerTx: _xdr[\"default\"].FeeBumpTransactionInnerTx.envelopeTypeTx(innerTxEnvelope.v1()),\n        ext: new _xdr[\"default\"].FeeBumpTransactionExt(0)\n      });\n      var feeBumpTxEnvelope = new _xdr[\"default\"].FeeBumpTransactionEnvelope({\n        tx: tx,\n        signatures: []\n      });\n      var envelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTxFeeBump(feeBumpTxEnvelope);\n      return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase);\n    }\n\n    /**\n     * Build a {@link Transaction} or {@link FeeBumpTransaction} from an\n     * xdr.TransactionEnvelope.\n     *\n     * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope\n     *     object or base64 encoded string.\n     * @param {string} networkPassphrase - The network passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September\n     *     2015\"), see {@link Networks}.\n     *\n     * @returns {Transaction|FeeBumpTransaction}\n     */\n  }, {\n    key: \"fromXDR\",\n    value: function fromXDR(envelope, networkPassphrase) {\n      if (typeof envelope === 'string') {\n        envelope = _xdr[\"default\"].TransactionEnvelope.fromXDR(envelope, 'base64');\n      }\n      if (envelope[\"switch\"]() === _xdr[\"default\"].EnvelopeType.envelopeTypeTxFeeBump()) {\n        return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase);\n      }\n      return new _transaction.Transaction(envelope, networkPassphrase);\n    }\n  }]);\n}();\n/**\n * Checks whether a provided object is a valid Date.\n * @argument {Date} d date object\n * @returns {boolean}\n */\nfunction isValidDate(d) {\n  // isnan is okay here because it correctly checks for invalid date objects\n  // eslint-disable-next-line no-restricted-globals\n  return d instanceof Date && !isNaN(d);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/transaction_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar BigNumber = _bignumber[\"default\"].clone();\nBigNumber.DEBUG = true; // gives us exceptions on bad constructor values\nvar _default = exports[\"default\"] = BigNumber;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL2JpZ251bWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsd0NBQXdDLG1CQUFPLENBQUMsMEdBQWM7QUFDOUQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBLHdCQUF3QjtBQUN4QixlQUFlLGtCQUFrQiIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL2JpZ251bWJlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9iaWdudW1iZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJiaWdudW1iZXIuanNcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbnZhciBCaWdOdW1iZXIgPSBfYmlnbnVtYmVyW1wiZGVmYXVsdFwiXS5jbG9uZSgpO1xuQmlnTnVtYmVyLkRFQlVHID0gdHJ1ZTsgLy8gZ2l2ZXMgdXMgZXhjZXB0aW9ucyBvbiBiYWQgY29uc3RydWN0b3IgdmFsdWVzXG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IEJpZ051bWJlcjsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/checksum.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/checksum.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.verifyChecksum = verifyChecksum;\nfunction verifyChecksum(expected, actual) {\n  if (expected.length !== actual.length) {\n    return false;\n  }\n  if (expected.length === 0) {\n    return true;\n  }\n  for (var i = 0; i < expected.length; i += 1) {\n    if (expected[i] !== actual[i]) {\n      return false;\n    }\n  }\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL2NoZWNrc3VtLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL3V0aWwvY2hlY2tzdW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnZlcmlmeUNoZWNrc3VtID0gdmVyaWZ5Q2hlY2tzdW07XG5mdW5jdGlvbiB2ZXJpZnlDaGVja3N1bShleHBlY3RlZCwgYWN0dWFsKSB7XG4gIGlmIChleHBlY3RlZC5sZW5ndGggIT09IGFjdHVhbC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGV4cGVjdGVkLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZXhwZWN0ZWRbaV0gIT09IGFjdHVhbFtpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/checksum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/continued_fraction.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/continued_fraction.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.best_r = best_r;\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./bignumber */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// eslint-disable-next-line no-bitwise\nvar MAX_INT = (1 << 31 >>> 0) - 1;\n\n/**\n * Calculates and returns the best rational approximation of the given real number.\n * @private\n * @param {string|number|BigNumber} rawNumber Real number\n * @throws Error Throws `Error` when the best rational approximation cannot be found.\n * @returns {array} first element is n (numerator), second element is d (denominator)\n */\nfunction best_r(rawNumber) {\n  var number = new _bignumber[\"default\"](rawNumber);\n  var a;\n  var f;\n  var fractions = [[new _bignumber[\"default\"](0), new _bignumber[\"default\"](1)], [new _bignumber[\"default\"](1), new _bignumber[\"default\"](0)]];\n  var i = 2;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (number.gt(MAX_INT)) {\n      break;\n    }\n    a = number.integerValue(_bignumber[\"default\"].ROUND_FLOOR);\n    f = number.minus(a);\n    var h = a.times(fractions[i - 1][0]).plus(fractions[i - 2][0]);\n    var k = a.times(fractions[i - 1][1]).plus(fractions[i - 2][1]);\n    if (h.gt(MAX_INT) || k.gt(MAX_INT)) {\n      break;\n    }\n    fractions.push([h, k]);\n    if (f.eq(0)) {\n      break;\n    }\n    number = new _bignumber[\"default\"](1).div(f);\n    i += 1;\n  }\n  var _fractions = _slicedToArray(fractions[fractions.length - 1], 2),\n    n = _fractions[0],\n    d = _fractions[1];\n  if (n.isZero() || d.isZero()) {\n    throw new Error(\"Couldn't find approximation\");\n  }\n  return [n.toNumber(), d.toNumber()];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL2NvbnRpbnVlZF9mcmFjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjO0FBQ2Qsd0NBQXdDLG1CQUFPLENBQUMscUlBQWE7QUFDN0QscUNBQXFDLGlDQUFpQztBQUN0RSxnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCLDZDQUE2QyxTQUFTLDBEQUEwRCxVQUFVLGdDQUFnQztBQUMxSixtQ0FBbUMsK0NBQStDLDhCQUE4QixPQUFPLGtCQUFrQjtBQUN6SSx1Q0FBdUMsa0dBQWtHLGlCQUFpQix3Q0FBd0MsTUFBTSx5Q0FBeUMsNkJBQTZCLFVBQVUsWUFBWSxrRUFBa0UsV0FBVyxZQUFZLGlCQUFpQixVQUFVLE1BQU0saUZBQWlGLFVBQVUsb0JBQW9CO0FBQzdnQiw4QkFBOEI7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQztBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9Kb2FxdWluTmFtL0Rlc2t0b3AvTUVOVEVfTUFFU1RSQS8xQ0xJRU5UUy9ET0JQUk9UT0NPTC9ET0JWQUxJREFUT1IvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0BzdGVsbGFyK3N0ZWxsYXItYmFzZUAxMy4xLjAvbm9kZV9tb2R1bGVzL0BzdGVsbGFyL3N0ZWxsYXItYmFzZS9saWIvdXRpbC9jb250aW51ZWRfZnJhY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmJlc3RfciA9IGJlc3RfcjtcbnZhciBfYmlnbnVtYmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9iaWdudW1iZXJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KHIsIGUpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQociwgZSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGUpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHsgaWYgKHIpIHsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTsgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTsgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7IH0gfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgeyAobnVsbCA9PSBhIHx8IGEgPiByLmxlbmd0aCkgJiYgKGEgPSByLmxlbmd0aCk7IGZvciAodmFyIGUgPSAwLCBuID0gQXJyYXkoYSk7IGUgPCBhOyBlKyspIG5bZV0gPSByW2VdOyByZXR1cm4gbjsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gdCkgeyB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTsgdHJ5IHsgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkgeyBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47IGYgPSAhMTsgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApOyB9IGNhdGNoIChyKSB7IG8gPSAhMCwgbiA9IHI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghZiAmJiBudWxsICE9IHRbXCJyZXR1cm5cIl0gJiYgKHUgPSB0W1wicmV0dXJuXCJdKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjsgfSBmaW5hbGx5IHsgaWYgKG8pIHRocm93IG47IH0gfSByZXR1cm4gYTsgfSB9XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMocikgeyBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIHI7IH1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG52YXIgTUFYX0lOVCA9ICgxIDw8IDMxID4+PiAwKSAtIDE7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhbmQgcmV0dXJucyB0aGUgYmVzdCByYXRpb25hbCBhcHByb3hpbWF0aW9uIG9mIHRoZSBnaXZlbiByZWFsIG51bWJlci5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8QmlnTnVtYmVyfSByYXdOdW1iZXIgUmVhbCBudW1iZXJcbiAqIEB0aHJvd3MgRXJyb3IgVGhyb3dzIGBFcnJvcmAgd2hlbiB0aGUgYmVzdCByYXRpb25hbCBhcHByb3hpbWF0aW9uIGNhbm5vdCBiZSBmb3VuZC5cbiAqIEByZXR1cm5zIHthcnJheX0gZmlyc3QgZWxlbWVudCBpcyBuIChudW1lcmF0b3IpLCBzZWNvbmQgZWxlbWVudCBpcyBkIChkZW5vbWluYXRvcilcbiAqL1xuZnVuY3Rpb24gYmVzdF9yKHJhd051bWJlcikge1xuICB2YXIgbnVtYmVyID0gbmV3IF9iaWdudW1iZXJbXCJkZWZhdWx0XCJdKHJhd051bWJlcik7XG4gIHZhciBhO1xuICB2YXIgZjtcbiAgdmFyIGZyYWN0aW9ucyA9IFtbbmV3IF9iaWdudW1iZXJbXCJkZWZhdWx0XCJdKDApLCBuZXcgX2JpZ251bWJlcltcImRlZmF1bHRcIl0oMSldLCBbbmV3IF9iaWdudW1iZXJbXCJkZWZhdWx0XCJdKDEpLCBuZXcgX2JpZ251bWJlcltcImRlZmF1bHRcIl0oMCldXTtcbiAgdmFyIGkgPSAyO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAobnVtYmVyLmd0KE1BWF9JTlQpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYSA9IG51bWJlci5pbnRlZ2VyVmFsdWUoX2JpZ251bWJlcltcImRlZmF1bHRcIl0uUk9VTkRfRkxPT1IpO1xuICAgIGYgPSBudW1iZXIubWludXMoYSk7XG4gICAgdmFyIGggPSBhLnRpbWVzKGZyYWN0aW9uc1tpIC0gMV1bMF0pLnBsdXMoZnJhY3Rpb25zW2kgLSAyXVswXSk7XG4gICAgdmFyIGsgPSBhLnRpbWVzKGZyYWN0aW9uc1tpIC0gMV1bMV0pLnBsdXMoZnJhY3Rpb25zW2kgLSAyXVsxXSk7XG4gICAgaWYgKGguZ3QoTUFYX0lOVCkgfHwgay5ndChNQVhfSU5UKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGZyYWN0aW9ucy5wdXNoKFtoLCBrXSk7XG4gICAgaWYgKGYuZXEoMCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBudW1iZXIgPSBuZXcgX2JpZ251bWJlcltcImRlZmF1bHRcIl0oMSkuZGl2KGYpO1xuICAgIGkgKz0gMTtcbiAgfVxuICB2YXIgX2ZyYWN0aW9ucyA9IF9zbGljZWRUb0FycmF5KGZyYWN0aW9uc1tmcmFjdGlvbnMubGVuZ3RoIC0gMV0sIDIpLFxuICAgIG4gPSBfZnJhY3Rpb25zWzBdLFxuICAgIGQgPSBfZnJhY3Rpb25zWzFdO1xuICBpZiAobi5pc1plcm8oKSB8fCBkLmlzWmVybygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhcHByb3hpbWF0aW9uXCIpO1xuICB9XG4gIHJldHVybiBbbi50b051bWJlcigpLCBkLnRvTnVtYmVyKCldO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/continued_fraction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.decodeAddressToMuxedAccount = decodeAddressToMuxedAccount;\nexports.encodeMuxedAccount = encodeMuxedAccount;\nexports.encodeMuxedAccountToAddress = encodeMuxedAccountToAddress;\nexports.extractBaseAddress = extractBaseAddress;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Converts a Stellar address (in G... or M... form) to an `xdr.MuxedAccount`\n * structure, using the ed25519 representation when possible.\n *\n * This supports full muxed accounts, where an `M...` address will resolve to\n * both its underlying `G...` address and an integer ID.\n *\n * @param   {string}  address   G... or M... address to encode into XDR\n * @returns {xdr.MuxedAccount}  a muxed account object for this address string\n */\nfunction decodeAddressToMuxedAccount(address) {\n  if (_strkey.StrKey.isValidMed25519PublicKey(address)) {\n    return _decodeAddressFullyToMuxedAccount(address);\n  }\n  return _xdr[\"default\"].MuxedAccount.keyTypeEd25519(_strkey.StrKey.decodeEd25519PublicKey(address));\n}\n\n/**\n * Converts an xdr.MuxedAccount to its StrKey representation.\n *\n * This returns its \"M...\" string representation if there is a muxing ID within\n * the object and returns the \"G...\" representation otherwise.\n *\n * @param   {xdr.MuxedAccount} muxedAccount   Raw account to stringify\n * @returns {string} Stringified G... (corresponding to the underlying pubkey)\n *     or M... address (corresponding to both the key and the muxed ID)\n *\n * @see https://stellar.org/protocol/sep-23\n */\nfunction encodeMuxedAccountToAddress(muxedAccount) {\n  if (muxedAccount[\"switch\"]().value === _xdr[\"default\"].CryptoKeyType.keyTypeMuxedEd25519().value) {\n    return _encodeMuxedAccountFullyToAddress(muxedAccount);\n  }\n  return _strkey.StrKey.encodeEd25519PublicKey(muxedAccount.ed25519());\n}\n\n/**\n * Transform a Stellar address (G...) and an ID into its XDR representation.\n *\n * @param  {string} address   - a Stellar G... address\n * @param  {string} id        - a Uint64 ID represented as a string\n *\n * @return {xdr.MuxedAccount} - XDR representation of the above muxed account\n */\nfunction encodeMuxedAccount(address, id) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(address)) {\n    throw new Error('address should be a Stellar account ID (G...)');\n  }\n  if (typeof id !== 'string') {\n    throw new Error('id should be a string representing a number (uint64)');\n  }\n  return _xdr[\"default\"].MuxedAccount.keyTypeMuxedEd25519(new _xdr[\"default\"].MuxedAccountMed25519({\n    id: _xdr[\"default\"].Uint64.fromString(id),\n    ed25519: _strkey.StrKey.decodeEd25519PublicKey(address)\n  }));\n}\n\n/**\n * Extracts the underlying base (G...) address from an M-address.\n * @param  {string} address   an account address (either M... or G...)\n * @return {string} a Stellar public key address (G...)\n */\nfunction extractBaseAddress(address) {\n  if (_strkey.StrKey.isValidEd25519PublicKey(address)) {\n    return address;\n  }\n  if (!_strkey.StrKey.isValidMed25519PublicKey(address)) {\n    throw new TypeError(\"expected muxed account (M...), got \".concat(address));\n  }\n  var muxedAccount = decodeAddressToMuxedAccount(address);\n  return _strkey.StrKey.encodeEd25519PublicKey(muxedAccount.med25519().ed25519());\n}\n\n// Decodes an \"M...\" account ID into its MuxedAccount object representation.\nfunction _decodeAddressFullyToMuxedAccount(address) {\n  var rawBytes = _strkey.StrKey.decodeMed25519PublicKey(address);\n\n  // Decoding M... addresses cannot be done through a simple\n  // MuxedAccountMed25519.fromXDR() call, because the definition is:\n  //\n  //    constructor(attributes: { id: Uint64; ed25519: Buffer });\n  //\n  // Note the ID is the first attribute. However, the ID comes *last* in the\n  // stringified (base32-encoded) address itself (it's the last 8-byte suffix).\n  // The `fromXDR()` method interprets bytes in order, so we need to parse out\n  // the raw binary into its requisite parts, i.e. use the MuxedAccountMed25519\n  // constructor directly.\n  //\n  // Refer to https://github.com/stellar/go/blob/master/xdr/muxed_account.go#L26\n  // for the Golang implementation of the M... parsing.\n  return _xdr[\"default\"].MuxedAccount.keyTypeMuxedEd25519(new _xdr[\"default\"].MuxedAccountMed25519({\n    id: _xdr[\"default\"].Uint64.fromXDR(rawBytes.subarray(-8)),\n    ed25519: rawBytes.subarray(0, -8)\n  }));\n}\n\n// Converts an xdr.MuxedAccount into its *true* \"M...\" string representation.\nfunction _encodeMuxedAccountFullyToAddress(muxedAccount) {\n  if (muxedAccount[\"switch\"]() === _xdr[\"default\"].CryptoKeyType.keyTypeEd25519()) {\n    return encodeMuxedAccountToAddress(muxedAccount);\n  }\n  var muxed = muxedAccount.med25519();\n  return _strkey.StrKey.encodeMed25519PublicKey(Buffer.concat([muxed.ed25519(), muxed.id().toXDR('raw')]));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/util.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/util.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.trimEnd = void 0;\nvar trimEnd = exports.trimEnd = function trimEnd(input, _char) {\n  var isNumber = typeof input === 'number';\n  var str = String(input);\n  while (str.endsWith(_char)) {\n    str = str.slice(0, -1);\n  }\n  return isNumber ? Number(str) : str;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmLGNBQWMsZUFBZTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0pvYXF1aW5OYW0vRGVza3RvcC9NRU5URV9NQUVTVFJBLzFDTElFTlRTL0RPQlBST1RPQ09ML0RPQlZBTElEQVRPUi9mcm9udGVuZC9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL3V0aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRyaW1FbmQgPSB2b2lkIDA7XG52YXIgdHJpbUVuZCA9IGV4cG9ydHMudHJpbUVuZCA9IGZ1bmN0aW9uIHRyaW1FbmQoaW5wdXQsIF9jaGFyKSB7XG4gIHZhciBpc051bWJlciA9IHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcic7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB3aGlsZSAoc3RyLmVuZHNXaXRoKF9jaGFyKSkge1xuICAgIHN0ciA9IHN0ci5zbGljZSgwLCAtMSk7XG4gIH1cbiAgcmV0dXJuIGlzTnVtYmVyID8gTnVtYmVyKHN0cikgOiBzdHI7XG59OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/util/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _curr_generated = _interopRequireDefault(__webpack_require__(/*! ./generated/curr_generated */ \"(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/generated/curr_generated.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar _default = exports[\"default\"] = _curr_generated[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZWxsYXIrc3RlbGxhci1iYXNlQDEzLjEuMC9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi94ZHIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCO0FBQ2xCLDZDQUE2QyxtQkFBTyxDQUFDLDhKQUE0QjtBQUNqRixxQ0FBcUMsaUNBQWlDO0FBQ3RFLGVBQWUsa0JBQWtCIiwic291cmNlcyI6WyIvVXNlcnMvSm9hcXVpbk5hbS9EZXNrdG9wL01FTlRFX01BRVNUUkEvMUNMSUVOVFMvRE9CUFJPVE9DT0wvRE9CVkFMSURBVE9SL2Zyb250ZW5kL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbGxhcitzdGVsbGFyLWJhc2VAMTMuMS4wL25vZGVfbW9kdWxlcy9Ac3RlbGxhci9zdGVsbGFyLWJhc2UvbGliL3hkci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9jdXJyX2dlbmVyYXRlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2VuZXJhdGVkL2N1cnJfZ2VuZXJhdGVkXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9jdXJyX2dlbmVyYXRlZFtcImRlZmF1bHRcIl07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stellar+stellar-base@13.1.0/node_modules/@stellar/stellar-base/lib/xdr.js\n");

/***/ })

};
;