services:
  db:
    image: postgres:15-alpine
    container_name: dob-validator-db-prod
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dob_network

  backend:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    container_name: dob-validator-backend-prod
    restart: always
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOSTNAME=0.0.0.0
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?schema=public
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - STELLAR_NETWORK=testnet
      - STELLAR_HORIZON_URL=https://horizon-testnet.stellar.org
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=10mb
      - RATE_LIMIT_WINDOW=15m
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=info
      - CORS_ORIGIN=${CORS_ORIGIN}
      - TRUST_PROXY=1
    volumes:
      - ../uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3001/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dob_network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: dob-validator-frontend-prod
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${BACKEND_URL}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dob_network

  backoffice:
    build:
      context: .
      dockerfile: backoffice/Dockerfile
    container_name: dob-validator-backoffice-prod
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "3002:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${BACKEND_URL}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dob_network

  nginx:
    image: nginx:alpine
    container_name: dob-validator-nginx-prod
    restart: always
    env_file:
      - .env.production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - ../nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backoffice
      - backend
    networks:
      - dob_network

volumes:
  postgres_data:
    name: dob_postgres_data

networks:
  dob_network:
    name: dob_network
    external: true
